// Generated by purs bundle 0.12.0
var PS = {};
(function(exports) {// module BaseClient

  exports.startAnimationLoop = function(action) {
    var loop = {};

    var go = (function() {
      window.requestAnimationFrame(this.go);
      action();
    }).bind(loop);
    loop.go = go;

    var stop = (function() {
      this.go = function () { }
    }).bind(loop);
    loop.stop = stop;

    return function() {
      loop.go();
      return loop;
    };
  };
})(PS["BaseClient"] = PS["BaseClient"] || {});
(function(exports) {
    "use strict";

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var compose = function (dict) {
      return dict.compose;
  };
  var composeFlipped = function (dictSemigroupoid) {
      return function (f) {
          return function (g) {
              return compose(dictSemigroupoid)(g)(f);
          };
      };
  };
  exports["compose"] = compose;
  exports["Semigroupoid"] = Semigroupoid;
  exports["composeFlipped"] = composeFlipped;
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS["Control.Semigroupoid"] = PS["Control.Semigroupoid"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];                 
  var Category = function (Semigroupoid0, identity) {
      this.Semigroupoid0 = Semigroupoid0;
      this.identity = identity;
  };
  var identity = function (dict) {
      return dict.identity;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["Category"] = Category;
  exports["identity"] = identity;
  exports["categoryFn"] = categoryFn;
})(PS["Control.Category"] = PS["Control.Category"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS["Data.Boolean"] = PS["Data.Boolean"] || {});
(function(exports) {
    "use strict";

  exports.refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };

  exports.eqArrayImpl = function (f) {
    return function (xs) {
      return function (ys) {
        if (xs === ys) return true;
        if (xs.length !== ys.length) return false;
        for (var i = 0; i < xs.length; i++) {
          if (!f(xs[i])(ys[i])) return false;
        }
        return true;
      };
    };
  };
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function(exports) {
    "use strict";

  exports.boolConj = function (b1) {
    return function (b2) {
      return b1 && b2;
    };
  };

  exports.boolDisj = function (b1) {
    return function (b2) {
      return b1 || b2;
    };
  };

  exports.boolNot = function (b) {
    return !b;
  };
})(PS["Data.HeytingAlgebra"] = PS["Data.HeytingAlgebra"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Symbol"];      
  var SProxy = (function () {
      function SProxy() {

      };
      SProxy.value = new SProxy();
      return SProxy;
  })();
  var IsSymbol = function (reflectSymbol) {
      this.reflectSymbol = reflectSymbol;
  };
  var reflectSymbol = function (dict) {
      return dict.reflectSymbol;
  };
  exports["IsSymbol"] = IsSymbol;
  exports["reflectSymbol"] = reflectSymbol;
  exports["SProxy"] = SProxy;
})(PS["Data.Symbol"] = PS["Data.Symbol"] || {});
(function(exports) {
    "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
    "use strict";

  exports.showIntImpl = function (n) {
    return n.toString();
  };

  exports.showNumberImpl = function (n) {
    var str = n.toString();
    return isNaN(str + ".0") ? str : str + ".0";
  };

  exports.showStringImpl = function (s) {
    var l = s.length;
    return "\"" + s.replace(
      /[\0-\x1F\x7F"\\]/g, // eslint-disable-line no-control-regex
      function (c, i) {
        switch (c) {
          case "\"":
          case "\\":
            return "\\" + c;
          case "\x07": return "\\a";
          case "\b": return "\\b";
          case "\f": return "\\f";
          case "\n": return "\\n";
          case "\r": return "\\r";
          case "\t": return "\\t";
          case "\v": return "\\v";
        }
        var k = i + 1;
        var empty = k < l && s[k] >= "0" && s[k] <= "9" ? "\\&" : "";
        return "\\" + c.charCodeAt(0).toString(10) + empty;
      }
    ) + "\"";
  };

  exports.showArrayImpl = function (f) {
    return function (xs) {
      var ss = [];
      for (var i = 0, l = xs.length; i < l; i++) {
        ss[i] = f(xs[i]);
      }
      return "[" + ss.join(",") + "]";
    };
  };

  exports.join = function (separator) {
    return function (xs) {
      return xs.join(separator);
    };
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
    "use strict";

  exports.unsafeSet = function (label) {
    return function (value) {
      return function (rec) {
        var copy = {};
        for (var key in rec) {
          if ({}.hasOwnProperty.call(rec, key)) {
            copy[key] = rec[key];
          }
        }
        copy[label] = value;
        return copy;
      };
    };
  };
})(PS["Record.Unsafe"] = PS["Record.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Record.Unsafe"];
  exports["unsafeSet"] = $foreign.unsafeSet;
})(PS["Record.Unsafe"] = PS["Record.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var RLProxy = (function () {
      function RLProxy() {

      };
      RLProxy.value = new RLProxy();
      return RLProxy;
  })();
  exports["RLProxy"] = RLProxy;
})(PS["Type.Data.RowList"] = PS["Type.Data.RowList"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Show"];
  var Data_Symbol = PS["Data.Symbol"];
  var Record_Unsafe = PS["Record.Unsafe"];
  var Type_Data_RowList = PS["Type.Data.RowList"];                 
  var Show = function (show) {
      this.show = show;
  };
  var showString = new Show($foreign.showStringImpl);
  var showNumber = new Show($foreign.showNumberImpl);
  var showInt = new Show($foreign.showIntImpl);
  var show = function (dict) {
      return dict.show;
  };
  var showArray = function (dictShow) {
      return new Show($foreign.showArrayImpl(show(dictShow)));
  };
  exports["Show"] = Show;
  exports["show"] = show;
  exports["showInt"] = showInt;
  exports["showNumber"] = showNumber;
  exports["showString"] = showString;
  exports["showArray"] = showArray;
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Unit"];
  var Data_Show = PS["Data.Show"];
  exports["unit"] = $foreign.unit;
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.HeytingAlgebra"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Unit = PS["Data.Unit"];
  var Record_Unsafe = PS["Record.Unsafe"];
  var Type_Data_Row = PS["Type.Data.Row"];
  var Type_Data_RowList = PS["Type.Data.RowList"];                 
  var HeytingAlgebra = function (conj, disj, ff, implies, not, tt) {
      this.conj = conj;
      this.disj = disj;
      this.ff = ff;
      this.implies = implies;
      this.not = not;
      this.tt = tt;
  };
  var tt = function (dict) {
      return dict.tt;
  };
  var not = function (dict) {
      return dict.not;
  };
  var implies = function (dict) {
      return dict.implies;
  };
  var ff = function (dict) {
      return dict.ff;
  };
  var disj = function (dict) {
      return dict.disj;
  };
  var heytingAlgebraBoolean = new HeytingAlgebra($foreign.boolConj, $foreign.boolDisj, false, function (a) {
      return function (b) {
          return disj(heytingAlgebraBoolean)(not(heytingAlgebraBoolean)(a))(b);
      };
  }, $foreign.boolNot, true);
  var conj = function (dict) {
      return dict.conj;
  };
  exports["HeytingAlgebra"] = HeytingAlgebra;
  exports["tt"] = tt;
  exports["ff"] = ff;
  exports["implies"] = implies;
  exports["conj"] = conj;
  exports["disj"] = disj;
  exports["not"] = not;
  exports["heytingAlgebraBoolean"] = heytingAlgebraBoolean;
})(PS["Data.HeytingAlgebra"] = PS["Data.HeytingAlgebra"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];
  var Record_Unsafe = PS["Record.Unsafe"];
  var Type_Data_RowList = PS["Type.Data.RowList"];                 
  var Eq = function (eq) {
      this.eq = eq;
  };                                    
  var eqInt = new Eq($foreign.refEq); 
  var eqBoolean = new Eq($foreign.refEq);
  var eq = function (dict) {
      return dict.eq;
  };
  var eqArray = function (dictEq) {
      return new Eq($foreign.eqArrayImpl(eq(dictEq)));
  };
  var notEq = function (dictEq) {
      return function (x) {
          return function (y) {
              return eq(eqBoolean)(eq(dictEq)(x)(y))(false);
          };
      };
  };
  exports["Eq"] = Eq;
  exports["eq"] = eq;
  exports["notEq"] = notEq;
  exports["eqBoolean"] = eqBoolean;
  exports["eqInt"] = eqInt;
  exports["eqArray"] = eqArray;
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function(exports) {
    "use strict";

  exports.unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x === y ? eq : gt;
          };
        };
      };
    };
  };
})(PS["Data.Ord.Unsafe"] = PS["Data.Ord.Unsafe"] || {});
(function(exports) {
    "use strict";

  exports.concatString = function (s1) {
    return function (s2) {
      return s1 + s2;
    };
  };

  exports.concatArray = function (xs) {
    return function (ys) {
      if (xs.length === 0) return ys;
      if (ys.length === 0) return xs;
      return xs.concat(ys);
    };
  };
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Semigroup"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];
  var Record_Unsafe = PS["Record.Unsafe"];
  var Type_Data_RowList = PS["Type.Data.RowList"];                 
  var Semigroup = function (append) {
      this.append = append;
  }; 
  var semigroupString = new Semigroup($foreign.concatString);
  var semigroupArray = new Semigroup($foreign.concatArray);
  var append = function (dict) {
      return dict.append;
  };
  exports["Semigroup"] = Semigroup;
  exports["append"] = append;
  exports["semigroupString"] = semigroupString;
  exports["semigroupArray"] = semigroupArray;
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Eq = PS["Data.Eq"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];                 
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  var eqOrdering = new Data_Eq.Eq(function (v) {
      return function (v1) {
          if (v instanceof LT && v1 instanceof LT) {
              return true;
          };
          if (v instanceof GT && v1 instanceof GT) {
              return true;
          };
          if (v instanceof EQ && v1 instanceof EQ) {
              return true;
          };
          return false;
      };
  });
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
  exports["eqOrdering"] = eqOrdering;
})(PS["Data.Ordering"] = PS["Data.Ordering"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Ord.Unsafe"];
  var Data_Ordering = PS["Data.Ordering"];                 
  var unsafeCompare = $foreign.unsafeCompareImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value);
  exports["unsafeCompare"] = unsafeCompare;
})(PS["Data.Ord.Unsafe"] = PS["Data.Ord.Unsafe"] || {});
(function(exports) {
    "use strict";

  exports.intSub = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x - y | 0;
    };
  };
})(PS["Data.Ring"] = PS["Data.Ring"] || {});
(function(exports) {
    "use strict";

  exports.intAdd = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x + y | 0;
    };
  };

  exports.intMul = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x * y | 0;
    };
  };
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Semiring"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Unit = PS["Data.Unit"];
  var Record_Unsafe = PS["Record.Unsafe"];
  var Type_Data_Row = PS["Type.Data.Row"];
  var Type_Data_RowList = PS["Type.Data.RowList"];                 
  var Semiring = function (add, mul, one, zero) {
      this.add = add;
      this.mul = mul;
      this.one = one;
      this.zero = zero;
  };
  var zero = function (dict) {
      return dict.zero;
  };                                                                            
  var semiringInt = new Semiring($foreign.intAdd, $foreign.intMul, 1, 0);
  var one = function (dict) {
      return dict.one;
  };
  var mul = function (dict) {
      return dict.mul;
  };
  var add = function (dict) {
      return dict.add;
  };
  exports["Semiring"] = Semiring;
  exports["add"] = add;
  exports["zero"] = zero;
  exports["mul"] = mul;
  exports["one"] = one;
  exports["semiringInt"] = semiringInt;
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Unit = PS["Data.Unit"];
  var Record_Unsafe = PS["Record.Unsafe"];
  var Type_Data_RowList = PS["Type.Data.RowList"];                 
  var Ring = function (Semiring0, sub) {
      this.Semiring0 = Semiring0;
      this.sub = sub;
  };
  var sub = function (dict) {
      return dict.sub;
  };                  
  var ringInt = new Ring(function () {
      return Data_Semiring.semiringInt;
  }, $foreign.intSub);
  exports["Ring"] = Ring;
  exports["sub"] = sub;
  exports["ringInt"] = ringInt;
})(PS["Data.Ring"] = PS["Data.Ring"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Ord"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord_Unsafe = PS["Data.Ord.Unsafe"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];
  var Record_Unsafe = PS["Record.Unsafe"];
  var Type_Data_RowList = PS["Type.Data.RowList"];                 
  var Ord = function (Eq0, compare) {
      this.Eq0 = Eq0;
      this.compare = compare;
  };                                
  var ordInt = new Ord(function () {
      return Data_Eq.eqInt;
  }, Data_Ord_Unsafe.unsafeCompare);
  var compare = function (dict) {
      return dict.compare;
  };
  exports["Ord"] = Ord;
  exports["compare"] = compare;
  exports["ordInt"] = ordInt;
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];                 
  var on = function (f) {
      return function (g) {
          return function (x) {
              return function (y) {
                  return f(g(x))(g(y));
              };
          };
      };
  };
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  exports["flip"] = flip;
  exports["const"] = $$const;
  exports["on"] = on;
})(PS["Data.Function"] = PS["Data.Function"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Functor"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Unit = PS["Data.Unit"];                 
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  var mapFlipped = function (dictFunctor) {
      return function (fa) {
          return function (f) {
              return map(dictFunctor)(f)(fa);
          };
      };
  };
  var $$void = function (dictFunctor) {
      return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
  };
  var functorFn = new Functor(Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn));
  var functorArray = new Functor($foreign.arrayMap);
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["mapFlipped"] = mapFlipped;
  exports["void"] = $$void;
  exports["functorFn"] = functorFn;
  exports["functorArray"] = functorArray;
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Functor = PS["Data.Functor"];
  var Data_Semigroup = PS["Data.Semigroup"];                 
  var Alt = function (Functor0, alt) {
      this.Functor0 = Functor0;
      this.alt = alt;
  };                                                       
  var alt = function (dict) {
      return dict.alt;
  };
  exports["Alt"] = Alt;
  exports["alt"] = alt;
})(PS["Control.Alt"] = PS["Control.Alt"] || {});
(function(exports) {
    "use strict";

  exports.arrayApply = function (fs) {
    return function (xs) {
      var l = fs.length;
      var k = xs.length;
      var result = new Array(l*k);
      var n = 0;
      for (var i = 0; i < l; i++) {
        var f = fs[i];
        for (var j = 0; j < k; j++) {
          result[n++] = f(xs[j]);
        }
      }
      return result;
    };
  };
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];                 
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  }; 
  var applyArray = new Apply(function () {
      return Data_Functor.functorArray;
  }, $foreign.arrayApply);
  var apply = function (dict) {
      return dict.apply;
  };
  var applySecond = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn)))(a))(b);
          };
      };
  };
  var lift2 = function (dictApply) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(f)(a))(b);
              };
          };
      };
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
  exports["applySecond"] = applySecond;
  exports["lift2"] = lift2;
  exports["applyArray"] = applyArray;
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];                 
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var when = function (dictApplicative) {
      return function (v) {
          return function (v1) {
              if (v) {
                  return v1;
              };
              if (!v) {
                  return pure(dictApplicative)(Data_Unit.unit);
              };
              throw new Error("Failed pattern match at Control.Applicative line 57, column 1 - line 57, column 63: " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["Applicative"] = Applicative;
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
  exports["when"] = when;
})(PS["Control.Applicative"] = PS["Control.Applicative"] || {});
(function(exports) {
    "use strict";

  exports.arrayBind = function (arr) {
    return function (f) {
      var result = [];
      for (var i = 0, l = arr.length; i < l; i++) {
        Array.prototype.push.apply(result, f(arr[i]));
      }
      return result;
    };
  };
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];                 
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  };
  var Discard = function (discard) {
      this.discard = discard;
  };
  var discard = function (dict) {
      return dict.discard;
  }; 
  var bindArray = new Bind(function () {
      return Control_Apply.applyArray;
  }, $foreign.arrayBind);
  var bind = function (dict) {
      return dict.bind;
  };
  var bindFlipped = function (dictBind) {
      return Data_Function.flip(bind(dictBind));
  };
  var composeKleisliFlipped = function (dictBind) {
      return function (f) {
          return function (g) {
              return function (a) {
                  return bindFlipped(dictBind)(f)(g(a));
              };
          };
      };
  };
  var discardUnit = new Discard(function (dictBind) {
      return bind(dictBind);
  });
  exports["Bind"] = Bind;
  exports["bind"] = bind;
  exports["bindFlipped"] = bindFlipped;
  exports["Discard"] = Discard;
  exports["discard"] = discard;
  exports["composeKleisliFlipped"] = composeKleisliFlipped;
  exports["bindArray"] = bindArray;
  exports["discardUnit"] = discardUnit;
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];                 
  var Monad = function (Applicative0, Bind1) {
      this.Applicative0 = Applicative0;
      this.Bind1 = Bind1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (v) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (v1) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(v(v1));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(PS["Control.Monad"] = PS["Control.Monad"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Data_Functor = PS["Data.Functor"];                 
  var Plus = function (Alt0, empty) {
      this.Alt0 = Alt0;
      this.empty = empty;
  };       
  var empty = function (dict) {
      return dict.empty;
  };
  exports["Plus"] = Plus;
  exports["empty"] = empty;
})(PS["Control.Plus"] = PS["Control.Plus"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Bounded"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Unit = PS["Data.Unit"];                 
  var Bounded = function (Ord0, bottom, top) {
      this.Ord0 = Ord0;
      this.bottom = bottom;
      this.top = top;
  };
  var top = function (dict) {
      return dict.top;
  };              
  var bottom = function (dict) {
      return dict.bottom;
  };
  exports["Bounded"] = Bounded;
  exports["bottom"] = bottom;
  exports["top"] = top;
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function(exports) {
    "use strict";

  exports.intDegree = function (x) {
    return Math.min(Math.abs(x), 2147483647);
  };

  // See the Euclidean definition in
  // https://en.m.wikipedia.org/wiki/Modulo_operation.
  exports.intDiv = function (x) {
    return function (y) {
      if (y === 0) return 0;
      return y > 0 ? Math.floor(x / y) : -Math.floor(x / -y);
    };
  };

  exports.intMod = function (x) {
    return function (y) {
      if (y === 0) return 0;
      var yy = Math.abs(y);
      return ((x % yy) + yy) % yy;
    };
  };
})(PS["Data.EuclideanRing"] = PS["Data.EuclideanRing"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Unit = PS["Data.Unit"];                 
  var CommutativeRing = function (Ring0) {
      this.Ring0 = Ring0;
  }; 
  var commutativeRingInt = new CommutativeRing(function () {
      return Data_Ring.ringInt;
  });
  exports["CommutativeRing"] = CommutativeRing;
  exports["commutativeRingInt"] = commutativeRingInt;
})(PS["Data.CommutativeRing"] = PS["Data.CommutativeRing"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.EuclideanRing"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Eq = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];                 
  var EuclideanRing = function (CommutativeRing0, degree, div, mod) {
      this.CommutativeRing0 = CommutativeRing0;
      this.degree = degree;
      this.div = div;
      this.mod = mod;
  };
  var mod = function (dict) {
      return dict.mod;
  }; 
  var euclideanRingInt = new EuclideanRing(function () {
      return Data_CommutativeRing.commutativeRingInt;
  }, $foreign.intDegree, $foreign.intDiv, $foreign.intMod);
  var div = function (dict) {
      return dict.div;
  };
  var degree = function (dict) {
      return dict.degree;
  };
  exports["EuclideanRing"] = EuclideanRing;
  exports["degree"] = degree;
  exports["div"] = div;
  exports["mod"] = mod;
  exports["euclideanRingInt"] = euclideanRingInt;
})(PS["Data.EuclideanRing"] = PS["Data.EuclideanRing"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Unit = PS["Data.Unit"];
  var Record_Unsafe = PS["Record.Unsafe"];
  var Type_Data_RowList = PS["Type.Data.RowList"];                 
  var Monoid = function (Semigroup0, mempty) {
      this.Semigroup0 = Semigroup0;
      this.mempty = mempty;
  };                 
  var monoidString = new Monoid(function () {
      return Data_Semigroup.semigroupString;
  }, "");                    
  var monoidArray = new Monoid(function () {
      return Data_Semigroup.semigroupArray;
  }, [  ]);
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["Monoid"] = Monoid;
  exports["mempty"] = mempty;
  exports["monoidString"] = monoidString;
  exports["monoidArray"] = monoidArray;
})(PS["Data.Monoid"] = PS["Data.Monoid"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];                 
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe line 218, column 1 - line 218, column 51: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var isNothing = maybe(true)(Data_Function["const"](false));
  var isJust = maybe(false)(Data_Function["const"](true));
  var functorMaybe = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Just) {
              return new Just(v(v1.value0));
          };
          return Nothing.value;
      };
  });
  var fromMaybe = function (a) {
      return maybe(a)(Control_Category.identity(Control_Category.categoryFn));
  };
  var fromJust = function (dictPartial) {
      return function (v) {
          var $__unused = function (dictPartial1) {
              return function ($dollar35) {
                  return $dollar35;
              };
          };
          return $__unused(dictPartial)((function () {
              if (v instanceof Just) {
                  return v.value0;
              };
              throw new Error("Failed pattern match at Data.Maybe line 269, column 1 - line 269, column 46: " + [ v.constructor.name ]);
          })());
      };
  };
  var applyMaybe = new Control_Apply.Apply(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return Data_Functor.map(functorMaybe)(v.value0)(v1);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe line 67, column 1 - line 67, column 35: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindMaybe = new Control_Bind.Bind(function () {
      return applyMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return v1(v.value0);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe line 126, column 1 - line 126, column 33: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var applicativeMaybe = new Control_Applicative.Applicative(function () {
      return applyMaybe;
  }, Just.create);
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["maybe"] = maybe;
  exports["fromMaybe"] = fromMaybe;
  exports["isJust"] = isJust;
  exports["isNothing"] = isNothing;
  exports["fromJust"] = fromJust;
  exports["functorMaybe"] = functorMaybe;
  exports["applyMaybe"] = applyMaybe;
  exports["applicativeMaybe"] = applicativeMaybe;
  exports["bindMaybe"] = bindMaybe;
})(PS["Data.Maybe"] = PS["Data.Maybe"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Maybe = PS["Data.Maybe"];                 
  var Inl = (function () {
      function Inl(value0) {
          this.value0 = value0;
      };
      Inl.create = function (value0) {
          return new Inl(value0);
      };
      return Inl;
  })();
  var Inr = (function () {
      function Inr(value0) {
          this.value0 = value0;
      };
      Inr.create = function (value0) {
          return new Inr(value0);
      };
      return Inr;
  })();
  var Product = (function () {
      function Product(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Product.create = function (value0) {
          return function (value1) {
              return new Product(value0, value1);
          };
      };
      return Product;
  })();
  var NoArguments = (function () {
      function NoArguments() {

      };
      NoArguments.value = new NoArguments();
      return NoArguments;
  })();
  var Argument = function (x) {
      return x;
  };
  var Generic = function (from, to) {
      this.from = from;
      this.to = to;
  };
  var to = function (dict) {
      return dict.to;
  }; 
  var from = function (dict) {
      return dict.from;
  };
  exports["Generic"] = Generic;
  exports["to"] = to;
  exports["from"] = from;
  exports["NoArguments"] = NoArguments;
  exports["Inl"] = Inl;
  exports["Inr"] = Inr;
  exports["Product"] = Product;
  exports["Argument"] = Argument;
})(PS["Data.Generic.Rep"] = PS["Data.Generic.Rep"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Category = PS["Control.Category"];                 
  var Bifunctor = function (bimap) {
      this.bimap = bimap;
  };
  var bimap = function (dict) {
      return dict.bimap;
  };
  var lmap = function (dictBifunctor) {
      return function (f) {
          return bimap(dictBifunctor)(f)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  exports["bimap"] = bimap;
  exports["Bifunctor"] = Bifunctor;
  exports["lmap"] = lmap;
})(PS["Data.Bifunctor"] = PS["Data.Bifunctor"] || {});
(function(exports) {
    "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];                 
  var Disj = function (x) {
      return x;
  };
  var semigroupDisj = function (dictHeytingAlgebra) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Data_HeytingAlgebra.disj(dictHeytingAlgebra)(v)(v1);
          };
      });
  };
  var monoidDisj = function (dictHeytingAlgebra) {
      return new Data_Monoid.Monoid(function () {
          return semigroupDisj(dictHeytingAlgebra);
      }, Data_HeytingAlgebra.ff(dictHeytingAlgebra));
  };
  exports["Disj"] = Disj;
  exports["semigroupDisj"] = semigroupDisj;
  exports["monoidDisj"] = monoidDisj;
})(PS["Data.Monoid.Disj"] = PS["Data.Monoid.Disj"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];                 
  var Endo = function (x) {
      return x;
  };
  var semigroupEndo = function (dictSemigroupoid) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Control_Semigroupoid.compose(dictSemigroupoid)(v)(v1);
          };
      });
  };
  var monoidEndo = function (dictCategory) {
      return new Data_Monoid.Monoid(function () {
          return semigroupEndo(dictCategory.Semigroupoid0());
      }, Control_Category.identity(dictCategory));
  };
  exports["Endo"] = Endo;
  exports["semigroupEndo"] = semigroupEndo;
  exports["monoidEndo"] = monoidEndo;
})(PS["Data.Monoid.Endo"] = PS["Data.Monoid.Endo"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Semigroup_First = PS["Data.Semigroup.First"];
  var Data_Semigroup_Last = PS["Data.Semigroup.Last"];
  var Prelude = PS["Prelude"];                 
  var Newtype = function (unwrap, wrap) {
      this.unwrap = unwrap;
      this.wrap = wrap;
  };
  var wrap = function (dict) {
      return dict.wrap;
  };
  var unwrap = function (dict) {
      return dict.unwrap;
  };                             
  var newtypeEndo = new Newtype(function (v) {
      return v;
  }, Data_Monoid_Endo.Endo);
  var newtypeDisj = new Newtype(function (v) {
      return v;
  }, Data_Monoid_Disj.Disj);
  var alaF = function (dictFunctor) {
      return function (dictFunctor1) {
          return function (dictNewtype) {
              return function (dictNewtype1) {
                  return function (v) {
                      return function (f) {
                          return function ($80) {
                              return Data_Functor.map(dictFunctor1)(unwrap(dictNewtype1))(f(Data_Functor.map(dictFunctor)(wrap(dictNewtype))($80)));
                          };
                      };
                  };
              };
          };
      };
  };
  exports["unwrap"] = unwrap;
  exports["wrap"] = wrap;
  exports["Newtype"] = Newtype;
  exports["alaF"] = alaF;
  exports["newtypeDisj"] = newtypeDisj;
  exports["newtypeEndo"] = newtypeEndo;
})(PS["Data.Newtype"] = PS["Data.Newtype"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Foldable"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];                 
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var traverse_ = function (dictApplicative) {
      return function (dictFoldable) {
          return function (f) {
              return foldr(dictFoldable)(function ($195) {
                  return Control_Apply.applySecond(dictApplicative.Apply0())(f($195));
              })(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
          };
      };
  };
  var for_ = function (dictApplicative) {
      return function (dictFoldable) {
          return Data_Function.flip(traverse_(dictApplicative)(dictFoldable));
      };
  };
  var foldl = function (dict) {
      return dict.foldl;
  };
  var intercalate = function (dictFoldable) {
      return function (dictMonoid) {
          return function (sep) {
              return function (xs) {
                  var go = function (v) {
                      return function (x) {
                          if (v.init) {
                              return {
                                  init: false,
                                  acc: x
                              };
                          };
                          return {
                              init: false,
                              acc: Data_Semigroup.append(dictMonoid.Semigroup0())(v.acc)(Data_Semigroup.append(dictMonoid.Semigroup0())(sep)(x))
                          };
                      };
                  };
                  return (foldl(dictFoldable)(go)({
                      init: true,
                      acc: Data_Monoid.mempty(dictMonoid)
                  })(xs)).acc;
              };
          };
      };
  }; 
  var foldableMaybe = new Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              if (v instanceof Data_Maybe.Nothing) {
                  return Data_Monoid.mempty(dictMonoid);
              };
              if (v instanceof Data_Maybe.Just) {
                  return f(v.value0);
              };
              throw new Error("Failed pattern match at Data.Foldable line 129, column 1 - line 129, column 41: " + [ f.constructor.name, v.constructor.name ]);
          };
      };
  }, function (v) {
      return function (z) {
          return function (v1) {
              if (v1 instanceof Data_Maybe.Nothing) {
                  return z;
              };
              if (v1 instanceof Data_Maybe.Just) {
                  return v(z)(v1.value0);
              };
              throw new Error("Failed pattern match at Data.Foldable line 129, column 1 - line 129, column 41: " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
          };
      };
  }, function (v) {
      return function (z) {
          return function (v1) {
              if (v1 instanceof Data_Maybe.Nothing) {
                  return z;
              };
              if (v1 instanceof Data_Maybe.Just) {
                  return v(v1.value0)(z);
              };
              throw new Error("Failed pattern match at Data.Foldable line 129, column 1 - line 129, column 41: " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
          };
      };
  });
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldr(dictFoldable)(function (x) {
                  return function (acc) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMapDefaultL = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldl(dictFoldable)(function (acc) {
                  return function (x) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(acc)(f(x));
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  var foldrDefault = function (dictFoldable) {
      return function (c) {
          return function (u) {
              return function (xs) {
                  return Data_Newtype.unwrap(Data_Newtype.newtypeEndo)(foldMap(dictFoldable)(Data_Monoid_Endo.monoidEndo(Control_Category.categoryFn))(function ($198) {
                      return Data_Monoid_Endo.Endo(c($198));
                  })(xs))(u);
              };
          };
      };
  };
  var any = function (dictFoldable) {
      return function (dictHeytingAlgebra) {
          return Data_Newtype.alaF(Data_Functor.functorFn)(Data_Functor.functorFn)(Data_Newtype.newtypeDisj)(Data_Newtype.newtypeDisj)(Data_Monoid_Disj.Disj)(foldMap(dictFoldable)(Data_Monoid_Disj.monoidDisj(dictHeytingAlgebra)));
      };
  };
  var elem = function (dictFoldable) {
      return function (dictEq) {
          return function ($199) {
              return any(dictFoldable)(Data_HeytingAlgebra.heytingAlgebraBoolean)(Data_Eq.eq(dictEq)($199));
          };
      };
  };
  exports["Foldable"] = Foldable;
  exports["foldr"] = foldr;
  exports["foldl"] = foldl;
  exports["foldMap"] = foldMap;
  exports["foldrDefault"] = foldrDefault;
  exports["foldMapDefaultL"] = foldMapDefaultL;
  exports["foldMapDefaultR"] = foldMapDefaultR;
  exports["traverse_"] = traverse_;
  exports["for_"] = for_;
  exports["intercalate"] = intercalate;
  exports["any"] = any;
  exports["elem"] = elem;
  exports["foldableArray"] = foldableArray;
  exports["foldableMaybe"] = foldableMaybe;
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
    "use strict";

  exports.mapWithIndexArray = function (f) {
    return function (xs) {
      var l = xs.length;
      var result = Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(i)(xs[i]);
      }
      return result;
    };
  };
})(PS["Data.FunctorWithIndex"] = PS["Data.FunctorWithIndex"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.FunctorWithIndex"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];                 
  var FunctorWithIndex = function (Functor0, mapWithIndex) {
      this.Functor0 = Functor0;
      this.mapWithIndex = mapWithIndex;
  };
  var mapWithIndex = function (dict) {
      return dict.mapWithIndex;
  }; 
  var functorWithIndexArray = new FunctorWithIndex(function () {
      return Data_Functor.functorArray;
  }, $foreign.mapWithIndexArray);
  exports["FunctorWithIndex"] = FunctorWithIndex;
  exports["mapWithIndex"] = mapWithIndex;
  exports["functorWithIndexArray"] = functorWithIndexArray;
})(PS["Data.FunctorWithIndex"] = PS["Data.FunctorWithIndex"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];                 
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  var FoldableWithIndex = function (Foldable0, foldMapWithIndex, foldlWithIndex, foldrWithIndex) {
      this.Foldable0 = Foldable0;
      this.foldMapWithIndex = foldMapWithIndex;
      this.foldlWithIndex = foldlWithIndex;
      this.foldrWithIndex = foldrWithIndex;
  };
  var foldrWithIndex = function (dict) {
      return dict.foldrWithIndex;
  };
  var foldlWithIndex = function (dict) {
      return dict.foldlWithIndex;
  };
  var foldMapWithIndexDefaultR = function (dictFoldableWithIndex) {
      return function (dictMonoid) {
          return function (f) {
              return foldrWithIndex(dictFoldableWithIndex)(function (i) {
                  return function (x) {
                      return function (acc) {
                          return Data_Semigroup.append(dictMonoid.Semigroup0())(f(i)(x))(acc);
                      };
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableWithIndexArray = new FoldableWithIndex(function () {
      return Data_Foldable.foldableArray;
  }, function (dictMonoid) {
      return foldMapWithIndexDefaultR(foldableWithIndexArray)(dictMonoid);
  }, function (f) {
      return function (z) {
          return function ($47) {
              return Data_Foldable.foldl(Data_Foldable.foldableArray)(function (y) {
                  return function (v) {
                      return f(v.value0)(y)(v.value1);
                  };
              })(z)(Data_FunctorWithIndex.mapWithIndex(Data_FunctorWithIndex.functorWithIndexArray)(Tuple.create)($47));
          };
      };
  }, function (f) {
      return function (z) {
          return function ($48) {
              return Data_Foldable.foldr(Data_Foldable.foldableArray)(function (v) {
                  return function (y) {
                      return f(v.value0)(v.value1)(y);
                  };
              })(z)(Data_FunctorWithIndex.mapWithIndex(Data_FunctorWithIndex.functorWithIndexArray)(Tuple.create)($48));
          };
      };
  });
  var foldMapWithIndex = function (dict) {
      return dict.foldMapWithIndex;
  };
  exports["FoldableWithIndex"] = FoldableWithIndex;
  exports["foldrWithIndex"] = foldrWithIndex;
  exports["foldlWithIndex"] = foldlWithIndex;
  exports["foldMapWithIndex"] = foldMapWithIndex;
  exports["foldMapWithIndexDefaultR"] = foldMapWithIndexDefaultR;
  exports["foldableWithIndexArray"] = foldableWithIndexArray;
})(PS["Data.FoldableWithIndex"] = PS["Data.FoldableWithIndex"] || {});
(function(exports) {
    "use strict";

  // jshint maxparams: 3

  exports.traverseArrayImpl = function () {
    function array1(a) {
      return [a];
    }

    function array2(a) {
      return function (b) {
        return [a, b];
      };
    }

    function array3(a) {
      return function (b) {
        return function (c) {
          return [a, b, c];
        };
      };
    }

    function concat2(xs) {
      return function (ys) {
        return xs.concat(ys);
      };
    }

    return function (apply) {
      return function (map) {
        return function (pure) {
          return function (f) {
            return function (array) {
              function go(bot, top) {
                switch (top - bot) {
                case 0: return pure([]);
                case 1: return map(array1)(f(array[bot]));
                case 2: return apply(map(array2)(f(array[bot])))(f(array[bot + 1]));
                case 3: return apply(apply(map(array3)(f(array[bot])))(f(array[bot + 1])))(f(array[bot + 2]));
                default:
                  // This slightly tricky pivot selection aims to produce two
                  // even-length partitions where possible.
                  var pivot = bot + Math.floor((top - bot) / 4) * 2;
                  return apply(map(concat2)(go(bot, pivot)))(go(pivot, top));
                }
              }
              return go(0, array.length);
            };
          };
        };
      };
    };
  }();
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Traversable"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Traversable_Accum = PS["Data.Traversable.Accum"];
  var Data_Traversable_Accum_Internal = PS["Data.Traversable.Accum.Internal"];
  var Prelude = PS["Prelude"];                 
  var Traversable = function (Foldable1, Functor0, sequence, traverse) {
      this.Foldable1 = Foldable1;
      this.Functor0 = Functor0;
      this.sequence = sequence;
      this.traverse = traverse;
  };
  var traverse = function (dict) {
      return dict.traverse;
  }; 
  var sequenceDefault = function (dictTraversable) {
      return function (dictApplicative) {
          return traverse(dictTraversable)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var traversableArray = new Traversable(function () {
      return Data_Foldable.foldableArray;
  }, function () {
      return Data_Functor.functorArray;
  }, function (dictApplicative) {
      return sequenceDefault(traversableArray)(dictApplicative);
  }, function (dictApplicative) {
      return $foreign.traverseArrayImpl(Control_Apply.apply(dictApplicative.Apply0()))(Data_Functor.map((dictApplicative.Apply0()).Functor0()))(Control_Applicative.pure(dictApplicative));
  });
  var sequence = function (dict) {
      return dict.sequence;
  };
  exports["Traversable"] = Traversable;
  exports["traverse"] = traverse;
  exports["sequence"] = sequence;
  exports["sequenceDefault"] = sequenceDefault;
  exports["traversableArray"] = traversableArray;
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_FoldableWithIndex = PS["Data.FoldableWithIndex"];
  var Data_Function = PS["Data.Function"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Traversable_Accum = PS["Data.Traversable.Accum"];
  var Data_Traversable_Accum_Internal = PS["Data.Traversable.Accum.Internal"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];                 
  var TraversableWithIndex = function (FoldableWithIndex1, FunctorWithIndex0, Traversable2, traverseWithIndex) {
      this.FoldableWithIndex1 = FoldableWithIndex1;
      this.FunctorWithIndex0 = FunctorWithIndex0;
      this.Traversable2 = Traversable2;
      this.traverseWithIndex = traverseWithIndex;
  };
  var traverseWithIndexDefault = function (dictTraversableWithIndex) {
      return function (dictApplicative) {
          return function (f) {
              return function ($19) {
                  return Data_Traversable.sequence(dictTraversableWithIndex.Traversable2())(dictApplicative)(Data_FunctorWithIndex.mapWithIndex(dictTraversableWithIndex.FunctorWithIndex0())(f)($19));
              };
          };
      };
  };
  var traverseWithIndex = function (dict) {
      return dict.traverseWithIndex;
  }; 
  var traversableWithIndexArray = new TraversableWithIndex(function () {
      return Data_FoldableWithIndex.foldableWithIndexArray;
  }, function () {
      return Data_FunctorWithIndex.functorWithIndexArray;
  }, function () {
      return Data_Traversable.traversableArray;
  }, function (dictApplicative) {
      return traverseWithIndexDefault(traversableWithIndexArray)(dictApplicative);
  });
  exports["TraversableWithIndex"] = TraversableWithIndex;
  exports["traverseWithIndex"] = traverseWithIndex;
  exports["traverseWithIndexDefault"] = traverseWithIndexDefault;
  exports["traversableWithIndexArray"] = traversableWithIndexArray;
})(PS["Data.TraversableWithIndex"] = PS["Data.TraversableWithIndex"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Distributive = PS["Data.Distributive"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_FoldableWithIndex = PS["Data.FoldableWithIndex"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semigroup_Foldable = PS["Data.Semigroup.Foldable"];
  var Data_Semigroup_Traversable = PS["Data.Semigroup.Traversable"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_TraversableWithIndex = PS["Data.TraversableWithIndex"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  var Type_Equality = PS["Type.Equality"];                 
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  var uncurry = function (f) {
      return function (v) {
          return f(v.value0)(v.value1);
      };
  };
  var snd = function (v) {
      return v.value1;
  };
  var showTuple = function (dictShow) {
      return function (dictShow1) {
          return new Data_Show.Show(function (v) {
              return "(Tuple " + (Data_Show.show(dictShow)(v.value0) + (" " + (Data_Show.show(dictShow1)(v.value1) + ")")));
          });
      };
  };
  var functorTuple = new Data_Functor.Functor(function (f) {
      return function (m) {
          return new Tuple(m.value0, f(m.value1));
      };
  });                                                                                                   
  var fst = function (v) {
      return v.value0;
  };
  exports["Tuple"] = Tuple;
  exports["fst"] = fst;
  exports["snd"] = snd;
  exports["uncurry"] = uncurry;
  exports["showTuple"] = showTuple;
  exports["functorTuple"] = functorTuple;
})(PS["Data.Tuple"] = PS["Data.Tuple"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];                 
  var MonadState = function (Monad0, state) {
      this.Monad0 = Monad0;
      this.state = state;
  };
  var state = function (dict) {
      return dict.state;
  };
  var put = function (dictMonadState) {
      return function (s) {
          return state(dictMonadState)(function (v) {
              return new Data_Tuple.Tuple(Data_Unit.unit, s);
          });
      };
  };
  var get = function (dictMonadState) {
      return state(dictMonadState)(function (s) {
          return new Data_Tuple.Tuple(s, s);
      });
  };
  exports["state"] = state;
  exports["MonadState"] = MonadState;
  exports["get"] = get;
  exports["put"] = put;
})(PS["Control.Monad.State.Class"] = PS["Control.Monad.State.Class"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Function = PS["Data.Function"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];                 
  var MonadTell = function (Monad0, tell) {
      this.Monad0 = Monad0;
      this.tell = tell;
  };
  var MonadWriter = function (MonadTell0, listen, pass) {
      this.MonadTell0 = MonadTell0;
      this.listen = listen;
      this.pass = pass;
  };
  var tell = function (dict) {
      return dict.tell;
  };
  var pass = function (dict) {
      return dict.pass;
  };
  var listen = function (dict) {
      return dict.listen;
  };
  exports["listen"] = listen;
  exports["pass"] = pass;
  exports["tell"] = tell;
  exports["MonadTell"] = MonadTell;
  exports["MonadWriter"] = MonadWriter;
})(PS["Control.Monad.Writer.Class"] = PS["Control.Monad.Writer.Class"] || {});
(function(exports) {
    "use strict";

  function id(x) {
    return x;
  }                       
  exports.fromString = id;
  exports.fromArray = id;
  exports.fromObject = id;

  exports.stringify = function (j) {
    return JSON.stringify(j);
  };

  var objToString = Object.prototype.toString;
  var objKeys = Object.keys;

  function isArray(a) {
    return objToString.call(a) === "[object Array]";
  }

  exports._caseJson = function (isNull, isBool, isNum, isStr, isArr, isObj, j) {
    if (j == null) return isNull();
    else if (typeof j === "boolean") return isBool(j);
    else if (typeof j === "number") return isNum(j);
    else if (typeof j === "string") return isStr(j);
    else if (objToString.call(j) === "[object Array]")
      return isArr(j);
    else return isObj(j);
  };

  exports._compare = function _compare (EQ, GT, LT, a, b) {
    if (a == null) {
      if (b == null) return EQ;
      else return LT;
    } else if (typeof a === "boolean") {
      if (typeof b === "boolean") {
        // boolean / boolean
        if (a === b) return EQ;
        else if (a === false) return LT;
        else return GT;
      } else if (b == null) return GT;
      else return LT;
    } else if (typeof a === "number") {
      if (typeof b === "number") {
        if (a === b) return EQ;
        else if (a < b) return LT;
        else return GT;
      } else if (b == null) return GT;
      else if (typeof b === "boolean") return GT;
      else return LT;
    } else if (typeof a === "string") {
      if (typeof b === "string") {
        if (a === b) return EQ;
        else if (a < b) return LT;
        else return GT;
      } else if (b == null) return GT;
      else if (typeof b === "boolean") return GT;
      else if (typeof b === "number") return GT;
      else return LT;
    } else if (isArray(a)) {
      if (isArray(b)) {
        for (var i = 0; i < Math.min(a.length, b.length); i++) {
          var ca = _compare(EQ, GT, LT, a[i], b[i]);
          if (ca !== EQ) return ca;
        }
        if (a.length === b.length) return EQ;
        else if (a.length < b.length) return LT;
        else return GT;
      } else if (b == null) return GT;
      else if (typeof b === "boolean") return GT;
      else if (typeof b === "number") return GT;
      else if (typeof b === "string") return GT;
      else return LT;
    } else {
      if (b == null) return GT;
      else if (typeof b === "boolean") return GT;
      else if (typeof b === "number") return GT;
      else if (typeof b === "string") return GT;
      else if (isArray(b)) return GT;
      else {
        var akeys = objKeys(a);
        var bkeys = objKeys(b);
        if (akeys.length < bkeys.length) return LT;
        else if (akeys.length > bkeys.length) return GT;
        var keys = akeys.concat(bkeys).sort();
        for (var j = 0; j < keys.length; j++) {
          var k = keys[j];
          if (a[k] === undefined) return LT;
          else if (b[k] === undefined) return GT;
          var ck = _compare(EQ, GT, LT, a[k], b[k]);
          if (ck !== EQ) return ck;
        }
        return EQ;
      }
    }
  };
})(PS["Data.Argonaut.Core"] = PS["Data.Argonaut.Core"] || {});
(function(exports) {
    "use strict";

  exports.runFn4 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return fn(a, b, c, d);
          };
        };
      };
    };
  };
})(PS["Data.Function.Uncurried"] = PS["Data.Function.Uncurried"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Function.Uncurried"];
  var Data_Unit = PS["Data.Unit"];
  exports["runFn4"] = $foreign.runFn4;
})(PS["Data.Function.Uncurried"] = PS["Data.Function.Uncurried"] || {});
(function(exports) {
    "use strict";

  exports._copyST = function (m) {
    return function () {
      var r = {};
      for (var k in m) {
        if (hasOwnProperty.call(m, k)) {
          r[k] = m[k];
        }
      }
      return r;
    };
  };

  exports.empty = {};

  exports.runST = function (f) {
    return f();
  };

  exports._lookup = function (no, yes, k, m) {
    return k in m ? yes(m[k]) : no;
  };

  function toArrayWithKey(f) {
    return function (m) {
      var r = [];
      for (var k in m) {
        if (hasOwnProperty.call(m, k)) {
          r.push(f(k)(m[k]));
        }
      }
      return r;
    };
  }
})(PS["Foreign.Object"] = PS["Foreign.Object"] || {});
(function(exports) {
    "use strict";

  exports.map_ = function (f) {
    return function (a) {
      return function () {
        return f(a());
      };
    };
  };

  exports.pure_ = function (a) {
    return function () {
      return a;
    };
  };

  exports.bind_ = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Control.Monad.ST.Internal"] = PS["Control.Monad.ST.Internal"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_FoldableWithIndex = PS["Data.FoldableWithIndex"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_TraversableWithIndex = PS["Data.TraversableWithIndex"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];                 
  var Left = (function () {
      function Left(value0) {
          this.value0 = value0;
      };
      Left.create = function (value0) {
          return new Left(value0);
      };
      return Left;
  })();
  var Right = (function () {
      function Right(value0) {
          this.value0 = value0;
      };
      Right.create = function (value0) {
          return new Right(value0);
      };
      return Right;
  })();
  var functorEither = new Data_Functor.Functor(function (f) {
      return function (m) {
          if (m instanceof Left) {
              return new Left(m.value0);
          };
          if (m instanceof Right) {
              return new Right(f(m.value0));
          };
          throw new Error("Failed pattern match at Data.Either line 38, column 8 - line 38, column 52: " + [ m.constructor.name ]);
      };
  });
  var either = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return v(v2.value0);
              };
              if (v2 instanceof Right) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Either line 238, column 1 - line 238, column 64: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var hush = either(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Maybe.Just.create);
  var bifunctorEither = new Data_Bifunctor.Bifunctor(function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return new Left(v(v2.value0));
              };
              if (v2 instanceof Right) {
                  return new Right(v1(v2.value0));
              };
              throw new Error("Failed pattern match at Data.Either line 46, column 1 - line 46, column 45: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  });
  var applyEither = new Control_Apply.Apply(function () {
      return functorEither;
  }, function (v) {
      return function (v1) {
          if (v instanceof Left) {
              return new Left(v.value0);
          };
          if (v instanceof Right) {
              return Data_Functor.map(functorEither)(v.value0)(v1);
          };
          throw new Error("Failed pattern match at Data.Either line 82, column 1 - line 82, column 41: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindEither = new Control_Bind.Bind(function () {
      return applyEither;
  }, either(function (e) {
      return function (v) {
          return new Left(e);
      };
  })(function (a) {
      return function (f) {
          return f(a);
      };
  }));
  var applicativeEither = new Control_Applicative.Applicative(function () {
      return applyEither;
  }, Right.create);
  var altEither = new Control_Alt.Alt(function () {
      return functorEither;
  }, function (v) {
      return function (v1) {
          if (v instanceof Left) {
              return v1;
          };
          return v;
      };
  });
  exports["Left"] = Left;
  exports["Right"] = Right;
  exports["either"] = either;
  exports["hush"] = hush;
  exports["functorEither"] = functorEither;
  exports["bifunctorEither"] = bifunctorEither;
  exports["applyEither"] = applyEither;
  exports["applicativeEither"] = applicativeEither;
  exports["altEither"] = altEither;
  exports["bindEither"] = bindEither;
})(PS["Data.Either"] = PS["Data.Either"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad = PS["Control.Monad"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_FoldableWithIndex = PS["Data.FoldableWithIndex"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semigroup_Foldable = PS["Data.Semigroup.Foldable"];
  var Data_Semigroup_Traversable = PS["Data.Semigroup.Traversable"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_TraversableWithIndex = PS["Data.TraversableWithIndex"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];                 
  var Identity = function (x) {
      return x;
  };
  var newtypeIdentity = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Identity);
  var functorIdentity = new Data_Functor.Functor(function (f) {
      return function (m) {
          return f(m);
      };
  });
  var applyIdentity = new Control_Apply.Apply(function () {
      return functorIdentity;
  }, function (v) {
      return function (v1) {
          return v(v1);
      };
  });
  var bindIdentity = new Control_Bind.Bind(function () {
      return applyIdentity;
  }, function (v) {
      return function (f) {
          return f(v);
      };
  });
  var applicativeIdentity = new Control_Applicative.Applicative(function () {
      return applyIdentity;
  }, Identity);
  var monadIdentity = new Control_Monad.Monad(function () {
      return applicativeIdentity;
  }, function () {
      return bindIdentity;
  });
  exports["Identity"] = Identity;
  exports["newtypeIdentity"] = newtypeIdentity;
  exports["functorIdentity"] = functorIdentity;
  exports["applyIdentity"] = applyIdentity;
  exports["applicativeIdentity"] = applicativeIdentity;
  exports["bindIdentity"] = bindIdentity;
  exports["monadIdentity"] = monadIdentity;
})(PS["Data.Identity"] = PS["Data.Identity"] || {});
(function(exports) {
    "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Effect"] = PS["Effect"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Effect"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Prelude = PS["Prelude"];                 
  var monadEffect = new Control_Monad.Monad(function () {
      return applicativeEffect;
  }, function () {
      return bindEffect;
  });
  var bindEffect = new Control_Bind.Bind(function () {
      return applyEffect;
  }, $foreign.bindE);
  var applyEffect = new Control_Apply.Apply(function () {
      return functorEffect;
  }, Control_Monad.ap(monadEffect));
  var applicativeEffect = new Control_Applicative.Applicative(function () {
      return applyEffect;
  }, $foreign.pureE);
  var functorEffect = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEffect));
  exports["functorEffect"] = functorEffect;
  exports["applyEffect"] = applyEffect;
  exports["applicativeEffect"] = applicativeEffect;
  exports["bindEffect"] = bindEffect;
  exports["monadEffect"] = monadEffect;
})(PS["Effect"] = PS["Effect"] || {});
(function(exports) {
    "use strict";

  exports.new = function (val) {
    return function () {
      return { value: val };
    };
  };

  exports.read = function (ref) {
    return function () {
      return ref.value;
    };
  };

  exports["modify'"] = function (f) {
    return function (ref) {
      return function () {
        var t = f(ref.value);
        ref.value = t.state;
        return t.value;
      };
    };
  };

  exports.write = function (val) {
    return function (ref) {
      return function () {
        ref.value = val;
        return {};
      };
    };
  };
})(PS["Effect.Ref"] = PS["Effect.Ref"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Effect.Ref"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Effect = PS["Effect"];
  var Prelude = PS["Prelude"];                 
  var modify = function (f) {
      return $foreign["modify'"](function (s) {
          var s$prime = f(s);
          return {
              state: s$prime,
              value: s$prime
          };
      });
  };
  exports["modify"] = modify;
  exports["new"] = $foreign["new"];
  exports["read"] = $foreign.read;
  exports["modify'"] = $foreign["modify'"];
  exports["write"] = $foreign.write;
})(PS["Effect.Ref"] = PS["Effect.Ref"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Either = PS["Data.Either"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Unit = PS["Data.Unit"];
  var Effect = PS["Effect"];
  var Effect_Ref = PS["Effect.Ref"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];                 
  var Loop = (function () {
      function Loop(value0) {
          this.value0 = value0;
      };
      Loop.create = function (value0) {
          return new Loop(value0);
      };
      return Loop;
  })();
  var Done = (function () {
      function Done(value0) {
          this.value0 = value0;
      };
      Done.create = function (value0) {
          return new Done(value0);
      };
      return Done;
  })();
  var MonadRec = function (Monad0, tailRecM) {
      this.Monad0 = Monad0;
      this.tailRecM = tailRecM;
  };
  var tailRecM = function (dict) {
      return dict.tailRecM;
  }; 
  var monadRecEffect = new MonadRec(function () {
      return Effect.monadEffect;
  }, function (f) {
      return function (a) {
          var fromDone = function (v) {
              var $__unused = function (dictPartial1) {
                  return function ($dollar19) {
                      return $dollar19;
                  };
              };
              return $__unused()((function () {
                  if (v instanceof Done) {
                      return v.value0;
                  };
                  throw new Error("Failed pattern match at Control.Monad.Rec.Class line 111, column 30 - line 111, column 44: " + [ v.constructor.name ]);
              })());
          };
          return function __do() {
              var v = Control_Bind.bindFlipped(Effect.bindEffect)(Effect_Ref["new"])(f(a))();
              (function () {
                  while (!(function __do() {
                      var v1 = Effect_Ref.read(v)();
                      if (v1 instanceof Loop) {
                          var v2 = f(v1.value0)();
                          var v3 = Effect_Ref.write(v2)(v)();
                          return false;
                      };
                      if (v1 instanceof Done) {
                          return true;
                      };
                      throw new Error("Failed pattern match at Control.Monad.Rec.Class line 102, column 22 - line 107, column 28: " + [ v1.constructor.name ]);
                  })()) {

                  };
                  return {};
              })();
              return Data_Functor.map(Effect.functorEffect)(fromDone)(Effect_Ref.read(v))();
          };
      };
  });
  exports["Loop"] = Loop;
  exports["Done"] = Done;
  exports["MonadRec"] = MonadRec;
  exports["tailRecM"] = tailRecM;
  exports["monadRecEffect"] = monadRecEffect;
})(PS["Control.Monad.Rec.Class"] = PS["Control.Monad.Rec.Class"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Control.Monad.ST.Internal"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var functorST = new Data_Functor.Functor($foreign.map_);
  var monadST = new Control_Monad.Monad(function () {
      return applicativeST;
  }, function () {
      return bindST;
  });
  var bindST = new Control_Bind.Bind(function () {
      return applyST;
  }, $foreign.bind_);
  var applyST = new Control_Apply.Apply(function () {
      return functorST;
  }, Control_Monad.ap(monadST));
  var applicativeST = new Control_Applicative.Applicative(function () {
      return applyST;
  }, $foreign.pure_);
  exports["functorST"] = functorST;
  exports["applyST"] = applyST;
  exports["applicativeST"] = applicativeST;
  exports["bindST"] = bindST;
  exports["monadST"] = monadST;
})(PS["Control.Monad.ST.Internal"] = PS["Control.Monad.ST.Internal"] || {});
(function(exports) {
    "use strict";

  //------------------------------------------------------------------------------
  // Array creation --------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.range = function (start) {
    return function (end) {
      var step = start > end ? -1 : 1;
      var result = new Array(step * (end - start) + 1);
      var i = start, n = 0;
      while (i !== end) {
        result[n++] = i;
        i += step;
      }
      result[n] = i;
      return result;
    };
  };                                                                                             

  exports.fromFoldableImpl = (function () {
    function Cons(head, tail) {
      this.head = head;
      this.tail = tail;
    }
    var emptyList = {};

    function curryCons(head) {
      return function (tail) {
        return new Cons(head, tail);
      };
    }

    function listToArray(list) {
      var result = [];
      var count = 0;
      var xs = list;
      while (xs !== emptyList) {
        result[count++] = xs.head;
        xs = xs.tail;
      }
      return result;
    }

    return function (foldr) {
      return function (xs) {
        return listToArray(foldr(curryCons)(emptyList)(xs));
      };
    };
  })();

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  //------------------------------------------------------------------------------
  // Non-indexed reads -----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports["uncons'"] = function (empty) {
    return function (next) {
      return function (xs) {
        return xs.length === 0 ? empty({}) : next(xs[0])(xs.slice(1));
      };
    };
  };

  //------------------------------------------------------------------------------
  // Indexed operations ----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.indexImpl = function (just) {
    return function (nothing) {
      return function (xs) {
        return function (i) {
          return i < 0 || i >= xs.length ? nothing :  just(xs[i]);
        };
      };
    };
  };

  //------------------------------------------------------------------------------
  // Subarrays -------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.slice = function (s) {
    return function (e) {
      return function (l) {
        return l.slice(s, e);
      };
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
    "use strict";

  exports.unfoldrArrayImpl = function (isNothing) {
    return function (fromJust) {
      return function (fst) {
        return function (snd) {
          return function (f) {
            return function (b) {
              var result = [];
              var value = b;
              while (true) { // eslint-disable-line no-constant-condition
                var maybe = f(value);
                if (isNothing(maybe)) return result;
                var tuple = fromJust(maybe);
                result.push(fst(tuple));
                value = snd(tuple);
              }
            };
          };
        };
      };
    };
  };
})(PS["Data.Unfoldable"] = PS["Data.Unfoldable"] || {});
(function(exports) {
    "use strict";

  exports.unfoldr1ArrayImpl = function (isNothing) {
    return function (fromJust) {
      return function (fst) {
        return function (snd) {
          return function (f) {
            return function (b) {
              var result = [];
              var value = b;
              while (true) { // eslint-disable-line no-constant-condition
                var tuple = f(value);
                result.push(fst(tuple));
                var maybe = snd(tuple);
                if (isNothing(maybe)) return result;
                value = fromJust(maybe);
              }
            };
          };
        };
      };
    };
  };
})(PS["Data.Unfoldable1"] = PS["Data.Unfoldable1"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Unfoldable1"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup_Traversable = PS["Data.Semigroup.Traversable"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Tuple = PS["Data.Tuple"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];                 
  var Unfoldable1 = function (unfoldr1) {
      this.unfoldr1 = unfoldr1;
  };
  var unfoldr1 = function (dict) {
      return dict.unfoldr1;
  };
  var unfoldable1Array = new Unfoldable1($foreign.unfoldr1ArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd));
  exports["Unfoldable1"] = Unfoldable1;
  exports["unfoldr1"] = unfoldr1;
  exports["unfoldable1Array"] = unfoldable1Array;
})(PS["Data.Unfoldable1"] = PS["Data.Unfoldable1"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Unfoldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable1 = PS["Data.Unfoldable1"];
  var Data_Unit = PS["Data.Unit"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];                 
  var Unfoldable = function (Unfoldable10, unfoldr) {
      this.Unfoldable10 = Unfoldable10;
      this.unfoldr = unfoldr;
  };
  var unfoldr = function (dict) {
      return dict.unfoldr;
  };
  var unfoldableArray = new Unfoldable(function () {
      return Data_Unfoldable1.unfoldable1Array;
  }, $foreign.unfoldrArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd));
  exports["Unfoldable"] = Unfoldable;
  exports["unfoldr"] = unfoldr;
  exports["unfoldableArray"] = unfoldableArray;
})(PS["Data.Unfoldable"] = PS["Data.Unfoldable"] || {});
(function(exports) {
    "use strict";

  // module Unsafe.Coerce

  exports.unsafeCoerce = function (x) {
    return x;
  };
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Unsafe.Coerce"];
  exports["unsafeCoerce"] = $foreign.unsafeCoerce;
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Array"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Control_Monad_ST_Internal = PS["Control.Monad.ST.Internal"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array_NonEmpty_Internal = PS["Data.Array.NonEmpty.Internal"];
  var Data_Array_ST = PS["Data.Array.ST"];
  var Data_Array_ST_Iterator = PS["Data.Array.ST.Iterator"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var uncons = $foreign["uncons'"](Data_Function["const"](Data_Maybe.Nothing.value))(function (x) {
      return function (xs) {
          return new Data_Maybe.Just({
              head: x,
              tail: xs
          });
      };
  });
  var index = $foreign.indexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var fromFoldable = function (dictFoldable) {
      return $foreign.fromFoldableImpl(Data_Foldable.foldr(dictFoldable));
  };
  var concatMap = Data_Function.flip(Control_Bind.bind(Control_Bind.bindArray));
  exports["fromFoldable"] = fromFoldable;
  exports["uncons"] = uncons;
  exports["index"] = index;
  exports["concatMap"] = concatMap;
  exports["range"] = $foreign.range;
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
    "use strict";

  exports["new"] = function () {
    return {};
  };

  exports.poke = function (k) {
    return function (v) {
      return function (m) {
        return function () {
          m[k] = v;
          return m;
        };
      };
    };
  };
})(PS["Foreign.Object.ST"] = PS["Foreign.Object.ST"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Foreign.Object.ST"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Data_Maybe = PS["Data.Maybe"];
  exports["new"] = $foreign["new"];
  exports["poke"] = $foreign.poke;
})(PS["Foreign.Object.ST"] = PS["Foreign.Object.ST"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Foreign.Object"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Control_Monad_ST_Internal = PS["Control.Monad.ST.Internal"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array = PS["Data.Array"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_FoldableWithIndex = PS["Data.FoldableWithIndex"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Functor = PS["Data.Functor"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_TraversableWithIndex = PS["Data.TraversableWithIndex"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Foreign_Object_ST = PS["Foreign.Object.ST"];
  var Prelude = PS["Prelude"];
  var Type_Row_Homogeneous = PS["Type.Row.Homogeneous"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];                       
  var thawST = $foreign._copyST;
  var mutate = function (f) {
      return function (m) {
          return $foreign.runST(Control_Bind.bind(Control_Monad_ST_Internal.bindST)(thawST(m))(function (v) {
              return Control_Bind.bind(Control_Monad_ST_Internal.bindST)(f(v))(function (v1) {
                  return Control_Applicative.pure(Control_Monad_ST_Internal.applicativeST)(v);
              });
          }));
      };
  };
  var lookup = Data_Function_Uncurried.runFn4($foreign._lookup)(Data_Maybe.Nothing.value)(Data_Maybe.Just.create);
  var insert = function (k) {
      return function (v) {
          return mutate(Foreign_Object_ST.poke(k)(v));
      };
  };
  var fromFoldable = function (dictFoldable) {
      return function (l) {
          return $foreign.runST(Control_Bind.bind(Control_Monad_ST_Internal.bindST)(Foreign_Object_ST["new"])(function (v) {
              return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_ST_Internal.bindST)(Data_Foldable.for_(Control_Monad_ST_Internal.applicativeST)(Data_Foldable.foldableArray)(Data_Array.fromFoldable(dictFoldable)(l))(function (v1) {
                  return Foreign_Object_ST.poke(v1.value0)(v1.value1)(v);
              }))(function () {
                  return Control_Applicative.pure(Control_Monad_ST_Internal.applicativeST)(v);
              });
          }));
      };
  };
  exports["insert"] = insert;
  exports["lookup"] = lookup;
  exports["fromFoldable"] = fromFoldable;
  exports["thawST"] = thawST;
  exports["empty"] = $foreign.empty;
})(PS["Foreign.Object"] = PS["Foreign.Object"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Argonaut.Core"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Foreign_Object = PS["Foreign.Object"];
  var Prelude = PS["Prelude"];                 
  var verbJsonType = function (def) {
      return function (f) {
          return function (g) {
              return g(def)(f);
          };
      };
  };
  var toJsonType = verbJsonType(Data_Maybe.Nothing.value)(Data_Maybe.Just.create);
  var isJsonType = verbJsonType(false)(Data_Function["const"](true));
  var ordJson = new Data_Ord.Ord(function () {
      return eqJson;
  }, function (a) {
      return function (b) {
          return $foreign._compare(Data_Ordering.EQ.value, Data_Ordering.GT.value, Data_Ordering.LT.value, a, b);
      };
  });
  var eqJson = new Data_Eq.Eq(function (j1) {
      return function (j2) {
          return Data_Eq.eq(Data_Ordering.eqOrdering)(Data_Ord.compare(ordJson)(j1)(j2))(Data_Ordering.EQ.value);
      };
  });
  var caseJsonString = function (d) {
      return function (f) {
          return function (j) {
              return $foreign._caseJson(Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), f, Data_Function["const"](d), Data_Function["const"](d), j);
          };
      };
  };                                        
  var toString = toJsonType(caseJsonString);
  var caseJsonObject = function (d) {
      return function (f) {
          return function (j) {
              return $foreign._caseJson(Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), f, j);
          };
      };
  };                                        
  var toObject = toJsonType(caseJsonObject);
  var caseJsonNumber = function (d) {
      return function (f) {
          return function (j) {
              return $foreign._caseJson(Data_Function["const"](d), Data_Function["const"](d), f, Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), j);
          };
      };
  };                                        
  var caseJsonNull = function (d) {
      return function (f) {
          return function (j) {
              return $foreign._caseJson(f, Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), j);
          };
      };
  };
  var isNull = isJsonType(caseJsonNull);      
  var caseJsonArray = function (d) {
      return function (f) {
          return function (j) {
              return $foreign._caseJson(Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), f, Data_Function["const"](d), j);
          };
      };
  };                                      
  var toArray = toJsonType(caseJsonArray);
  exports["caseJsonNull"] = caseJsonNull;
  exports["caseJsonNumber"] = caseJsonNumber;
  exports["caseJsonString"] = caseJsonString;
  exports["caseJsonArray"] = caseJsonArray;
  exports["caseJsonObject"] = caseJsonObject;
  exports["isNull"] = isNull;
  exports["toString"] = toString;
  exports["toArray"] = toArray;
  exports["toObject"] = toObject;
  exports["eqJson"] = eqJson;
  exports["ordJson"] = ordJson;
  exports["fromString"] = $foreign.fromString;
  exports["fromArray"] = $foreign.fromArray;
  exports["fromObject"] = $foreign.fromObject;
  exports["stringify"] = $foreign.stringify;
})(PS["Data.Argonaut.Core"] = PS["Data.Argonaut.Core"] || {});
(function(exports) {
    "use strict";

  exports.fromNumberImpl = function (just) {
    return function (nothing) {
      return function (n) {
        /* jshint bitwise: false */
        return (n | 0) === n ? just(n) : nothing;
      };
    };
  };

  exports.toNumber = function (n) {
    return n;
  };
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
    "use strict";        

  exports.floor = Math.floor;  

  exports.pi = Math.PI;
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Math"];
  exports["floor"] = $foreign.floor;
  exports["pi"] = $foreign.pi;
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Int"];
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_DivisionRing = PS["Data.DivisionRing"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Int_Bits = PS["Data.Int.Bits"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Global = PS["Global"];
  var $$Math = PS["Math"];
  var Prelude = PS["Prelude"];      
  var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  exports["fromNumber"] = fromNumber;
  exports["toNumber"] = $foreign.toNumber;
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_FoldableWithIndex = PS["Data.FoldableWithIndex"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semigroup_Foldable = PS["Data.Semigroup.Foldable"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_TraversableWithIndex = PS["Data.TraversableWithIndex"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Unfoldable1 = PS["Data.Unfoldable1"];
  var Prelude = PS["Prelude"];                 
  var NonEmpty = (function () {
      function NonEmpty(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      NonEmpty.create = function (value0) {
          return function (value1) {
              return new NonEmpty(value0, value1);
          };
      };
      return NonEmpty;
  })();
  var singleton = function (dictPlus) {
      return function (a) {
          return new NonEmpty(a, Control_Plus.empty(dictPlus));
      };
  };
  exports["NonEmpty"] = NonEmpty;
  exports["singleton"] = singleton;
})(PS["Data.NonEmpty"] = PS["Data.NonEmpty"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_FoldableWithIndex = PS["Data.FoldableWithIndex"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semigroup_Foldable = PS["Data.Semigroup.Foldable"];
  var Data_Semigroup_Traversable = PS["Data.Semigroup.Traversable"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_TraversableWithIndex = PS["Data.TraversableWithIndex"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Unfoldable1 = PS["Data.Unfoldable1"];
  var Prelude = PS["Prelude"];                 
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var NonEmptyList = function (x) {
      return x;
  };
  var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldl(foldableList)(function (acc) {
              return function ($174) {
                  return Data_Semigroup.append(dictMonoid.Semigroup0())(acc)(f($174));
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  }, function (f) {
      var go = function ($copy_b) {
          return function ($copy_v) {
              var $tco_var_b = $copy_b;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(b, v) {
                  if (v instanceof Nil) {
                      $tco_done = true;
                      return b;
                  };
                  if (v instanceof Cons) {
                      $tco_var_b = f(b)(v.value0);
                      $copy_v = v.value1;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List.Types line 81, column 12 - line 83, column 30: " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_b, $copy_v);
              };
              return $tco_result;
          };
      };
      return go;
  }, function (f) {
      return function (b) {
          var rev = Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value);
          return function ($175) {
              return Data_Foldable.foldl(foldableList)(Data_Function.flip(f))(b)(rev($175));
          };
      };
  });
  var functorList = new Data_Functor.Functor(function (f) {
      return Data_Foldable.foldr(foldableList)(function (x) {
          return function (acc) {
              return new Cons(f(x), acc);
          };
      })(Nil.value);
  });
  var semigroupList = new Data_Semigroup.Semigroup(function (xs) {
      return function (ys) {
          return Data_Foldable.foldr(foldableList)(Cons.create)(ys)(xs);
      };
  });
  var traversableList = new Data_Traversable.Traversable(function () {
      return foldableList;
  }, function () {
      return functorList;
  }, function (dictApplicative) {
      return Data_Traversable.traverse(traversableList)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
  }, function (dictApplicative) {
      return function (f) {
          return function ($182) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value))(Data_Foldable.foldl(foldableList)(function (acc) {
                  return function ($183) {
                      return Control_Apply.lift2(dictApplicative.Apply0())(Data_Function.flip(Cons.create))(acc)(f($183));
                  };
              })(Control_Applicative.pure(dictApplicative)(Nil.value))($182));
          };
      };
  });
  var unfoldable1List = new Data_Unfoldable1.Unfoldable1(function (f) {
      return function (b) {
          var go = function ($copy_source) {
              return function ($copy_memo) {
                  var $tco_var_source = $copy_source;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(source, memo) {
                      var v = f(source);
                      if (v.value1 instanceof Data_Maybe.Just) {
                          $tco_var_source = v.value1.value0;
                          $copy_memo = new Cons(v.value0, memo);
                          return;
                      };
                      if (v.value1 instanceof Data_Maybe.Nothing) {
                          $tco_done = true;
                          return Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value)(new Cons(v.value0, memo));
                      };
                      throw new Error("Failed pattern match at Data.List.Types line 105, column 22 - line 107, column 61: " + [ v.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_source, $copy_memo);
                  };
                  return $tco_result;
              };
          };
          return go(b)(Nil.value);
      };
  });
  var unfoldableList = new Data_Unfoldable.Unfoldable(function () {
      return unfoldable1List;
  }, function (f) {
      return function (b) {
          var go = function ($copy_source) {
              return function ($copy_memo) {
                  var $tco_var_source = $copy_source;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(source, memo) {
                      var v = f(source);
                      if (v instanceof Data_Maybe.Nothing) {
                          $tco_done = true;
                          return Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value)(memo);
                      };
                      if (v instanceof Data_Maybe.Just) {
                          $tco_var_source = v.value0.value1;
                          $copy_memo = new Cons(v.value0.value0, memo);
                          return;
                      };
                      throw new Error("Failed pattern match at Data.List.Types line 112, column 22 - line 114, column 52: " + [ v.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_source, $copy_memo);
                  };
                  return $tco_result;
              };
          };
          return go(b)(Nil.value);
      };
  });
  var applyList = new Control_Apply.Apply(function () {
      return functorList;
  }, function (v) {
      return function (v1) {
          if (v instanceof Nil) {
              return Nil.value;
          };
          if (v instanceof Cons) {
              return Data_Semigroup.append(semigroupList)(Data_Functor.map(functorList)(v.value0)(v1))(Control_Apply.apply(applyList)(v.value1)(v1));
          };
          throw new Error("Failed pattern match at Data.List.Types line 127, column 1 - line 127, column 33: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var applicativeList = new Control_Applicative.Applicative(function () {
      return applyList;
  }, function (a) {
      return new Cons(a, Nil.value);
  });                                              
  var altList = new Control_Alt.Alt(function () {
      return functorList;
  }, Data_Semigroup.append(semigroupList));
  var plusList = new Control_Plus.Plus(function () {
      return altList;
  }, Nil.value);
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["NonEmptyList"] = NonEmptyList;
  exports["semigroupList"] = semigroupList;
  exports["functorList"] = functorList;
  exports["foldableList"] = foldableList;
  exports["unfoldable1List"] = unfoldable1List;
  exports["unfoldableList"] = unfoldableList;
  exports["traversableList"] = traversableList;
  exports["applyList"] = applyList;
  exports["applicativeList"] = applicativeList;
  exports["altList"] = altList;
  exports["plusList"] = plusList;
})(PS["Data.List.Types"] = PS["Data.List.Types"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  var singleton = function (a) {
      return new Data_List_Types.Cons(a, Data_List_Types.Nil.value);
  };
  var sortBy = function (cmp) {
      var merge = function (v) {
          return function (v1) {
              if (v instanceof Data_List_Types.Cons && v1 instanceof Data_List_Types.Cons) {
                  if (Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(v.value0)(v1.value0))(Data_Ordering.GT.value)) {
                      return new Data_List_Types.Cons(v1.value0, merge(v)(v1.value1));
                  };
                  if (Data_Boolean.otherwise) {
                      return new Data_List_Types.Cons(v.value0, merge(v.value1)(v1));
                  };
              };
              if (v instanceof Data_List_Types.Nil) {
                  return v1;
              };
              if (v1 instanceof Data_List_Types.Nil) {
                  return v;
              };
              throw new Error("Failed pattern match at Data.List line 473, column 3 - line 473, column 38: " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
      var mergePairs = function (v) {
          if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Cons) {
              return new Data_List_Types.Cons(merge(v.value0)(v.value1.value0), mergePairs(v.value1.value1));
          };
          return v;
      };
      var mergeAll = function ($copy_v) {
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(v) {
              if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Nil) {
                  $tco_done = true;
                  return v.value0;
              };
              $copy_v = mergePairs(v);
              return;
          };
          while (!$tco_done) {
              $tco_result = $tco_loop($copy_v);
          };
          return $tco_result;
      };
      var sequences = function (v) {
          if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Cons) {
              if (Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(v.value0)(v.value1.value0))(Data_Ordering.GT.value)) {
                  return descending(v.value1.value0)(singleton(v.value0))(v.value1.value1);
              };
              if (Data_Boolean.otherwise) {
                  return ascending(v.value1.value0)(function (v1) {
                      return new Data_List_Types.Cons(v.value0, v1);
                  })(v.value1.value1);
              };
          };
          return singleton(v);
      };
      var descending = function ($copy_a) {
          return function ($copy_as) {
              return function ($copy_v) {
                  var $tco_var_a = $copy_a;
                  var $tco_var_as = $copy_as;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(a, as, v) {
                      if (v instanceof Data_List_Types.Cons && Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(a)(v.value0))(Data_Ordering.GT.value)) {
                          $tco_var_a = v.value0;
                          $tco_var_as = new Data_List_Types.Cons(a, as);
                          $copy_v = v.value1;
                          return;
                      };
                      $tco_done = true;
                      return new Data_List_Types.Cons(new Data_List_Types.Cons(a, as), sequences(v));
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_a, $tco_var_as, $copy_v);
                  };
                  return $tco_result;
              };
          };
      };
      var ascending = function ($copy_a) {
          return function ($copy_as) {
              return function ($copy_v) {
                  var $tco_var_a = $copy_a;
                  var $tco_var_as = $copy_as;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(a, as, v) {
                      if (v instanceof Data_List_Types.Cons && Data_Eq.notEq(Data_Ordering.eqOrdering)(cmp(a)(v.value0))(Data_Ordering.GT.value)) {
                          $tco_var_a = v.value0;
                          $tco_var_as = function (ys) {
                              return as(new Data_List_Types.Cons(a, ys));
                          };
                          $copy_v = v.value1;
                          return;
                      };
                      $tco_done = true;
                      return new Data_List_Types.Cons(as(singleton(a)), sequences(v));
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_a, $tco_var_as, $copy_v);
                  };
                  return $tco_result;
              };
          };
      };
      return function ($337) {
          return mergeAll(sequences($337));
      };
  };
  var reverse = (function () {
      var go = function ($copy_acc) {
          return function ($copy_v) {
              var $tco_var_acc = $copy_acc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(acc, v) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return acc;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      $tco_var_acc = new Data_List_Types.Cons(v.value0, acc);
                      $copy_v = v.value1;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List line 368, column 3 - line 368, column 19: " + [ acc.constructor.name, v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_acc, $copy_v);
              };
              return $tco_result;
          };
      };
      return go(Data_List_Types.Nil.value);
  })();                                                                                       
  var mapMaybe = function (f) {
      var go = function ($copy_acc) {
          return function ($copy_v) {
              var $tco_var_acc = $copy_acc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(acc, v) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return reverse(acc);
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      var v1 = f(v.value0);
                      if (v1 instanceof Data_Maybe.Nothing) {
                          $tco_var_acc = acc;
                          $copy_v = v.value1;
                          return;
                      };
                      if (v1 instanceof Data_Maybe.Just) {
                          $tco_var_acc = new Data_List_Types.Cons(v1.value0, acc);
                          $copy_v = v.value1;
                          return;
                      };
                      throw new Error("Failed pattern match at Data.List line 419, column 5 - line 421, column 32: " + [ v1.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.List line 417, column 3 - line 417, column 27: " + [ acc.constructor.name, v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_acc, $copy_v);
              };
              return $tco_result;
          };
      };
      return go(Data_List_Types.Nil.value);
  };
  var length = Data_Foldable.foldl(Data_List_Types.foldableList)(function (acc) {
      return function (v) {
          return acc + 1 | 0;
      };
  })(0);
  var fromFoldable = function (dictFoldable) {
      return Data_Foldable.foldr(dictFoldable)(Data_List_Types.Cons.create)(Data_List_Types.Nil.value);
  };
  var catMaybes = mapMaybe(Control_Category.identity(Control_Category.categoryFn));
  exports["fromFoldable"] = fromFoldable;
  exports["singleton"] = singleton;
  exports["length"] = length;
  exports["reverse"] = reverse;
  exports["mapMaybe"] = mapMaybe;
  exports["catMaybes"] = catMaybes;
  exports["sortBy"] = sortBy;
})(PS["Data.List"] = PS["Data.List"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_FoldableWithIndex = PS["Data.FoldableWithIndex"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_List = PS["Data.List"];
  var Data_List_Lazy = PS["Data.List.Lazy"];
  var Data_List_Lazy_Types = PS["Data.List.Lazy.Types"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_TraversableWithIndex = PS["Data.TraversableWithIndex"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];                 
  var Leaf = (function () {
      function Leaf() {

      };
      Leaf.value = new Leaf();
      return Leaf;
  })();
  var Two = (function () {
      function Two(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Two.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Two(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Two;
  })();
  var Three = (function () {
      function Three(value0, value1, value2, value3, value4, value5, value6) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
          this.value6 = value6;
      };
      Three.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return function (value6) {
                                  return new Three(value0, value1, value2, value3, value4, value5, value6);
                              };
                          };
                      };
                  };
              };
          };
      };
      return Three;
  })();
  var TwoLeft = (function () {
      function TwoLeft(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoLeft(value0, value1, value2);
              };
          };
      };
      return TwoLeft;
  })();
  var TwoRight = (function () {
      function TwoRight(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoRight(value0, value1, value2);
              };
          };
      };
      return TwoRight;
  })();
  var ThreeLeft = (function () {
      function ThreeLeft(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeLeft(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeLeft;
  })();
  var ThreeMiddle = (function () {
      function ThreeMiddle(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeMiddle.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeMiddle(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeMiddle;
  })();
  var ThreeRight = (function () {
      function ThreeRight(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeRight(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeRight;
  })();
  var KickUp = (function () {
      function KickUp(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      KickUp.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new KickUp(value0, value1, value2, value3);
                  };
              };
          };
      };
      return KickUp;
  })();
  var values = function (v) {
      if (v instanceof Leaf) {
          return Data_List_Types.Nil.value;
      };
      if (v instanceof Two) {
          return Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value2))(values(v.value3)));
      };
      if (v instanceof Three) {
          return Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value2))(Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value3))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value5))(values(v.value6)))));
      };
      throw new Error("Failed pattern match at Data.Map.Internal line 602, column 1 - line 602, column 40: " + [ v.constructor.name ]);
  };
  var singleton = function (k) {
      return function (v) {
          return new Two(Leaf.value, k, v, Leaf.value);
      };
  };
  var toUnfoldable = function (dictUnfoldable) {
      return function (m) {
          var go = function ($copy_v) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      if (v.value0 instanceof Leaf) {
                          $copy_v = v.value1;
                          return;
                      };
                      if (v.value0 instanceof Two && (v.value0.value0 instanceof Leaf && v.value0.value3 instanceof Leaf)) {
                          $tco_done = true;
                          return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value1, v.value0.value2), v.value1));
                      };
                      if (v.value0 instanceof Two && v.value0.value0 instanceof Leaf) {
                          $tco_done = true;
                          return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value1, v.value0.value2), new Data_List_Types.Cons(v.value0.value3, v.value1)));
                      };
                      if (v.value0 instanceof Two) {
                          $copy_v = new Data_List_Types.Cons(v.value0.value0, new Data_List_Types.Cons(singleton(v.value0.value1)(v.value0.value2), new Data_List_Types.Cons(v.value0.value3, v.value1)));
                          return;
                      };
                      if (v.value0 instanceof Three) {
                          $copy_v = new Data_List_Types.Cons(v.value0.value0, new Data_List_Types.Cons(singleton(v.value0.value1)(v.value0.value2), new Data_List_Types.Cons(v.value0.value3, new Data_List_Types.Cons(singleton(v.value0.value4)(v.value0.value5), new Data_List_Types.Cons(v.value0.value6, v.value1)))));
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal line 567, column 18 - line 576, column 71: " + [ v.value0.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal line 566, column 3 - line 566, column 19: " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_v);
              };
              return $tco_result;
          };
          return Data_Unfoldable.unfoldr(dictUnfoldable)(go)(new Data_List_Types.Cons(m, Data_List_Types.Nil.value));
      };
  };
  var toAscArray = toUnfoldable(Data_Unfoldable.unfoldableArray);
  var showMap = function (dictShow) {
      return function (dictShow1) {
          return new Data_Show.Show(function (m) {
              return "(fromFoldable " + (Data_Show.show(Data_Show.showArray(Data_Tuple.showTuple(dictShow)(dictShow1)))(toAscArray(m)) + ")");
          });
      };
  };
  var lookup = function (dictOrd) {
      return function (k) {
          var comp = Data_Ord.compare(dictOrd);
          var go = function ($copy_v) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v) {
                  if (v instanceof Leaf) {
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  if (v instanceof Two) {
                      var v2 = comp(k)(v.value1);
                      if (v2 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value2);
                      };
                      if (v2 instanceof Data_Ordering.LT) {
                          $copy_v = v.value0;
                          return;
                      };
                      $copy_v = v.value3;
                      return;
                  };
                  if (v instanceof Three) {
                      var v3 = comp(k)(v.value1);
                      if (v3 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value2);
                      };
                      var v4 = comp(k)(v.value4);
                      if (v4 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value5);
                      };
                      if (v3 instanceof Data_Ordering.LT) {
                          $copy_v = v.value0;
                          return;
                      };
                      if (v4 instanceof Data_Ordering.GT) {
                          $copy_v = v.value6;
                          return;
                      };
                      $copy_v = v.value3;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal line 197, column 5 - line 197, column 22: " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_v);
              };
              return $tco_result;
          };
          return go;
      };
  };
  var isEmpty = function (v) {
      if (v instanceof Leaf) {
          return true;
      };
      return false;
  }; 
  var fromZipper = function ($copy_dictOrd) {
      return function ($copy_v) {
          return function ($copy_tree) {
              var $tco_var_dictOrd = $copy_dictOrd;
              var $tco_var_v = $copy_v;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(dictOrd, v, tree) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return tree;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      if (v.value0 instanceof TwoLeft) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Two(tree, v.value0.value0, v.value0.value1, v.value0.value2);
                          return;
                      };
                      if (v.value0 instanceof TwoRight) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Two(v.value0.value0, v.value0.value1, v.value0.value2, tree);
                          return;
                      };
                      if (v.value0 instanceof ThreeLeft) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(tree, v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5);
                          return;
                      };
                      if (v.value0 instanceof ThreeMiddle) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, tree, v.value0.value3, v.value0.value4, v.value0.value5);
                          return;
                      };
                      if (v.value0 instanceof ThreeRight) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5, tree);
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal line 415, column 3 - line 420, column 88: " + [ v.value0.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal line 412, column 1 - line 412, column 80: " + [ v.constructor.name, tree.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_dictOrd, $tco_var_v, $copy_tree);
              };
              return $tco_result;
          };
      };
  };
  var insert = function (dictOrd) {
      return function (k) {
          return function (v) {
              var up = function ($copy_v1) {
                  return function ($copy_v2) {
                      var $tco_var_v1 = $copy_v1;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(v1, v2) {
                          if (v1 instanceof Data_List_Types.Nil) {
                              $tco_done = true;
                              return new Two(v2.value0, v2.value1, v2.value2, v2.value3);
                          };
                          if (v1 instanceof Data_List_Types.Cons) {
                              if (v1.value0 instanceof TwoLeft) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(v1.value1)(new Three(v2.value0, v2.value1, v2.value2, v2.value3, v1.value0.value0, v1.value0.value1, v1.value0.value2));
                              };
                              if (v1.value0 instanceof TwoRight) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(v1.value1)(new Three(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0, v2.value1, v2.value2, v2.value3));
                              };
                              if (v1.value0 instanceof ThreeLeft) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v2.value0, v2.value1, v2.value2, v2.value3), v1.value0.value0, v1.value0.value1, new Two(v1.value0.value2, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                                  return;
                              };
                              if (v1.value0 instanceof ThreeMiddle) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0), v2.value1, v2.value2, new Two(v2.value3, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                                  return;
                              };
                              if (v1.value0 instanceof ThreeRight) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v1.value0.value3), v1.value0.value4, v1.value0.value5, new Two(v2.value0, v2.value1, v2.value2, v2.value3));
                                  return;
                              };
                              throw new Error("Failed pattern match at Data.Map.Internal line 451, column 5 - line 456, column 108: " + [ v1.value0.constructor.name, v2.constructor.name ]);
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal line 448, column 3 - line 448, column 56: " + [ v1.constructor.name, v2.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_v1, $copy_v2);
                      };
                      return $tco_result;
                  };
              };
              var comp = Data_Ord.compare(dictOrd);
              var down = function ($copy_ctx) {
                  return function ($copy_v1) {
                      var $tco_var_ctx = $copy_ctx;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(ctx, v1) {
                          if (v1 instanceof Leaf) {
                              $tco_done = true;
                              return up(ctx)(new KickUp(Leaf.value, k, v, Leaf.value));
                          };
                          if (v1 instanceof Two) {
                              var v2 = comp(k)(v1.value1);
                              if (v2 instanceof Data_Ordering.EQ) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(ctx)(new Two(v1.value0, k, v, v1.value3));
                              };
                              if (v2 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new TwoLeft(v1.value1, v1.value2, v1.value3), ctx);
                                  $copy_v1 = v1.value0;
                                  return;
                              };
                              $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(v1.value0, v1.value1, v1.value2), ctx);
                              $copy_v1 = v1.value3;
                              return;
                          };
                          if (v1 instanceof Three) {
                              var v3 = comp(k)(v1.value1);
                              if (v3 instanceof Data_Ordering.EQ) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(ctx)(new Three(v1.value0, k, v, v1.value3, v1.value4, v1.value5, v1.value6));
                              };
                              var v4 = comp(k)(v1.value4);
                              if (v4 instanceof Data_Ordering.EQ) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(ctx)(new Three(v1.value0, v1.value1, v1.value2, v1.value3, k, v, v1.value6));
                              };
                              if (v3 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new ThreeLeft(v1.value1, v1.value2, v1.value3, v1.value4, v1.value5, v1.value6), ctx);
                                  $copy_v1 = v1.value0;
                                  return;
                              };
                              if (v3 instanceof Data_Ordering.GT && v4 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new ThreeMiddle(v1.value0, v1.value1, v1.value2, v1.value4, v1.value5, v1.value6), ctx);
                                  $copy_v1 = v1.value3;
                                  return;
                              };
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(v1.value0, v1.value1, v1.value2, v1.value3, v1.value4, v1.value5), ctx);
                              $copy_v1 = v1.value6;
                              return;
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal line 431, column 3 - line 431, column 55: " + [ ctx.constructor.name, v1.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_ctx, $copy_v1);
                      };
                      return $tco_result;
                  };
              };
              return down(Data_List_Types.Nil.value);
          };
      };
  };
  var pop = function (dictOrd) {
      return function (k) {
          var up = function (ctxs) {
              return function (tree) {
                  if (ctxs instanceof Data_List_Types.Nil) {
                      return tree;
                  };
                  if (ctxs instanceof Data_List_Types.Cons) {
                      var $__unused = function (dictPartial1) {
                          return function ($dollar55) {
                              return $dollar55;
                          };
                      };
                      return $__unused()((function () {
                          if (ctxs.value0 instanceof TwoLeft && (ctxs.value0.value2 instanceof Leaf && tree instanceof Leaf)) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(Leaf.value, ctxs.value0.value0, ctxs.value0.value1, Leaf.value));
                          };
                          if (ctxs.value0 instanceof TwoRight && (ctxs.value0.value0 instanceof Leaf && tree instanceof Leaf)) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value));
                          };
                          if (ctxs.value0 instanceof TwoLeft && ctxs.value0.value2 instanceof Two) {
                              return up(ctxs.value1)(new Three(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0, ctxs.value0.value2.value1, ctxs.value0.value2.value2, ctxs.value0.value2.value3));
                          };
                          if (ctxs.value0 instanceof TwoRight && ctxs.value0.value0 instanceof Two) {
                              return up(ctxs.value1)(new Three(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3, ctxs.value0.value1, ctxs.value0.value2, tree));
                          };
                          if (ctxs.value0 instanceof TwoLeft && ctxs.value0.value2 instanceof Three) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Two(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0), ctxs.value0.value2.value1, ctxs.value0.value2.value2, new Two(ctxs.value0.value2.value3, ctxs.value0.value2.value4, ctxs.value0.value2.value5, ctxs.value0.value2.value6)));
                          };
                          if (ctxs.value0 instanceof TwoRight && ctxs.value0.value0 instanceof Three) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Two(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3), ctxs.value0.value0.value4, ctxs.value0.value0.value5, new Two(ctxs.value0.value0.value6, ctxs.value0.value1, ctxs.value0.value2, tree)));
                          };
                          if (ctxs.value0 instanceof ThreeLeft && (ctxs.value0.value2 instanceof Leaf && (ctxs.value0.value5 instanceof Leaf && tree instanceof Leaf))) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value0, ctxs.value0.value1, Leaf.value, ctxs.value0.value3, ctxs.value0.value4, Leaf.value));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && (ctxs.value0.value0 instanceof Leaf && (ctxs.value0.value5 instanceof Leaf && tree instanceof Leaf))) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value, ctxs.value0.value3, ctxs.value0.value4, Leaf.value));
                          };
                          if (ctxs.value0 instanceof ThreeRight && (ctxs.value0.value0 instanceof Leaf && (ctxs.value0.value3 instanceof Leaf && tree instanceof Leaf))) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value, ctxs.value0.value4, ctxs.value0.value5, Leaf.value));
                          };
                          if (ctxs.value0 instanceof ThreeLeft && ctxs.value0.value2 instanceof Two) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Three(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0, ctxs.value0.value2.value1, ctxs.value0.value2.value2, ctxs.value0.value2.value3), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value0 instanceof Two) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Three(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3, ctxs.value0.value1, ctxs.value0.value2, tree), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value5 instanceof Two) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Three(tree, ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5.value0, ctxs.value0.value5.value1, ctxs.value0.value5.value2, ctxs.value0.value5.value3)));
                          };
                          if (ctxs.value0 instanceof ThreeRight && ctxs.value0.value3 instanceof Two) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Three(ctxs.value0.value3.value0, ctxs.value0.value3.value1, ctxs.value0.value3.value2, ctxs.value0.value3.value3, ctxs.value0.value4, ctxs.value0.value5, tree)));
                          };
                          if (ctxs.value0 instanceof ThreeLeft && ctxs.value0.value2 instanceof Three) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(new Two(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0), ctxs.value0.value2.value1, ctxs.value0.value2.value2, new Two(ctxs.value0.value2.value3, ctxs.value0.value2.value4, ctxs.value0.value2.value5, ctxs.value0.value2.value6), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value0 instanceof Three) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(new Two(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3), ctxs.value0.value0.value4, ctxs.value0.value0.value5, new Two(ctxs.value0.value0.value6, ctxs.value0.value1, ctxs.value0.value2, tree), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value5 instanceof Three) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Two(tree, ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5.value0), ctxs.value0.value5.value1, ctxs.value0.value5.value2, new Two(ctxs.value0.value5.value3, ctxs.value0.value5.value4, ctxs.value0.value5.value5, ctxs.value0.value5.value6)));
                          };
                          if (ctxs.value0 instanceof ThreeRight && ctxs.value0.value3 instanceof Three) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Two(ctxs.value0.value3.value0, ctxs.value0.value3.value1, ctxs.value0.value3.value2, ctxs.value0.value3.value3), ctxs.value0.value3.value4, ctxs.value0.value3.value5, new Two(ctxs.value0.value3.value6, ctxs.value0.value4, ctxs.value0.value5, tree)));
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal line 501, column 9 - line 518, column 136: " + [ ctxs.value0.constructor.name, tree.constructor.name ]);
                      })());
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal line 498, column 5 - line 518, column 136: " + [ ctxs.constructor.name ]);
              };
          };
          var removeMaxNode = function (ctx) {
              return function (m) {
                  var $__unused = function (dictPartial1) {
                      return function ($dollar57) {
                          return $dollar57;
                      };
                  };
                  return $__unused()((function () {
                      if (m instanceof Two && (m.value0 instanceof Leaf && m.value3 instanceof Leaf)) {
                          return up(ctx)(Leaf.value);
                      };
                      if (m instanceof Two) {
                          return removeMaxNode(new Data_List_Types.Cons(new TwoRight(m.value0, m.value1, m.value2), ctx))(m.value3);
                      };
                      if (m instanceof Three && (m.value0 instanceof Leaf && (m.value3 instanceof Leaf && m.value6 instanceof Leaf))) {
                          return up(new Data_List_Types.Cons(new TwoRight(Leaf.value, m.value1, m.value2), ctx))(Leaf.value);
                      };
                      if (m instanceof Three) {
                          return removeMaxNode(new Data_List_Types.Cons(new ThreeRight(m.value0, m.value1, m.value2, m.value3, m.value4, m.value5), ctx))(m.value6);
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal line 530, column 5 - line 534, column 107: " + [ m.constructor.name ]);
                  })());
              };
          };
          var maxNode = function (m) {
              var $__unused = function (dictPartial1) {
                  return function ($dollar59) {
                      return $dollar59;
                  };
              };
              return $__unused()((function () {
                  if (m instanceof Two && m.value3 instanceof Leaf) {
                      return {
                          key: m.value1,
                          value: m.value2
                      };
                  };
                  if (m instanceof Two) {
                      return maxNode(m.value3);
                  };
                  if (m instanceof Three && m.value6 instanceof Leaf) {
                      return {
                          key: m.value4,
                          value: m.value5
                      };
                  };
                  if (m instanceof Three) {
                      return maxNode(m.value6);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal line 521, column 33 - line 525, column 45: " + [ m.constructor.name ]);
              })());
          };
          var comp = Data_Ord.compare(dictOrd);
          var down = function ($copy_ctx) {
              return function ($copy_m) {
                  var $tco_var_ctx = $copy_ctx;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(ctx, m) {
                      if (m instanceof Leaf) {
                          $tco_done = true;
                          return Data_Maybe.Nothing.value;
                      };
                      if (m instanceof Two) {
                          var v = comp(k)(m.value1);
                          if (m.value3 instanceof Leaf && v instanceof Data_Ordering.EQ) {
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, up(ctx)(Leaf.value)));
                          };
                          if (v instanceof Data_Ordering.EQ) {
                              var max = maxNode(m.value0);
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, removeMaxNode(new Data_List_Types.Cons(new TwoLeft(max.key, max.value, m.value3), ctx))(m.value0)));
                          };
                          if (v instanceof Data_Ordering.LT) {
                              $tco_var_ctx = new Data_List_Types.Cons(new TwoLeft(m.value1, m.value2, m.value3), ctx);
                              $copy_m = m.value0;
                              return;
                          };
                          $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(m.value0, m.value1, m.value2), ctx);
                          $copy_m = m.value3;
                          return;
                      };
                      if (m instanceof Three) {
                          var leaves = (function () {
                              if (m.value0 instanceof Leaf && (m.value3 instanceof Leaf && m.value6 instanceof Leaf)) {
                                  return true;
                              };
                              return false;
                          })();
                          var v = comp(k)(m.value4);
                          var v3 = comp(k)(m.value1);
                          if (leaves && v3 instanceof Data_Ordering.EQ) {
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, fromZipper(dictOrd)(ctx)(new Two(Leaf.value, m.value4, m.value5, Leaf.value))));
                          };
                          if (leaves && v instanceof Data_Ordering.EQ) {
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value5, fromZipper(dictOrd)(ctx)(new Two(Leaf.value, m.value1, m.value2, Leaf.value))));
                          };
                          if (v3 instanceof Data_Ordering.EQ) {
                              var max = maxNode(m.value0);
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, removeMaxNode(new Data_List_Types.Cons(new ThreeLeft(max.key, max.value, m.value3, m.value4, m.value5, m.value6), ctx))(m.value0)));
                          };
                          if (v instanceof Data_Ordering.EQ) {
                              var max = maxNode(m.value3);
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value5, removeMaxNode(new Data_List_Types.Cons(new ThreeMiddle(m.value0, m.value1, m.value2, max.key, max.value, m.value6), ctx))(m.value3)));
                          };
                          if (v3 instanceof Data_Ordering.LT) {
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeLeft(m.value1, m.value2, m.value3, m.value4, m.value5, m.value6), ctx);
                              $copy_m = m.value0;
                              return;
                          };
                          if (v3 instanceof Data_Ordering.GT && v instanceof Data_Ordering.LT) {
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeMiddle(m.value0, m.value1, m.value2, m.value4, m.value5, m.value6), ctx);
                              $copy_m = m.value3;
                              return;
                          };
                          $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(m.value0, m.value1, m.value2, m.value3, m.value4, m.value5), ctx);
                          $copy_m = m.value6;
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal line 471, column 34 - line 494, column 80: " + [ m.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_ctx, $copy_m);
                  };
                  return $tco_result;
              };
          };
          return down(Data_List_Types.Nil.value);
      };
  };
  var foldableMap = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return function (m) {
              return Data_Foldable.foldMap(Data_List_Types.foldableList)(dictMonoid)(f)(values(m));
          };
      };
  }, function (f) {
      return function (z) {
          return function (m) {
              return Data_Foldable.foldl(Data_List_Types.foldableList)(f)(z)(values(m));
          };
      };
  }, function (f) {
      return function (z) {
          return function (m) {
              return Data_Foldable.foldr(Data_List_Types.foldableList)(f)(z)(values(m));
          };
      };
  });
  var empty = Leaf.value;
  var fromFoldable = function (dictOrd) {
      return function (dictFoldable) {
          return Data_Foldable.foldl(dictFoldable)(function (m) {
              return function (v) {
                  return insert(dictOrd)(v.value0)(v.value1)(m);
              };
          })(empty);
      };
  };
  var $$delete = function (dictOrd) {
      return function (k) {
          return function (m) {
              return Data_Maybe.maybe(m)(Data_Tuple.snd)(pop(dictOrd)(k)(m));
          };
      };
  };
  exports["empty"] = empty;
  exports["isEmpty"] = isEmpty;
  exports["singleton"] = singleton;
  exports["insert"] = insert;
  exports["lookup"] = lookup;
  exports["fromFoldable"] = fromFoldable;
  exports["toUnfoldable"] = toUnfoldable;
  exports["delete"] = $$delete;
  exports["pop"] = pop;
  exports["values"] = values;
  exports["showMap"] = showMap;
  exports["foldableMap"] = foldableMap;
})(PS["Data.Map.Internal"] = PS["Data.Map.Internal"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Eq = PS["Data.Eq"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Symbol = PS["Data.Symbol"];
  var Prelude = PS["Prelude"];
  var Record_Unsafe = PS["Record.Unsafe"];
  var Record_Unsafe_Union = PS["Record.Unsafe.Union"];
  var Type_Row = PS["Type.Row"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var insert = function (dictIsSymbol) {
      return function (dictLacks) {
          return function (dictCons) {
              return function (l) {
                  return function (a) {
                      return function (r) {
                          return Record_Unsafe.unsafeSet(Data_Symbol.reflectSymbol(dictIsSymbol)(l))(a)(r);
                      };
                  };
              };
          };
      };
  };
  exports["insert"] = insert;
})(PS["Record"] = PS["Record"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Argonaut_Core = PS["Data.Argonaut.Core"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Either = PS["Data.Either"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Int = PS["Data.Int"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Map = PS["Data.Map"];
  var Data_Map_Internal = PS["Data.Map.Internal"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_String = PS["Data.String"];
  var Data_String_CodePoints = PS["Data.String.CodePoints"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_TraversableWithIndex = PS["Data.TraversableWithIndex"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Foreign_Object = PS["Foreign.Object"];
  var Prelude = PS["Prelude"];
  var Record = PS["Record"];
  var Type_Data_RowList = PS["Type.Data.RowList"];                 
  var DecodeJson = function (decodeJson) {
      this.decodeJson = decodeJson;
  };
  var GDecodeJson = function (gDecodeJson) {
      this.gDecodeJson = gDecodeJson;
  };
  var gDecodeJsonNil = new GDecodeJson(function (v) {
      return function (v1) {
          return new Data_Either.Right({});
      };
  });
  var gDecodeJson = function (dict) {
      return dict.gDecodeJson;
  }; 
  var decodeRecord = function (dictGDecodeJson) {
      return function (dictRowToList) {
          return new DecodeJson(function (json) {
              var v = Data_Argonaut_Core.toObject(json);
              if (v instanceof Data_Maybe.Just) {
                  return gDecodeJson(dictGDecodeJson)(v.value0)(Type_Data_RowList.RLProxy.value);
              };
              if (v instanceof Data_Maybe.Nothing) {
                  return new Data_Either.Left("Could not convert JSON to object");
              };
              throw new Error("Failed pattern match at Data.Argonaut.Decode.Class line 111, column 5 - line 115, column 1: " + [ v.constructor.name ]);
          });
      };
  };
  var decodeJsonString = new DecodeJson(Data_Argonaut_Core.caseJsonString(new Data_Either.Left("Value is not a String"))(Data_Either.Right.create));
  var decodeJsonNumber = new DecodeJson(Data_Argonaut_Core.caseJsonNumber(new Data_Either.Left("Value is not a Number"))(Data_Either.Right.create));                               
  var decodeJsonJson = new DecodeJson(Data_Either.Right.create);                                                                                       
  var decodeJson = function (dict) {
      return dict.decodeJson;
  }; 
  var decodeJsonInt = new DecodeJson(Control_Bind.composeKleisliFlipped(Data_Either.bindEither)(function ($54) {
      return Data_Maybe.maybe(new Data_Either.Left("Value is not an integer"))(Data_Either.Right.create)(Data_Int.fromNumber($54));
  })(decodeJson(decodeJsonNumber)));
  var decodeJsonMaybe = function (dictDecodeJson) {
      return new DecodeJson(function (j) {
          if (Data_Argonaut_Core.isNull(j)) {
              return Control_Applicative.pure(Data_Either.applicativeEither)(Data_Maybe.Nothing.value);
          };
          if (Data_Boolean.otherwise) {
              return Data_Functor.map(Data_Either.functorEither)(Data_Maybe.Just.create)(decodeJson(dictDecodeJson)(j));
          };
          throw new Error("Failed pattern match at Data.Argonaut.Decode.Class line 26, column 1 - line 26, column 65: " + [ j.constructor.name ]);
      });
  };
  var gDecodeJsonCons = function (dictDecodeJson) {
      return function (dictGDecodeJson) {
          return function (dictIsSymbol) {
              return function (dictCons) {
                  return function (dictLacks) {
                      return new GDecodeJson(function (object) {
                          return function (v) {
                              var fieldName = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                              return Control_Bind.bind(Data_Either.bindEither)(gDecodeJson(dictGDecodeJson)(object)(Type_Data_RowList.RLProxy.value))(function (v1) {
                                  var v2 = Foreign_Object.lookup(fieldName)(object);
                                  if (v2 instanceof Data_Maybe.Just) {
                                      return Control_Bind.bind(Data_Either.bindEither)(decodeJson(dictDecodeJson)(v2.value0))(function (v3) {
                                          return Data_Either.Right.create(Record.insert(dictIsSymbol)(dictLacks)(dictCons)(Data_Symbol.SProxy.value)(v3)(v1));
                                      });
                                  };
                                  if (v2 instanceof Data_Maybe.Nothing) {
                                      return Data_Either.Left.create("JSON was missing expected field: " + fieldName);
                                  };
                                  throw new Error("Failed pattern match at Data.Argonaut.Decode.Class line 138, column 5 - line 144, column 55: " + [ v2.constructor.name ]);
                              });
                          };
                      });
                  };
              };
          };
      };
  };
  var decodeJArray = function ($56) {
      return Data_Maybe.maybe(new Data_Either.Left("Value is not an Array"))(Data_Either.Right.create)(Data_Argonaut_Core.toArray($56));
  };
  var decodeList = function (dictDecodeJson) {
      return new DecodeJson(function ($57) {
          return Data_Bifunctor.lmap(Data_Either.bifunctorEither)(function (v) {
              return "Couldn't decode List: " + v;
          })(Control_Bind.composeKleisliFlipped(Data_Either.bindEither)(Data_Traversable.traverse(Data_List_Types.traversableList)(Data_Either.applicativeEither)(decodeJson(dictDecodeJson)))(Data_Functor.map(Data_Functor.functorFn)(Data_Functor.map(Data_Either.functorEither)(Data_List.fromFoldable(Data_Foldable.foldableArray)))(decodeJArray))($57));
      });
  };
  var decodeJsonTuple = function (dictDecodeJson) {
      return function (dictDecodeJson1) {
          return new DecodeJson(function (j) {
              var f = function (v) {
                  if (v instanceof Data_List_Types.Cons && (v.value1 instanceof Data_List_Types.Cons && v.value1.value1 instanceof Data_List_Types.Nil)) {
                      return Control_Apply.apply(Data_Either.applyEither)(Data_Functor.map(Data_Either.functorEither)(Data_Tuple.Tuple.create)(decodeJson(dictDecodeJson)(v.value0)))(decodeJson(dictDecodeJson1)(v.value1.value0));
                  };
                  return new Data_Either.Left("Couldn't decode Tuple");
              };
              return Control_Bind.bind(Data_Either.bindEither)(decodeJson(decodeList(decodeJsonJson))(j))(f);
          });
      };
  };
  var decodeMap = function (dictOrd) {
      return function (dictDecodeJson) {
          return function (dictDecodeJson1) {
              return new DecodeJson(function ($58) {
                  return Data_Functor.map(Data_Either.functorEither)(Data_Map_Internal.fromFoldable(dictOrd)(Data_List_Types.foldableList))(decodeJson(decodeList(decodeJsonTuple(dictDecodeJson)(dictDecodeJson1)))($58));
              });
          };
      };
  };
  var decodeArray = function (dictDecodeJson) {
      return new DecodeJson((function () {
          var msg = function (i) {
              return function (m) {
                  return "Failed at index " + (Data_Show.show(Data_Show.showInt)(i) + ("): " + m));
              };
          };
          var f = function (i) {
              return function ($60) {
                  return Data_Bifunctor.lmap(Data_Either.bifunctorEither)(msg(i))(decodeJson(dictDecodeJson)($60));
              };
          };
          return function ($61) {
              return Data_Bifunctor.lmap(Data_Either.bifunctorEither)(function (v) {
                  return "Couldn't decode Array (" + v;
              })(Control_Bind.composeKleisliFlipped(Data_Either.bindEither)(Data_TraversableWithIndex.traverseWithIndex(Data_TraversableWithIndex.traversableWithIndexArray)(Data_Either.applicativeEither)(f))(decodeJArray)($61));
          };
      })());
  };
  exports["decodeJson"] = decodeJson;
  exports["gDecodeJson"] = gDecodeJson;
  exports["DecodeJson"] = DecodeJson;
  exports["decodeJArray"] = decodeJArray;
  exports["GDecodeJson"] = GDecodeJson;
  exports["decodeJsonMaybe"] = decodeJsonMaybe;
  exports["decodeJsonTuple"] = decodeJsonTuple;
  exports["decodeJsonNumber"] = decodeJsonNumber;
  exports["decodeJsonInt"] = decodeJsonInt;
  exports["decodeJsonString"] = decodeJsonString;
  exports["decodeJsonJson"] = decodeJsonJson;
  exports["decodeArray"] = decodeArray;
  exports["decodeList"] = decodeList;
  exports["decodeMap"] = decodeMap;
  exports["decodeRecord"] = decodeRecord;
  exports["gDecodeJsonNil"] = gDecodeJsonNil;
  exports["gDecodeJsonCons"] = gDecodeJsonCons;
})(PS["Data.Argonaut.Decode.Class"] = PS["Data.Argonaut.Decode.Class"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var defaultEncoding = {
      tagKey: "tag",
      valuesKey: "values"
  };
  exports["defaultEncoding"] = defaultEncoding;
})(PS["Data.Argonaut.Types.Generic.Rep"] = PS["Data.Argonaut.Types.Generic.Rep"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Argonaut_Core = PS["Data.Argonaut.Core"];
  var Data_Argonaut_Decode_Class = PS["Data.Argonaut.Decode.Class"];
  var Data_Argonaut_Types_Generic_Rep = PS["Data.Argonaut.Types.Generic.Rep"];
  var Data_Array = PS["Data.Array"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Generic_Rep = PS["Data.Generic.Rep"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Symbol = PS["Data.Symbol"];
  var Foreign_Object = PS["Foreign.Object"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];                 
  var DecodeRep = function (decodeRepWith) {
      this.decodeRepWith = decodeRepWith;
  };
  var DecodeRepArgs = function (decodeRepArgs) {
      this.decodeRepArgs = decodeRepArgs;
  };
  var mFail = function (msg) {
      return Data_Maybe.maybe(new Data_Either.Left(msg))(Data_Either.Right.create);
  };
  var decodeRepWith = function (dict) {
      return dict.decodeRepWith;
  };
  var genericDecodeJsonWith = function (dictGeneric) {
      return function (dictDecodeRep) {
          return function (e) {
              return function ($52) {
                  return Data_Functor.map(Data_Either.functorEither)(Data_Generic_Rep.to(dictGeneric))(decodeRepWith(dictDecodeRep)(e)($52));
              };
          };
      };
  };
  var genericDecodeJson = function (dictGeneric) {
      return function (dictDecodeRep) {
          return genericDecodeJsonWith(dictGeneric)(dictDecodeRep)(Data_Argonaut_Types_Generic_Rep.defaultEncoding);
      };
  };
  var decodeRepSum = function (dictDecodeRep) {
      return function (dictDecodeRep1) {
          return new DecodeRep(function (e) {
              return function (j) {
                  return Control_Alt.alt(Data_Either.altEither)(Data_Functor.map(Data_Either.functorEither)(Data_Generic_Rep.Inl.create)(decodeRepWith(dictDecodeRep)(e)(j)))(Data_Functor.map(Data_Either.functorEither)(Data_Generic_Rep.Inr.create)(decodeRepWith(dictDecodeRep1)(e)(j)));
              };
          });
      };
  }; 
  var decodeRepArgsNoArguments = new DecodeRepArgs(function (js) {
      return new Data_Either.Right({
          init: Data_Generic_Rep.NoArguments.value,
          rest: js
      });
  });
  var decodeRepArgsArgument = function (dictDecodeJson) {
      return new DecodeRepArgs(function (js) {
          return Control_Bind.bind(Data_Either.bindEither)(mFail("too few values were present")(Data_Array.uncons(js)))(function (v) {
              return Data_Functor.map(Data_Either.functorEither)(function ($53) {
                  return (function (v1) {
                      return {
                          init: v1,
                          rest: v.tail
                      };
                  })(Data_Generic_Rep.Argument($53));
              })(Data_Argonaut_Decode_Class.decodeJson(dictDecodeJson)(v.head));
          });
      });
  };
  var decodeRepArgs = function (dict) {
      return dict.decodeRepArgs;
  };
  var decodeRepArgsProduct = function (dictDecodeRepArgs) {
      return function (dictDecodeRepArgs1) {
          return new DecodeRepArgs(function (js) {
              return Control_Bind.bind(Data_Either.bindEither)(decodeRepArgs(dictDecodeRepArgs)(js))(function (v) {
                  return Control_Bind.bind(Data_Either.bindEither)(decodeRepArgs(dictDecodeRepArgs1)(v.rest))(function (v1) {
                      return Control_Applicative.pure(Data_Either.applicativeEither)({
                          init: new Data_Generic_Rep.Product(v.init, v1.init),
                          rest: v1.rest
                      });
                  });
              });
          });
      };
  };
  var decodeRepConstructor = function (dictIsSymbol) {
      return function (dictDecodeRepArgs) {
          return new DecodeRep(function (e) {
              return function (j) {
                  var name = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                  var decodingErr = function (msg) {
                      return "When decoding a " + (name + (": " + msg));
                  };
                  return Control_Bind.bind(Data_Either.bindEither)(mFail(decodingErr("expected an object"))(Data_Argonaut_Core.toObject(j)))(function (v) {
                      return Control_Bind.bind(Data_Either.bindEither)(mFail(decodingErr("'" + (e.tagKey + "' property is missing")))(Foreign_Object.lookup(e.tagKey)(v)))(function (v1) {
                          return Control_Bind.bind(Data_Either.bindEither)(mFail(decodingErr("'" + (e.tagKey + "' property is not a string")))(Data_Argonaut_Core.toString(v1)))(function (v2) {
                              return Control_Bind.discard(Control_Bind.discardUnit)(Data_Either.bindEither)(Control_Applicative.when(Data_Either.applicativeEither)(v2 !== name)(Data_Either.Left.create(decodingErr("'" + (e.tagKey + "' property has an incorrect value")))))(function () {
                                  return Control_Bind.bind(Data_Either.bindEither)(mFail(decodingErr("'" + (e.valuesKey + "' property is missing")))(Foreign_Object.lookup(e.valuesKey)(v)))(function (v3) {
                                      return Control_Bind.bind(Data_Either.bindEither)(mFail(decodingErr("'" + (e.valuesKey + "' property is not an array")))(Data_Argonaut_Core.toArray(v3)))(function (v4) {
                                          return Control_Bind.bind(Data_Either.bindEither)(Data_Bifunctor.lmap(Data_Either.bifunctorEither)(decodingErr)(decodeRepArgs(dictDecodeRepArgs)(v4)))(function (v5) {
                                              return Control_Bind.discard(Control_Bind.discardUnit)(Data_Either.bindEither)(Control_Applicative.when(Data_Either.applicativeEither)(Data_Eq.notEq(Data_Eq.eqArray(Data_Argonaut_Core.eqJson))(v5.rest)([  ]))(Data_Either.Left.create(decodingErr("'" + (e.valuesKey + "' property had too many values")))))(function () {
                                                  return Control_Applicative.pure(Data_Either.applicativeEither)(v5.init);
                                              });
                                          });
                                      });
                                  });
                              });
                          });
                      });
                  });
              };
          });
      };
  };
  exports["DecodeRep"] = DecodeRep;
  exports["DecodeRepArgs"] = DecodeRepArgs;
  exports["decodeRepWith"] = decodeRepWith;
  exports["decodeRepArgs"] = decodeRepArgs;
  exports["genericDecodeJson"] = genericDecodeJson;
  exports["genericDecodeJsonWith"] = genericDecodeJsonWith;
  exports["decodeRepSum"] = decodeRepSum;
  exports["decodeRepConstructor"] = decodeRepConstructor;
  exports["decodeRepArgsNoArguments"] = decodeRepArgsNoArguments;
  exports["decodeRepArgsProduct"] = decodeRepArgsProduct;
  exports["decodeRepArgsArgument"] = decodeRepArgsArgument;
})(PS["Data.Argonaut.Decode.Generic.Rep"] = PS["Data.Argonaut.Decode.Generic.Rep"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Argonaut_Core = PS["Data.Argonaut.Core"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Int = PS["Data.Int"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Map = PS["Data.Map"];
  var Data_Map_Internal = PS["Data.Map.Internal"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_String = PS["Data.String"];
  var Data_String_CodePoints = PS["Data.String.CodePoints"];
  var Data_String_CodeUnits = PS["Data.String.CodeUnits"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Void = PS["Data.Void"];
  var Foreign_Object = PS["Foreign.Object"];
  var Prelude = PS["Prelude"];
  var Record = PS["Record"];
  var Type_Data_RowList = PS["Type.Data.RowList"];                 
  var EncodeJson = function (encodeJson) {
      this.encodeJson = encodeJson;
  }; 
  var encodeJson = function (dict) {
      return dict.encodeJson;
  };
  exports["encodeJson"] = encodeJson;
  exports["EncodeJson"] = EncodeJson;
})(PS["Data.Argonaut.Encode.Class"] = PS["Data.Argonaut.Encode.Class"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Argonaut_Core = PS["Data.Argonaut.Core"];
  var Data_Argonaut_Encode_Class = PS["Data.Argonaut.Encode.Class"];
  var Data_Argonaut_Types_Generic_Rep = PS["Data.Argonaut.Types.Generic.Rep"];
  var Data_Function = PS["Data.Function"];
  var Data_Generic_Rep = PS["Data.Generic.Rep"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Symbol = PS["Data.Symbol"];
  var Foreign_Object = PS["Foreign.Object"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];                 
  var EncodeRep = function (encodeRepWith) {
      this.encodeRepWith = encodeRepWith;
  };
  var EncodeRepArgs = function (encodeRepArgs) {
      this.encodeRepArgs = encodeRepArgs;
  };
  var encodeRepWith = function (dict) {
      return dict.encodeRepWith;
  };
  var genericEncodeJsonWith = function (dictGeneric) {
      return function (dictEncodeRep) {
          return function (e) {
              return function ($50) {
                  return encodeRepWith(dictEncodeRep)(e)(Data_Generic_Rep.from(dictGeneric)($50));
              };
          };
      };
  };
  var genericEncodeJson = function (dictGeneric) {
      return function (dictEncodeRep) {
          return genericEncodeJsonWith(dictGeneric)(dictEncodeRep)(Data_Argonaut_Types_Generic_Rep.defaultEncoding);
      };
  };
  var encodeRepSum = function (dictEncodeRep) {
      return function (dictEncodeRep1) {
          return new EncodeRep(function (e) {
              return function (v) {
                  if (v instanceof Data_Generic_Rep.Inl) {
                      return encodeRepWith(dictEncodeRep)(e)(v.value0);
                  };
                  if (v instanceof Data_Generic_Rep.Inr) {
                      return encodeRepWith(dictEncodeRep1)(e)(v.value0);
                  };
                  throw new Error("Failed pattern match at Data.Argonaut.Encode.Generic.Rep line 37, column 1 - line 37, column 79: " + [ e.constructor.name, v.constructor.name ]);
              };
          });
      };
  };
  var encodeRepArgsNoArguments = new EncodeRepArgs(function (v) {
      return [  ];
  });
  var encodeRepArgsArgument = function (dictEncodeJson) {
      return new EncodeRepArgs(function (v) {
          return [ Data_Argonaut_Encode_Class.encodeJson(dictEncodeJson)(v) ];
      });
  };
  var encodeRepArgs = function (dict) {
      return dict.encodeRepArgs;
  };
  var encodeRepConstructor = function (dictIsSymbol) {
      return function (dictEncodeRepArgs) {
          return new EncodeRep(function (e) {
              return function (v) {
                  return Data_Argonaut_Core.fromObject(Foreign_Object.insert(e.tagKey)(Data_Argonaut_Core.fromString(Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value)))(Foreign_Object.insert(e.valuesKey)(Data_Argonaut_Core.fromArray(encodeRepArgs(dictEncodeRepArgs)(v)))(Foreign_Object.empty)));
              };
          });
      };
  };
  exports["EncodeRep"] = EncodeRep;
  exports["EncodeRepArgs"] = EncodeRepArgs;
  exports["encodeRepWith"] = encodeRepWith;
  exports["encodeRepArgs"] = encodeRepArgs;
  exports["genericEncodeJson"] = genericEncodeJson;
  exports["genericEncodeJsonWith"] = genericEncodeJsonWith;
  exports["encodeRepSum"] = encodeRepSum;
  exports["encodeRepConstructor"] = encodeRepConstructor;
  exports["encodeRepArgsNoArguments"] = encodeRepArgsNoArguments;
  exports["encodeRepArgsArgument"] = encodeRepArgsArgument;
})(PS["Data.Argonaut.Encode.Generic.Rep"] = PS["Data.Argonaut.Encode.Generic.Rep"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Generic_Rep = PS["Data.Generic.Rep"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Symbol = PS["Data.Symbol"];
  var Prelude = PS["Prelude"];                 
  var GenericShow = function (genericShow$prime) {
      this["genericShow'"] = genericShow$prime;
  };
  var GenericShowArgs = function (genericShowArgs) {
      this.genericShowArgs = genericShowArgs;
  };
  var genericShowArgsNoArguments = new GenericShowArgs(function (v) {
      return [  ];
  });
  var genericShowArgs = function (dict) {
      return dict.genericShowArgs;
  };
  var genericShowConstructor = function (dictGenericShowArgs) {
      return function (dictIsSymbol) {
          return new GenericShow(function (v) {
              var ctor = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
              var v1 = genericShowArgs(dictGenericShowArgs)(v);
              if (v1.length === 0) {
                  return ctor;
              };
              return "(" + (Data_Foldable.intercalate(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(" ")(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ ctor ])(v1)) + ")");
          });
      };
  };
  var genericShow$prime = function (dict) {
      return dict["genericShow'"];
  }; 
  var genericShowSum = function (dictGenericShow) {
      return function (dictGenericShow1) {
          return new GenericShow(function (v) {
              if (v instanceof Data_Generic_Rep.Inl) {
                  return genericShow$prime(dictGenericShow)(v.value0);
              };
              if (v instanceof Data_Generic_Rep.Inr) {
                  return genericShow$prime(dictGenericShow1)(v.value0);
              };
              throw new Error("Failed pattern match at Data.Generic.Rep.Show line 26, column 1 - line 26, column 83: " + [ v.constructor.name ]);
          });
      };
  };
  var genericShow = function (dictGeneric) {
      return function (dictGenericShow) {
          return function (x) {
              return genericShow$prime(dictGenericShow)(Data_Generic_Rep.from(dictGeneric)(x));
          };
      };
  };
  exports["GenericShow"] = GenericShow;
  exports["genericShow"] = genericShow;
  exports["GenericShowArgs"] = GenericShowArgs;
  exports["genericShowArgs"] = genericShowArgs;
  exports["genericShowArgsNoArguments"] = genericShowArgsNoArguments;
  exports["genericShowSum"] = genericShowSum;
  exports["genericShowConstructor"] = genericShowConstructor;
})(PS["Data.Generic.Rep.Show"] = PS["Data.Generic.Rep.Show"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Prelude = PS["Prelude"];                 
  var Profunctor = function (dimap) {
      this.dimap = dimap;
  };
  var profunctorFn = new Profunctor(function (a2b) {
      return function (c2d) {
          return function (b2c) {
              return function ($9) {
                  return c2d(b2c(a2b($9)));
              };
          };
      };
  });
  var dimap = function (dict) {
      return dict.dimap;
  };
  var rmap = function (dictProfunctor) {
      return function (b2c) {
          return dimap(dictProfunctor)(Control_Category.identity(Control_Category.categoryFn))(b2c);
      };
  };
  exports["dimap"] = dimap;
  exports["Profunctor"] = Profunctor;
  exports["rmap"] = rmap;
  exports["profunctorFn"] = profunctorFn;
})(PS["Data.Profunctor"] = PS["Data.Profunctor"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Profunctor = PS["Data.Profunctor"];
  var Prelude = PS["Prelude"];                 
  var Choice = function (Profunctor0, left, right) {
      this.Profunctor0 = Profunctor0;
      this.left = left;
      this.right = right;
  };
  var right = function (dict) {
      return dict.right;
  };
  var left = function (dict) {
      return dict.left;
  };
  var choiceFn = new Choice(function () {
      return Data_Profunctor.profunctorFn;
  }, function (v) {
      return function (v1) {
          if (v1 instanceof Data_Either.Left) {
              return Data_Either.Left.create(v(v1.value0));
          };
          if (v1 instanceof Data_Either.Right) {
              return new Data_Either.Right(v1.value0);
          };
          throw new Error("Failed pattern match at Data.Profunctor.Choice line 32, column 1 - line 32, column 33: " + [ v.constructor.name, v1.constructor.name ]);
      };
  }, Data_Functor.map(Data_Either.functorEither));
  exports["left"] = left;
  exports["right"] = right;
  exports["Choice"] = Choice;
  exports["choiceFn"] = choiceFn;
})(PS["Data.Profunctor.Choice"] = PS["Data.Profunctor.Choice"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Profunctor = PS["Data.Profunctor"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];                 
  var Strong = function (Profunctor0, first, second) {
      this.Profunctor0 = Profunctor0;
      this.first = first;
      this.second = second;
  };
  var strongFn = new Strong(function () {
      return Data_Profunctor.profunctorFn;
  }, function (a2b) {
      return function (v) {
          return new Data_Tuple.Tuple(a2b(v.value0), v.value1);
      };
  }, Data_Functor.map(Data_Tuple.functorTuple));
  var second = function (dict) {
      return dict.second;
  };
  var first = function (dict) {
      return dict.first;
  };
  var splitStrong = function (dictCategory) {
      return function (dictStrong) {
          return function (l) {
              return function (r) {
                  return Control_Semigroupoid.composeFlipped(dictCategory.Semigroupoid0())(first(dictStrong)(l))(second(dictStrong)(r));
              };
          };
      };
  };
  exports["first"] = first;
  exports["second"] = second;
  exports["Strong"] = Strong;
  exports["splitStrong"] = splitStrong;
  exports["strongFn"] = strongFn;
})(PS["Data.Profunctor.Strong"] = PS["Data.Profunctor.Strong"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Functor = PS["Data.Functor"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Profunctor_Choice = PS["Data.Profunctor.Choice"];
  var Data_Profunctor_Star = PS["Data.Profunctor.Star"];
  var Data_Profunctor_Strong = PS["Data.Profunctor.Strong"];
  var Prelude = PS["Prelude"];                 
  var Wander = function (Choice1, Strong0, wander) {
      this.Choice1 = Choice1;
      this.Strong0 = Strong0;
      this.wander = wander;
  };
  var wanderFunction = new Wander(function () {
      return Data_Profunctor_Choice.choiceFn;
  }, function () {
      return Data_Profunctor_Strong.strongFn;
  }, function (t) {
      return Data_Newtype.alaF(Data_Functor.functorFn)(Data_Functor.functorFn)(Data_Identity.newtypeIdentity)(Data_Identity.newtypeIdentity)(Data_Identity.Identity)(t(Data_Identity.applicativeIdentity));
  });
  var wander = function (dict) {
      return dict.wander;
  };
  exports["wander"] = wander;
  exports["Wander"] = Wander;
  exports["wanderFunction"] = wanderFunction;
})(PS["Data.Lens.Internal.Wander"] = PS["Data.Lens.Internal.Wander"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Const = PS["Data.Const"];
  var Data_Either = PS["Data.Either"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Lens_Internal_Wander = PS["Data.Lens.Internal.Wander"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Profunctor = PS["Data.Profunctor"];
  var Data_Profunctor_Choice = PS["Data.Profunctor.Choice"];
  var Data_Profunctor_Cochoice = PS["Data.Profunctor.Cochoice"];
  var Data_Profunctor_Strong = PS["Data.Profunctor.Strong"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];                 
  var Forget = function (x) {
      return x;
  };
  var profunctorForget = new Data_Profunctor.Profunctor(function (f) {
      return function (v) {
          return function (v1) {
              return function ($27) {
                  return v1(f($27));
              };
          };
      };
  });
  var strongForget = new Data_Profunctor_Strong.Strong(function () {
      return profunctorForget;
  }, function (v) {
      return function ($28) {
          return v(Data_Tuple.fst($28));
      };
  }, function (v) {
      return function ($29) {
          return v(Data_Tuple.snd($29));
      };
  });
  var newtypeForget = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Forget);
  exports["Forget"] = Forget;
  exports["newtypeForget"] = newtypeForget;
  exports["profunctorForget"] = profunctorForget;
  exports["strongForget"] = strongForget;
})(PS["Data.Lens.Internal.Forget"] = PS["Data.Lens.Internal.Forget"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Lens_Internal_Forget = PS["Data.Lens.Internal.Forget"];
  var Data_Lens_Internal_Indexed = PS["Data.Lens.Internal.Indexed"];
  var Data_Lens_Types = PS["Data.Lens.Types"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Profunctor_Strong = PS["Data.Profunctor.Strong"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];                 
  var view = function (l) {
      return Data_Newtype.unwrap(Data_Lens_Internal_Forget.newtypeForget)(l(Control_Category.identity(Control_Category.categoryFn)));
  };
  var viewOn = function (s) {
      return function (l) {
          return view(l)(s);
      };
  };
  exports["viewOn"] = viewOn;
  exports["view"] = view;
})(PS["Data.Lens.Getter"] = PS["Data.Lens.Getter"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Data_Lens_Internal_Indexed = PS["Data.Lens.Internal.Indexed"];
  var Data_Lens_Internal_Shop = PS["Data.Lens.Internal.Shop"];
  var Data_Lens_Types = PS["Data.Lens.Types"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Profunctor = PS["Data.Profunctor"];
  var Data_Profunctor_Strong = PS["Data.Profunctor.Strong"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];
  var lens$prime = function (to) {
      return function (dictStrong) {
          return function (pab) {
              return Data_Profunctor.dimap(dictStrong.Profunctor0())(to)(function (v) {
                  return v.value1(v.value0);
              })(Data_Profunctor_Strong.first(dictStrong)(pab));
          };
      };
  };
  var lens = function (get) {
      return function (set) {
          return function (dictStrong) {
              return lens$prime(function (s) {
                  return new Data_Tuple.Tuple(get(s), function (b) {
                      return set(s)(b);
                  });
              })(dictStrong);
          };
      };
  };
  exports["lens"] = lens;
})(PS["Data.Lens.Lens"] = PS["Data.Lens.Lens"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Lens_Internal_Indexed = PS["Data.Lens.Internal.Indexed"];
  var Data_Lens_Types = PS["Data.Lens.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];                 
  var over = function (l) {
      return l;
  };
  var set = function (l) {
      return function (b) {
          return over(l)(Data_Function["const"](b));
      };
  };
  exports["over"] = over;
  exports["set"] = set;
})(PS["Data.Lens.Setter"] = PS["Data.Lens.Setter"] || {});
(function(exports) {
    "use strict";

  exports.toUpper = function (s) {
    return s.toUpperCase();
  };

  exports.trim = function (s) {
    return s.trim();
  };

  exports.joinWith = function (s) {
    return function (xs) {
      return xs.join(s);
    };
  };
})(PS["Data.String.Common"] = PS["Data.String.Common"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.String.Common"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_String_Pattern = PS["Data.String.Pattern"];
  var Prelude = PS["Prelude"];                 
  var $$null = function (s) {
      return s === "";
  };
  exports["null"] = $$null;
  exports["toUpper"] = $foreign.toUpper;
  exports["trim"] = $foreign.trim;
  exports["joinWith"] = $foreign.joinWith;
})(PS["Data.String.Common"] = PS["Data.String.Common"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports.getCanvasElementByIdImpl = function(id, Just, Nothing) {
      return function() {
          var el = document.getElementById(id);
          if (el && el instanceof HTMLCanvasElement) {
              return Just(el);
          } else {
              return Nothing;
          }
      };
  };

  exports.getContext2D = function(c) {
      return function() {
          return c.getContext('2d');
      };
  };

  exports.setCanvasWidth = function(canvas) {
      return function(width) {
          return function() {
              canvas.width = width;
          };
      };
  };

  exports.setCanvasHeight = function(canvas) {
      return function(height) {
          return function() {
              canvas.height = height;
          };
      };
  };

  exports.setLineWidth = function(ctx) {
      return function(width) {
          return function() {
              ctx.lineWidth = width;
          };
      };
  };

  exports.setFillStyle = function(ctx) {
      return function(style) {
          return function() {
              ctx.fillStyle = style;
          };
      };
  };

  exports.setStrokeStyle = function(ctx) {
      return function(style) {
          return function() {
              ctx.strokeStyle = style;
          };
      };
  };

  exports.setLineCapImpl = function(ctx) {
      return function(cap) {
          return function() {
              ctx.lineCap = cap;
          };
      };
  };

  exports.beginPath = function(ctx) {
      return function() {
          ctx.beginPath();
      };
  };

  exports.stroke = function(ctx) {
      return function() {
          ctx.stroke();
      };
  };

  exports.fill = function(ctx) {
      return function() {
          ctx.fill();
      };
  };

  exports.lineTo = function(ctx) {
      return function(x) {
          return function(y) {
              return function() {
                  ctx.lineTo(x, y);
              };
          };
      };
  };

  exports.moveTo = function(ctx) {
      return function(x) {
          return function(y) {
              return function() {
                  ctx.moveTo(x, y);
              };
          };
      };
  };

  exports.arc = function(ctx) {
      return function(a) {
          return function() {
              ctx.arc(a.x, a.y, a.radius, a.start, a.end);
          };
      };
  };

  exports.clearRect = function(ctx) {
      return function(r) {
          return function() {
              ctx.clearRect(r.x, r.y, r.width, r.height);
          };
      };
  };

  exports.rotate = function(ctx) {
      return function(angle) {
          return function() {
              ctx.rotate(angle);
          };
      };
  };

  exports.translate = function(ctx) {
      return function(t) {
          return function() {
              ctx.translate(t.translateX, t.translateY);
          };
      };
  };

  exports.setTextAlignImpl = function(ctx) {
      return function(textAlign) {
          return function() {
              ctx.textAlign = textAlign;
          }
      }
  };

  exports.font = function(ctx) {
      return function() {
          return ctx.font;
      };
  };

  exports.setFont = function(ctx) {
      return function(fontspec) {
          return function() {
              ctx.font = fontspec;
          };
      };
  };

  exports.fillText = function(ctx) {
      return function(text) {
          return function(x) {
              return function(y) {
                  return function() {
                      ctx.fillText(text, x, y);
                  };
              };
          };
      };
  };

  exports.strokeText = function(ctx) {
      return function(text) {
          return function(x) {
              return function(y) {
                  return function() {
                      ctx.strokeText(text, x, y);
                  };
              };
          };
      };
  };

  exports.save = function(ctx) {
      return function() {
          ctx.save();
      };
  };

  exports.restore = function(ctx) {
      return function() {
          ctx.restore();
      };
  };
})(PS["Graphics.Canvas"] = PS["Graphics.Canvas"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Graphics.Canvas"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_ArrayBuffer_Types = PS["Data.ArrayBuffer.Types"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Effect = PS["Effect"];
  var Effect_Exception_Unsafe = PS["Effect.Exception.Unsafe"];
  var Prelude = PS["Prelude"];                 
  var AlignLeft = (function () {
      function AlignLeft() {

      };
      AlignLeft.value = new AlignLeft();
      return AlignLeft;
  })();
  var AlignRight = (function () {
      function AlignRight() {

      };
      AlignRight.value = new AlignRight();
      return AlignRight;
  })();
  var AlignCenter = (function () {
      function AlignCenter() {

      };
      AlignCenter.value = new AlignCenter();
      return AlignCenter;
  })();
  var AlignStart = (function () {
      function AlignStart() {

      };
      AlignStart.value = new AlignStart();
      return AlignStart;
  })();
  var AlignEnd = (function () {
      function AlignEnd() {

      };
      AlignEnd.value = new AlignEnd();
      return AlignEnd;
  })();
  var Round = (function () {
      function Round() {

      };
      Round.value = new Round();
      return Round;
  })();
  var Square = (function () {
      function Square() {

      };
      Square.value = new Square();
      return Square;
  })();
  var Butt = (function () {
      function Butt() {

      };
      Butt.value = new Butt();
      return Butt;
  })();
  var withContext = function (ctx) {
      return function (action) {
          return function __do() {
              var v = $foreign.save(ctx)();
              var v1 = action();
              var v2 = $foreign.restore(ctx)();
              return v1;
          };
      };
  }; 
  var setTextAlign = function (ctx) {
      return function (textalign) {
          var toString = function (v) {
              if (v instanceof AlignLeft) {
                  return "left";
              };
              if (v instanceof AlignRight) {
                  return "right";
              };
              if (v instanceof AlignCenter) {
                  return "center";
              };
              if (v instanceof AlignStart) {
                  return "start";
              };
              if (v instanceof AlignEnd) {
                  return "end";
              };
              throw new Error("Failed pattern match at Graphics.Canvas line 518, column 5 - line 519, column 5: " + [ v.constructor.name ]);
          };
          return $foreign.setTextAlignImpl(ctx)(toString(textalign));
      };
  };
  var setLineCap = function (context) {
      return function (v) {
          if (v instanceof Round) {
              return $foreign.setLineCapImpl(context)("round");
          };
          if (v instanceof Square) {
              return $foreign.setLineCapImpl(context)("square");
          };
          if (v instanceof Butt) {
              return $foreign.setLineCapImpl(context)("butt");
          };
          throw new Error("Failed pattern match at Graphics.Canvas line 234, column 1 - line 234, column 50: " + [ context.constructor.name, v.constructor.name ]);
      };
  };
  var getCanvasElementById = function (elId) {
      return $foreign.getCanvasElementByIdImpl(elId, Data_Maybe.Just.create, Data_Maybe.Nothing.value);
  };
  exports["Round"] = Round;
  exports["Square"] = Square;
  exports["Butt"] = Butt;
  exports["AlignLeft"] = AlignLeft;
  exports["AlignRight"] = AlignRight;
  exports["AlignCenter"] = AlignCenter;
  exports["AlignStart"] = AlignStart;
  exports["AlignEnd"] = AlignEnd;
  exports["getCanvasElementById"] = getCanvasElementById;
  exports["setLineCap"] = setLineCap;
  exports["setTextAlign"] = setTextAlign;
  exports["withContext"] = withContext;
  exports["getContext2D"] = $foreign.getContext2D;
  exports["setCanvasWidth"] = $foreign.setCanvasWidth;
  exports["setCanvasHeight"] = $foreign.setCanvasHeight;
  exports["setLineWidth"] = $foreign.setLineWidth;
  exports["setFillStyle"] = $foreign.setFillStyle;
  exports["setStrokeStyle"] = $foreign.setStrokeStyle;
  exports["beginPath"] = $foreign.beginPath;
  exports["stroke"] = $foreign.stroke;
  exports["fill"] = $foreign.fill;
  exports["lineTo"] = $foreign.lineTo;
  exports["moveTo"] = $foreign.moveTo;
  exports["arc"] = $foreign.arc;
  exports["clearRect"] = $foreign.clearRect;
  exports["rotate"] = $foreign.rotate;
  exports["translate"] = $foreign.translate;
  exports["setFont"] = $foreign.setFont;
  exports["fillText"] = $foreign.fillText;
  exports["strokeText"] = $foreign.strokeText;
})(PS["Graphics.Canvas"] = PS["Graphics.Canvas"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_State = PS["Control.Monad.State"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_State_Trans = PS["Control.Monad.State.Trans"];
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];
  var Control_Monad_Writer_Trans = PS["Control.Monad.Writer.Trans"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Argonaut_Decode_Class = PS["Data.Argonaut.Decode.Class"];
  var Data_Argonaut_Decode_Generic_Rep = PS["Data.Argonaut.Decode.Generic.Rep"];
  var Data_Argonaut_Encode_Class = PS["Data.Argonaut.Encode.Class"];
  var Data_Argonaut_Encode_Generic_Rep = PS["Data.Argonaut.Encode.Generic.Rep"];
  var Data_Array = PS["Data.Array"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Generic_Rep = PS["Data.Generic.Rep"];
  var Data_Generic_Rep_Show = PS["Data.Generic.Rep.Show"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Lens = PS["Data.Lens"];
  var Data_Lens_Getter = PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = PS["Data.Lens.Internal.Forget"];
  var Data_Lens_Lens = PS["Data.Lens.Lens"];
  var Data_Lens_Setter = PS["Data.Lens.Setter"];
  var Data_Lens_Types = PS["Data.Lens.Types"];
  var Data_Map = PS["Data.Map"];
  var Data_Map_Internal = PS["Data.Map.Internal"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Profunctor_Strong = PS["Data.Profunctor.Strong"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_String = PS["Data.String"];
  var Data_String_Common = PS["Data.String.Common"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Unit = PS["Data.Unit"];
  var Effect = PS["Effect"];
  var Effect_Ref = PS["Effect.Ref"];
  var Effect_Timer = PS["Effect.Timer"];
  var Graphics_Canvas = PS["Graphics.Canvas"];
  var $$Math = PS["Math"];
  var Prelude = PS["Prelude"];                 
  var Intersection = (function () {
      function Intersection() {

      };
      Intersection.value = new Intersection();
      return Intersection;
  })();
  var TeeJunctionUp = (function () {
      function TeeJunctionUp() {

      };
      TeeJunctionUp.value = new TeeJunctionUp();
      return TeeJunctionUp;
  })();
  var TeeJunctionRight = (function () {
      function TeeJunctionRight() {

      };
      TeeJunctionRight.value = new TeeJunctionRight();
      return TeeJunctionRight;
  })();
  var TeeJunctionDown = (function () {
      function TeeJunctionDown() {

      };
      TeeJunctionDown.value = new TeeJunctionDown();
      return TeeJunctionDown;
  })();
  var TeeJunctionLeft = (function () {
      function TeeJunctionLeft() {

      };
      TeeJunctionLeft.value = new TeeJunctionLeft();
      return TeeJunctionLeft;
  })();
  var CornerUpRight = (function () {
      function CornerUpRight() {

      };
      CornerUpRight.value = new CornerUpRight();
      return CornerUpRight;
  })();
  var CornerRightDown = (function () {
      function CornerRightDown() {

      };
      CornerRightDown.value = new CornerRightDown();
      return CornerRightDown;
  })();
  var CornerDownLeft = (function () {
      function CornerDownLeft() {

      };
      CornerDownLeft.value = new CornerDownLeft();
      return CornerDownLeft;
  })();
  var CornerLeftUp = (function () {
      function CornerLeftUp() {

      };
      CornerLeftUp.value = new CornerLeftUp();
      return CornerLeftUp;
  })();
  var StraightHorizontal = (function () {
      function StraightHorizontal() {

      };
      StraightHorizontal.value = new StraightHorizontal();
      return StraightHorizontal;
  })();
  var StraightVertical = (function () {
      function StraightVertical() {

      };
      StraightVertical.value = new StraightVertical();
      return StraightVertical;
  })();
  var Inaccessible = (function () {
      function Inaccessible() {

      };
      Inaccessible.value = new Inaccessible();
      return Inaccessible;
  })();
  var Ready = (function () {
      function Ready() {

      };
      Ready.value = new Ready();
      return Ready;
  })();
  var NotReady = (function () {
      function NotReady() {

      };
      NotReady.value = new NotReady();
      return NotReady;
  })();
  var Position = function (x) {
      return x;
  };
  var P1 = (function () {
      function P1() {

      };
      P1.value = new P1();
      return P1;
  })();
  var P2 = (function () {
      function P2() {

      };
      P2.value = new P2();
      return P2;
  })();
  var P3 = (function () {
      function P3() {

      };
      P3.value = new P3();
      return P3;
  })();
  var P4 = (function () {
      function P4() {

      };
      P4.value = new P4();
      return P4;
  })();
  var Rampaging = (function () {
      function Rampaging(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Rampaging.create = function (value0) {
          return function (value1) {
              return new Rampaging(value0, value1);
          };
      };
      return Rampaging;
  })();
  var Cooldown = (function () {
      function Cooldown(value0) {
          this.value0 = value0;
      };
      Cooldown.create = function (value0) {
          return new Cooldown(value0);
      };
      return Cooldown;
  })();
  var Eaten = (function () {
      function Eaten() {

      };
      Eaten.value = new Eaten();
      return Eaten;
  })();
  var LittleDot = (function () {
      function LittleDot() {

      };
      LittleDot.value = new LittleDot();
      return LittleDot;
  })();
  var BigDot = (function () {
      function BigDot() {

      };
      BigDot.value = new BigDot();
      return BigDot;
  })();
  var Item = function (x) {
      return x;
  };
  var Completed = (function () {
      function Completed() {

      };
      Completed.value = new Completed();
      return Completed;
  })();
  var TooManyPlayersDisconnected = (function () {
      function TooManyPlayersDisconnected() {

      };
      TooManyPlayersDisconnected.value = new TooManyPlayersDisconnected();
      return TooManyPlayersDisconnected;
  })();
  var Up = (function () {
      function Up() {

      };
      Up.value = new Up();
      return Up;
  })();
  var Down = (function () {
      function Down() {

      };
      Down.value = new Down();
      return Down;
  })();
  var Left = (function () {
      function Left() {

      };
      Left.value = new Left();
      return Left;
  })();
  var Right = (function () {
      function Right() {

      };
      Right.value = new Right();
      return Right;
  })();
  var Player = function (x) {
      return x;
  };   
  var ChangedDirection = (function () {
      function ChangedDirection(value0) {
          this.value0 = value0;
      };
      ChangedDirection.create = function (value0) {
          return new ChangedDirection(value0);
      };
      return ChangedDirection;
  })();
  var ChangedIntendedDirection = (function () {
      function ChangedIntendedDirection(value0) {
          this.value0 = value0;
      };
      ChangedIntendedDirection.create = function (value0) {
          return new ChangedIntendedDirection(value0);
      };
      return ChangedIntendedDirection;
  })();
  var ChangedPosition = (function () {
      function ChangedPosition(value0) {
          this.value0 = value0;
      };
      ChangedPosition.create = function (value0) {
          return new ChangedPosition(value0);
      };
      return ChangedPosition;
  })();
  var ChangedScore = (function () {
      function ChangedScore(value0) {
          this.value0 = value0;
      };
      ChangedScore.create = function (value0) {
          return new ChangedScore(value0);
      };
      return ChangedScore;
  })();
  var ChangedNomIndex = (function () {
      function ChangedNomIndex(value0) {
          this.value0 = value0;
      };
      ChangedNomIndex.create = function (value0) {
          return new ChangedNomIndex(value0);
      };
      return ChangedNomIndex;
  })();
  var ChangedRespawnCounter = (function () {
      function ChangedRespawnCounter(value0) {
          this.value0 = value0;
      };
      ChangedRespawnCounter.create = function (value0) {
          return new ChangedRespawnCounter(value0);
      };
      return ChangedRespawnCounter;
  })();
  var PlayerLeft = (function () {
      function PlayerLeft() {

      };
      PlayerLeft.value = new PlayerLeft();
      return PlayerLeft;
  })();
  var GUPU = (function () {
      function GUPU(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      GUPU.create = function (value0) {
          return function (value1) {
              return new GUPU(value0, value1);
          };
      };
      return GUPU;
  })();
  var GUIU = (function () {
      function GUIU(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      GUIU.create = function (value0) {
          return function (value1) {
              return new GUIU(value0, value1);
          };
      };
      return GUIU;
  })();
  var ChangedCountdown = (function () {
      function ChangedCountdown(value0) {
          this.value0 = value0;
      };
      ChangedCountdown.create = function (value0) {
          return new ChangedCountdown(value0);
      };
      return ChangedCountdown;
  })();
  var GameEnded = (function () {
      function GameEnded(value0) {
          this.value0 = value0;
      };
      GameEnded.create = function (value0) {
          return new GameEnded(value0);
      };
      return GameEnded;
  })();
  var ChangedRampage = (function () {
      function ChangedRampage(value0) {
          this.value0 = value0;
      };
      ChangedRampage.create = function (value0) {
          return new ChangedRampage(value0);
      };
      return ChangedRampage;
  })();
  var SIToggleReadyState = (function () {
      function SIToggleReadyState() {

      };
      SIToggleReadyState.value = new SIToggleReadyState();
      return SIToggleReadyState;
  })();
  var SIInProgress = (function () {
      function SIInProgress(value0) {
          this.value0 = value0;
      };
      SIInProgress.create = function (value0) {
          return new SIInProgress(value0);
      };
      return SIInProgress;
  })();
  var Wall = (function () {
      function Wall() {

      };
      Wall.value = new Wall();
      return Wall;
  })();
  var Empty = (function () {
      function Empty() {

      };
      Empty.value = new Empty();
      return Empty;
  })();
  var CWaitingForPlayers = (function () {
      function CWaitingForPlayers(value0) {
          this.value0 = value0;
      };
      CWaitingForPlayers.create = function (value0) {
          return new CWaitingForPlayers(value0);
      };
      return CWaitingForPlayers;
  })();
  var CInProgress = (function () {
      function CInProgress(value0) {
          this.value0 = value0;
      };
      CInProgress.create = function (value0) {
          return new CInProgress(value0);
      };
      return CInProgress;
  })();
  var GameStarting = (function () {
      function GameStarting(value0) {
          this.value0 = value0;
      };
      GameStarting.create = function (value0) {
          return new GameStarting(value0);
      };
      return GameStarting;
  })();
  var NewReadyStates = (function () {
      function NewReadyStates(value0) {
          this.value0 = value0;
      };
      NewReadyStates.create = function (value0) {
          return new NewReadyStates(value0);
      };
      return NewReadyStates;
  })();
  var SOWaiting = (function () {
      function SOWaiting(value0) {
          this.value0 = value0;
      };
      SOWaiting.create = function (value0) {
          return new SOWaiting(value0);
      };
      return SOWaiting;
  })();
  var SOInProgress = (function () {
      function SOInProgress(value0) {
          this.value0 = value0;
      };
      SOInProgress.create = function (value0) {
          return new SOInProgress(value0);
      };
      return SOInProgress;
  })();
  var unwrapLevelMap = function (v) {
      return v;
  };
  var unwrapGame = function (v) {
      return v;
  };
  var scalePos = function (s) {
      return function (v) {
          return {
              x: s * v.x,
              y: s * v.y
          };
      };
  };
  var redrawMap = Data_Lens_Lens.lens(function (s) {
      return s.redrawMap;
  })(function (s) {
      return function (x) {
          var $202 = {};
          for (var $203 in s) {
              if ({}.hasOwnProperty.call(s, $203)) {
                  $202[$203] = s[$203];
              };
          };
          $202.redrawMap = x;
          return $202;
      };
  });
  var readyStates = Data_Lens_Lens.lens(function (s) {
      return s.readyStates;
  })(function (s) {
      return function (x) {
          var $205 = {};
          for (var $206 in s) {
              if ({}.hasOwnProperty.call(s, $206)) {
                  $205[$206] = s[$206];
              };
          };
          $205.readyStates = x;
          return $205;
      };
  });
  var players = function (dictStrong) {
      return Data_Lens_Lens.lens(function (v) {
          return v.players;
      })(function (o) {
          return function (x) {
              return {
                  players: x,
                  countdown: o.countdown,
                  items: o.items,
                  map: o.map,
                  rampage: o.rampage,
                  safeZone: o.safeZone
              };
          };
      })(dictStrong);
  };
  var pY = function (dictStrong) {
      return Data_Lens_Lens.lens(function (v) {
          return v.y;
      })(function (v) {
          return function (y) {
              return Position({
                  x: v.x,
                  y: y
              });
          };
      })(dictStrong);
  };
  var pX = function (dictStrong) {
      return Data_Lens_Lens.lens(function (v) {
          return v.x;
      })(function (v) {
          return function (x) {
              return Position({
                  x: x,
                  y: v.y
              });
          };
      })(dictStrong);
  };
  var pScore = function (dictStrong) {
      return Data_Lens_Lens.lens(function (v) {
          return v.score;
      })(function (v) {
          return function (s) {
              return Player({
                  position: v.position,
                  direction: v.direction,
                  intendedDirection: v.intendedDirection,
                  score: s,
                  nomIndex: v.nomIndex,
                  respawnCounter: v.respawnCounter
              });
          };
      })(dictStrong);
  };
  var pRespawnCounter = function (dictStrong) {
      return Data_Lens_Lens.lens(function (v) {
          return v.respawnCounter;
      })(function (v) {
          return function (s) {
              return Player({
                  position: v.position,
                  direction: v.direction,
                  intendedDirection: v.intendedDirection,
                  score: v.score,
                  nomIndex: v.nomIndex,
                  respawnCounter: s
              });
          };
      })(dictStrong);
  };
  var pPosition = function (dictStrong) {
      return Data_Lens_Lens.lens(function (v) {
          return v.position;
      })(function (v) {
          return function (pos) {
              return Player({
                  position: pos,
                  direction: v.direction,
                  intendedDirection: v.intendedDirection,
                  score: v.score,
                  nomIndex: v.nomIndex,
                  respawnCounter: v.respawnCounter
              });
          };
      })(dictStrong);
  };
  var pNomIndex = function (dictStrong) {
      return Data_Lens_Lens.lens(function (v) {
          return v.nomIndex;
      })(function (v) {
          return function (s) {
              return Player({
                  position: v.position,
                  direction: v.direction,
                  intendedDirection: v.intendedDirection,
                  score: v.score,
                  nomIndex: s,
                  respawnCounter: v.respawnCounter
              });
          };
      })(dictStrong);
  };
  var pIntendedDirection = function (dictStrong) {
      return Data_Lens_Lens.lens(function (v) {
          return v.intendedDirection;
      })(function (v) {
          return function (dir) {
              return Player({
                  position: v.position,
                  direction: v.direction,
                  intendedDirection: dir,
                  score: v.score,
                  nomIndex: v.nomIndex,
                  respawnCounter: v.respawnCounter
              });
          };
      })(dictStrong);
  };
  var pDirection = function (dictStrong) {
      return Data_Lens_Lens.lens(function (v) {
          return v.direction;
      })(function (v) {
          return function (dir) {
              return Player({
                  position: v.position,
                  direction: dir,
                  intendedDirection: v.intendedDirection,
                  score: v.score,
                  nomIndex: v.nomIndex,
                  respawnCounter: v.respawnCounter
              });
          };
      })(dictStrong);
  }; 
  var opposite = function (d) {
      if (d instanceof Up) {
          return Down.value;
      };
      if (d instanceof Down) {
          return Up.value;
      };
      if (d instanceof Right) {
          return Left.value;
      };
      if (d instanceof Left) {
          return Right.value;
      };
      throw new Error("Failed pattern match at Types line 391, column 3 - line 395, column 18: " + [ d.constructor.name ]);
  };
  var nomIndexMax = 10;
  var matchMessage = function (dictMonad) {
      return function (f) {
          return function (msg) {
              return function (action) {
                  return Data_Maybe.maybe(Control_Applicative.pure(dictMonad.Applicative0())(Data_Unit.unit))(action)(f(msg));
              };
          };
      };
  };
  var items = function (dictStrong) {
      return Data_Lens_Lens.lens(function (v) {
          return v.items;
      })(function (o) {
          return function (x) {
              return {
                  items: x,
                  countdown: o.countdown,
                  map: o.map,
                  players: o.players,
                  rampage: o.rampage,
                  safeZone: o.safeZone
              };
          };
      })(dictStrong);
  };
  var iType = function (dictStrong) {
      return Data_Lens_Lens.lens(function (v) {
          return v.itemType;
      })(function (v) {
          return function (typ) {
              return Item({
                  position: v.position,
                  itemType: typ
              });
          };
      })(dictStrong);
  };
  var iPosition = function (dictStrong) {
      return Data_Lens_Lens.lens(function (v) {
          return v.position;
      })(function (v) {
          return function (pos) {
              return Item({
                  position: pos,
                  itemType: v.itemType
              });
          };
      })(dictStrong);
  }; 
  var genericWrappedGame = new Data_Generic_Rep.Generic(function (x) {
      return x;
  }, function (x) {
      return x;
  });
  var genericWaitingUpdate = new Data_Generic_Rep.Generic(function (x) {
      if (x instanceof GameStarting) {
          return new Data_Generic_Rep.Inl(x.value0);
      };
      if (x instanceof NewReadyStates) {
          return new Data_Generic_Rep.Inr(x.value0);
      };
      throw new Error("Failed pattern match at Types line 506, column 8 - line 506, column 64: " + [ x.constructor.name ]);
  }, function (x) {
      if (x instanceof Data_Generic_Rep.Inl) {
          return new GameStarting(x.value0);
      };
      if (x instanceof Data_Generic_Rep.Inr) {
          return new NewReadyStates(x.value0);
      };
      throw new Error("Failed pattern match at Types line 506, column 8 - line 506, column 64: " + [ x.constructor.name ]);
  });
  var genericTile = new Data_Generic_Rep.Generic(function (x) {
      if (x instanceof Intersection) {
          return new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value);
      };
      if (x instanceof TeeJunctionUp) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value));
      };
      if (x instanceof TeeJunctionRight) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value)));
      };
      if (x instanceof TeeJunctionDown) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value))));
      };
      if (x instanceof TeeJunctionLeft) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value)))));
      };
      if (x instanceof CornerUpRight) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value))))));
      };
      if (x instanceof CornerRightDown) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value)))))));
      };
      if (x instanceof CornerDownLeft) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value))))))));
      };
      if (x instanceof CornerLeftUp) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value)))))))));
      };
      if (x instanceof StraightHorizontal) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value))))))))));
      };
      if (x instanceof StraightVertical) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value)))))))))));
      };
      if (x instanceof Inaccessible) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(Data_Generic_Rep.NoArguments.value)))))))))));
      };
      throw new Error("Failed pattern match at Types line 169, column 8 - line 169, column 46: " + [ x.constructor.name ]);
  }, function (x) {
      if (x instanceof Data_Generic_Rep.Inl) {
          return Intersection.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
          return TeeJunctionUp.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inl)) {
          return TeeJunctionRight.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0 instanceof Data_Generic_Rep.Inl))) {
          return TeeJunctionDown.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))) {
          return TeeJunctionLeft.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl))))) {
          return CornerUpRight.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))))) {
          return CornerRightDown.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl))))))) {
          return CornerDownLeft.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))))))) {
          return CornerLeftUp.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl))))))))) {
          return StraightHorizontal.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))))))))) {
          return StraightVertical.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr)))))))))) {
          return Inaccessible.value;
      };
      throw new Error("Failed pattern match at Types line 169, column 8 - line 169, column 46: " + [ x.constructor.name ]);
  });              
  var genericServerOutgoingMessage = new Data_Generic_Rep.Generic(function (x) {
      if (x instanceof SOWaiting) {
          return new Data_Generic_Rep.Inl(x.value0);
      };
      if (x instanceof SOInProgress) {
          return new Data_Generic_Rep.Inr(x.value0);
      };
      throw new Error("Failed pattern match at Types line 556, column 8 - line 556, column 80: " + [ x.constructor.name ]);
  }, function (x) {
      if (x instanceof Data_Generic_Rep.Inl) {
          return new SOWaiting(x.value0);
      };
      if (x instanceof Data_Generic_Rep.Inr) {
          return new SOInProgress(x.value0);
      };
      throw new Error("Failed pattern match at Types line 556, column 8 - line 556, column 80: " + [ x.constructor.name ]);
  });
  var genericServerIncomingMessage = new Data_Generic_Rep.Generic(function (x) {
      if (x instanceof SIToggleReadyState) {
          return new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value);
      };
      if (x instanceof SIInProgress) {
          return new Data_Generic_Rep.Inr(x.value0);
      };
      throw new Error("Failed pattern match at Types line 570, column 8 - line 570, column 80: " + [ x.constructor.name ]);
  }, function (x) {
      if (x instanceof Data_Generic_Rep.Inl) {
          return SIToggleReadyState.value;
      };
      if (x instanceof Data_Generic_Rep.Inr) {
          return new SIInProgress(x.value0);
      };
      throw new Error("Failed pattern match at Types line 570, column 8 - line 570, column 80: " + [ x.constructor.name ]);
  });
  var genericReadyState = new Data_Generic_Rep.Generic(function (x) {
      if (x instanceof Ready) {
          return new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value);
      };
      if (x instanceof NotReady) {
          return new Data_Generic_Rep.Inr(Data_Generic_Rep.NoArguments.value);
      };
      throw new Error("Failed pattern match at Types line 489, column 8 - line 489, column 58: " + [ x.constructor.name ]);
  }, function (x) {
      if (x instanceof Data_Generic_Rep.Inl) {
          return Ready.value;
      };
      if (x instanceof Data_Generic_Rep.Inr) {
          return NotReady.value;
      };
      throw new Error("Failed pattern match at Types line 489, column 8 - line 489, column 58: " + [ x.constructor.name ]);
  });    
  var genericRampage = new Data_Generic_Rep.Generic(function (x) {
      if (x instanceof Rampaging) {
          return new Data_Generic_Rep.Inl(new Data_Generic_Rep.Product(x.value0, x.value1));
      };
      if (x instanceof Cooldown) {
          return new Data_Generic_Rep.Inr(x.value0);
      };
      throw new Error("Failed pattern match at Types line 456, column 8 - line 456, column 52: " + [ x.constructor.name ]);
  }, function (x) {
      if (x instanceof Data_Generic_Rep.Inl) {
          return new Rampaging(x.value0.value0, x.value0.value1);
      };
      if (x instanceof Data_Generic_Rep.Inr) {
          return new Cooldown(x.value0);
      };
      throw new Error("Failed pattern match at Types line 456, column 8 - line 456, column 52: " + [ x.constructor.name ]);
  });
  var genericPosition = new Data_Generic_Rep.Generic(function (x) {
      return x;
  }, function (x) {
      return x;
  });   
  var genericPlayerUpdate = new Data_Generic_Rep.Generic(function (x) {
      if (x instanceof ChangedDirection) {
          return new Data_Generic_Rep.Inl(x.value0);
      };
      if (x instanceof ChangedIntendedDirection) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0));
      };
      if (x instanceof ChangedPosition) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0)));
      };
      if (x instanceof ChangedScore) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0))));
      };
      if (x instanceof ChangedNomIndex) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0)))));
      };
      if (x instanceof ChangedRespawnCounter) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0))))));
      };
      if (x instanceof PlayerLeft) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(Data_Generic_Rep.NoArguments.value))))));
      };
      throw new Error("Failed pattern match at Types line 409, column 8 - line 409, column 62: " + [ x.constructor.name ]);
  }, function (x) {
      if (x instanceof Data_Generic_Rep.Inl) {
          return new ChangedDirection(x.value0);
      };
      if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
          return new ChangedIntendedDirection(x.value0.value0);
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inl)) {
          return new ChangedPosition(x.value0.value0.value0);
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0 instanceof Data_Generic_Rep.Inl))) {
          return new ChangedScore(x.value0.value0.value0.value0);
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))) {
          return new ChangedNomIndex(x.value0.value0.value0.value0.value0);
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl))))) {
          return new ChangedRespawnCounter(x.value0.value0.value0.value0.value0.value0);
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr))))) {
          return PlayerLeft.value;
      };
      throw new Error("Failed pattern match at Types line 409, column 8 - line 409, column 62: " + [ x.constructor.name ]);
  });
  var genericPlayerId = new Data_Generic_Rep.Generic(function (x) {
      if (x instanceof P1) {
          return new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value);
      };
      if (x instanceof P2) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value));
      };
      if (x instanceof P3) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value)));
      };
      if (x instanceof P4) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(Data_Generic_Rep.NoArguments.value)));
      };
      throw new Error("Failed pattern match at Types line 72, column 8 - line 72, column 54: " + [ x.constructor.name ]);
  }, function (x) {
      if (x instanceof Data_Generic_Rep.Inl) {
          return P1.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
          return P2.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inl)) {
          return P3.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inr)) {
          return P4.value;
      };
      throw new Error("Failed pattern match at Types line 72, column 8 - line 72, column 54: " + [ x.constructor.name ]);
  });
  var showPlayerId = new Data_Show.Show(Data_Generic_Rep_Show.genericShow(genericPlayerId)(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
      return "P1";
  })))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
      return "P2";
  })))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
      return "P3";
  })))(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
      return "P4";
  })))))));
  var genericPlayer = new Data_Generic_Rep.Generic(function (x) {
      return x;
  }, function (x) {
      return x;
  });
  var genericLevelMap = new Data_Generic_Rep.Generic(function (x) {
      return x;
  }, function (x) {
      return x;
  });
  var genericItemUpdate = new Data_Generic_Rep.Generic(function (x) {
      return Data_Generic_Rep.NoArguments.value;
  }, function (x) {
      return Eaten.value;
  });   
  var genericItemType = new Data_Generic_Rep.Generic(function (x) {
      if (x instanceof LittleDot) {
          return new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value);
      };
      if (x instanceof BigDot) {
          return new Data_Generic_Rep.Inr(Data_Generic_Rep.NoArguments.value);
      };
      throw new Error("Failed pattern match at Types line 365, column 8 - line 365, column 54: " + [ x.constructor.name ]);
  }, function (x) {
      if (x instanceof Data_Generic_Rep.Inl) {
          return LittleDot.value;
      };
      if (x instanceof Data_Generic_Rep.Inr) {
          return BigDot.value;
      };
      throw new Error("Failed pattern match at Types line 365, column 8 - line 365, column 54: " + [ x.constructor.name ]);
  });    
  var genericItem = new Data_Generic_Rep.Generic(function (x) {
      return x;
  }, function (x) {
      return x;
  });   
  var genericGameUpdate = new Data_Generic_Rep.Generic(function (x) {
      if (x instanceof GUPU) {
          return new Data_Generic_Rep.Inl(new Data_Generic_Rep.Product(x.value0, x.value1));
      };
      if (x instanceof GUIU) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(new Data_Generic_Rep.Product(x.value0, x.value1)));
      };
      if (x instanceof ChangedCountdown) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0)));
      };
      if (x instanceof GameEnded) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0))));
      };
      if (x instanceof ChangedRampage) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(x.value0))));
      };
      throw new Error("Failed pattern match at Types line 471, column 8 - line 471, column 58: " + [ x.constructor.name ]);
  }, function (x) {
      if (x instanceof Data_Generic_Rep.Inl) {
          return new GUPU(x.value0.value0, x.value0.value1);
      };
      if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
          return new GUIU(x.value0.value0.value0, x.value0.value0.value1);
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inl)) {
          return new ChangedCountdown(x.value0.value0.value0);
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0 instanceof Data_Generic_Rep.Inl))) {
          return new GameEnded(x.value0.value0.value0.value0);
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0 instanceof Data_Generic_Rep.Inr))) {
          return new ChangedRampage(x.value0.value0.value0.value0);
      };
      throw new Error("Failed pattern match at Types line 471, column 8 - line 471, column 58: " + [ x.constructor.name ]);
  });
  var genericGameEndReason = new Data_Generic_Rep.Generic(function (x) {
      if (x instanceof Completed) {
          return new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value);
      };
      if (x instanceof TooManyPlayersDisconnected) {
          return new Data_Generic_Rep.Inr(Data_Generic_Rep.NoArguments.value);
      };
      throw new Error("Failed pattern match at Types line 440, column 8 - line 440, column 64: " + [ x.constructor.name ]);
  }, function (x) {
      if (x instanceof Data_Generic_Rep.Inl) {
          return Completed.value;
      };
      if (x instanceof Data_Generic_Rep.Inr) {
          return TooManyPlayersDisconnected.value;
      };
      throw new Error("Failed pattern match at Types line 440, column 8 - line 440, column 64: " + [ x.constructor.name ]);
  });    
  var genericDirection = new Data_Generic_Rep.Generic(function (x) {
      if (x instanceof Up) {
          return new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value);
      };
      if (x instanceof Down) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value));
      };
      if (x instanceof Left) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value)));
      };
      if (x instanceof Right) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(Data_Generic_Rep.NoArguments.value)));
      };
      throw new Error("Failed pattern match at Types line 350, column 8 - line 350, column 56: " + [ x.constructor.name ]);
  }, function (x) {
      if (x instanceof Data_Generic_Rep.Inl) {
          return Up.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
          return Down.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inl)) {
          return Left.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inr)) {
          return Right.value;
      };
      throw new Error("Failed pattern match at Types line 350, column 8 - line 350, column 56: " + [ x.constructor.name ]);
  });         
  var genericBlock = new Data_Generic_Rep.Generic(function (x) {
      if (x instanceof Wall) {
          return new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value);
      };
      if (x instanceof Empty) {
          return new Data_Generic_Rep.Inr(Data_Generic_Rep.NoArguments.value);
      };
      throw new Error("Failed pattern match at Types line 140, column 8 - line 140, column 48: " + [ x.constructor.name ]);
  }, function (x) {
      if (x instanceof Data_Generic_Rep.Inl) {
          return Wall.value;
      };
      if (x instanceof Data_Generic_Rep.Inr) {
          return Empty.value;
      };
      throw new Error("Failed pattern match at Types line 140, column 8 - line 140, column 48: " + [ x.constructor.name ]);
  });
  var eqPlayerId = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof P1 && y instanceof P1) {
              return true;
          };
          if (x instanceof P2 && y instanceof P2) {
              return true;
          };
          if (x instanceof P3 && y instanceof P3) {
              return true;
          };
          if (x instanceof P4 && y instanceof P4) {
              return true;
          };
          return false;
      };
  });
  var ordPlayerId = new Data_Ord.Ord(function () {
      return eqPlayerId;
  }, function (x) {
      return function (y) {
          if (x instanceof P1 && y instanceof P1) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof P1) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof P1) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof P2 && y instanceof P2) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof P2) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof P2) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof P3 && y instanceof P3) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof P3) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof P3) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof P4 && y instanceof P4) {
              return Data_Ordering.EQ.value;
          };
          throw new Error("Failed pattern match at Types line 71, column 8 - line 71, column 44: " + [ x.constructor.name, y.constructor.name ]);
      };
  });
  var eqItemType = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof LittleDot && y instanceof LittleDot) {
              return true;
          };
          if (x instanceof BigDot && y instanceof BigDot) {
              return true;
          };
          return false;
      };
  });                                                               
  var encodeJsonDirection = new Data_Argonaut_Encode_Class.EncodeJson(Data_Argonaut_Encode_Generic_Rep.genericEncodeJson(genericDirection)(Data_Argonaut_Encode_Generic_Rep.encodeRepSum(Data_Argonaut_Encode_Generic_Rep.encodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "Up";
  }))(Data_Argonaut_Encode_Generic_Rep.encodeRepArgsNoArguments))(Data_Argonaut_Encode_Generic_Rep.encodeRepSum(Data_Argonaut_Encode_Generic_Rep.encodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "Down";
  }))(Data_Argonaut_Encode_Generic_Rep.encodeRepArgsNoArguments))(Data_Argonaut_Encode_Generic_Rep.encodeRepSum(Data_Argonaut_Encode_Generic_Rep.encodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "Left";
  }))(Data_Argonaut_Encode_Generic_Rep.encodeRepArgsNoArguments))(Data_Argonaut_Encode_Generic_Rep.encodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "Right";
  }))(Data_Argonaut_Encode_Generic_Rep.encodeRepArgsNoArguments))))));                                                                                        
  var eachPlayer$prime = function (dictApplicative) {
      return function (game) {
          return function (action) {
              var ps = Data_Map_Internal.toUnfoldable(Data_Unfoldable.unfoldableArray)(Data_Lens_Getter.viewOn(game)(players(Data_Lens_Internal_Forget.strongForget)));
              return Data_Foldable.for_(dictApplicative)(Data_Foldable.foldableArray)(ps)(Data_Tuple.uncurry(action));
          };
      };
  };
  var eachItem$prime = function (dictApplicative) {
      return function (game) {
          return function (action) {
              return Data_Foldable.for_(dictApplicative)(Data_Map_Internal.foldableMap)(Data_Lens_Getter.viewOn(game)(items(Data_Lens_Internal_Forget.strongForget)))(action);
          };
      };
  };
  var displayPlayerId = function (x) {
      if (x instanceof P1) {
          return "P1";
      };
      if (x instanceof P2) {
          return "P2";
      };
      if (x instanceof P3) {
          return "P3";
      };
      if (x instanceof P4) {
          return "P4";
      };
      throw new Error("Failed pattern match at Types line 83, column 3 - line 89, column 1: " + [ x.constructor.name ]);
  };
  var directionToRadians = function (d) {
      if (d instanceof Right) {
          return 0.0;
      };
      if (d instanceof Down) {
          return $$Math.pi / 2.0;
      };
      if (d instanceof Left) {
          return $$Math.pi;
      };
      if (d instanceof Up) {
          return (3.0 * $$Math.pi) / 2.0;
      };
      throw new Error("Failed pattern match at Types line 384, column 3 - line 390, column 1: " + [ d.constructor.name ]);
  };
  var dirToPos = function (v) {
      if (v instanceof Up) {
          return {
              x: 0.0,
              y: -1.0
          };
      };
      if (v instanceof Left) {
          return {
              x: -1.0,
              y: 0.0
          };
      };
      if (v instanceof Right) {
          return {
              x: 1.0,
              y: 0.0
          };
      };
      if (v instanceof Down) {
          return {
              x: 0.0,
              y: 1.0
          };
      };
      throw new Error("Failed pattern match at Types line 376, column 1 - line 376, column 34: " + [ v.constructor.name ]);
  };
  var decodeJsonTile = new Data_Argonaut_Decode_Class.DecodeJson(Data_Argonaut_Decode_Generic_Rep.genericDecodeJson(genericTile)(Data_Argonaut_Decode_Generic_Rep.decodeRepSum(Data_Argonaut_Decode_Generic_Rep.decodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "Intersection";
  }))(Data_Argonaut_Decode_Generic_Rep.decodeRepArgsNoArguments))(Data_Argonaut_Decode_Generic_Rep.decodeRepSum(Data_Argonaut_Decode_Generic_Rep.decodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "TeeJunctionUp";
  }))(Data_Argonaut_Decode_Generic_Rep.decodeRepArgsNoArguments))(Data_Argonaut_Decode_Generic_Rep.decodeRepSum(Data_Argonaut_Decode_Generic_Rep.decodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "TeeJunctionRight";
  }))(Data_Argonaut_Decode_Generic_Rep.decodeRepArgsNoArguments))(Data_Argonaut_Decode_Generic_Rep.decodeRepSum(Data_Argonaut_Decode_Generic_Rep.decodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "TeeJunctionDown";
  }))(Data_Argonaut_Decode_Generic_Rep.decodeRepArgsNoArguments))(Data_Argonaut_Decode_Generic_Rep.decodeRepSum(Data_Argonaut_Decode_Generic_Rep.decodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "TeeJunctionLeft";
  }))(Data_Argonaut_Decode_Generic_Rep.decodeRepArgsNoArguments))(Data_Argonaut_Decode_Generic_Rep.decodeRepSum(Data_Argonaut_Decode_Generic_Rep.decodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "CornerUpRight";
  }))(Data_Argonaut_Decode_Generic_Rep.decodeRepArgsNoArguments))(Data_Argonaut_Decode_Generic_Rep.decodeRepSum(Data_Argonaut_Decode_Generic_Rep.decodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "CornerRightDown";
  }))(Data_Argonaut_Decode_Generic_Rep.decodeRepArgsNoArguments))(Data_Argonaut_Decode_Generic_Rep.decodeRepSum(Data_Argonaut_Decode_Generic_Rep.decodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "CornerDownLeft";
  }))(Data_Argonaut_Decode_Generic_Rep.decodeRepArgsNoArguments))(Data_Argonaut_Decode_Generic_Rep.decodeRepSum(Data_Argonaut_Decode_Generic_Rep.decodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "CornerLeftUp";
  }))(Data_Argonaut_Decode_Generic_Rep.decodeRepArgsNoArguments))(Data_Argonaut_Decode_Generic_Rep.decodeRepSum(Data_Argonaut_Decode_Generic_Rep.decodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "StraightHorizontal";
  }))(Data_Argonaut_Decode_Generic_Rep.decodeRepArgsNoArguments))(Data_Argonaut_Decode_Generic_Rep.decodeRepSum(Data_Argonaut_Decode_Generic_Rep.decodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "StraightVertical";
  }))(Data_Argonaut_Decode_Generic_Rep.decodeRepArgsNoArguments))(Data_Argonaut_Decode_Generic_Rep.decodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "Inaccessible";
  }))(Data_Argonaut_Decode_Generic_Rep.decodeRepArgsNoArguments))))))))))))));
  var decodeJsonReadyState = new Data_Argonaut_Decode_Class.DecodeJson(Data_Argonaut_Decode_Generic_Rep.genericDecodeJson(genericReadyState)(Data_Argonaut_Decode_Generic_Rep.decodeRepSum(Data_Argonaut_Decode_Generic_Rep.decodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "Ready";
  }))(Data_Argonaut_Decode_Generic_Rep.decodeRepArgsNoArguments))(Data_Argonaut_Decode_Generic_Rep.decodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "NotReady";
  }))(Data_Argonaut_Decode_Generic_Rep.decodeRepArgsNoArguments))));
  var decodeJsonPosition = new Data_Argonaut_Decode_Class.DecodeJson(Data_Argonaut_Decode_Generic_Rep.genericDecodeJson(genericPosition)(Data_Argonaut_Decode_Generic_Rep.decodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "Position";
  }))(Data_Argonaut_Decode_Generic_Rep.decodeRepArgsArgument(Data_Argonaut_Decode_Class.decodeRecord(Data_Argonaut_Decode_Class.gDecodeJsonCons(Data_Argonaut_Decode_Class.decodeJsonNumber)(Data_Argonaut_Decode_Class.gDecodeJsonCons(Data_Argonaut_Decode_Class.decodeJsonNumber)(Data_Argonaut_Decode_Class.gDecodeJsonNil)(new Data_Symbol.IsSymbol(function () {
      return "y";
  }))()())(new Data_Symbol.IsSymbol(function () {
      return "x";
  }))()())()))));
  var decodeJsonPlayerId = new Data_Argonaut_Decode_Class.DecodeJson(Data_Argonaut_Decode_Generic_Rep.genericDecodeJson(genericPlayerId)(Data_Argonaut_Decode_Generic_Rep.decodeRepSum(Data_Argonaut_Decode_Generic_Rep.decodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "P1";
  }))(Data_Argonaut_Decode_Generic_Rep.decodeRepArgsNoArguments))(Data_Argonaut_Decode_Generic_Rep.decodeRepSum(Data_Argonaut_Decode_Generic_Rep.decodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "P2";
  }))(Data_Argonaut_Decode_Generic_Rep.decodeRepArgsNoArguments))(Data_Argonaut_Decode_Generic_Rep.decodeRepSum(Data_Argonaut_Decode_Generic_Rep.decodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "P3";
  }))(Data_Argonaut_Decode_Generic_Rep.decodeRepArgsNoArguments))(Data_Argonaut_Decode_Generic_Rep.decodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "P4";
  }))(Data_Argonaut_Decode_Generic_Rep.decodeRepArgsNoArguments))))));
  var decodeJsonRampage = new Data_Argonaut_Decode_Class.DecodeJson(Data_Argonaut_Decode_Generic_Rep.genericDecodeJson(genericRampage)(Data_Argonaut_Decode_Generic_Rep.decodeRepSum(Data_Argonaut_Decode_Generic_Rep.decodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "Rampaging";
  }))(Data_Argonaut_Decode_Generic_Rep.decodeRepArgsProduct(Data_Argonaut_Decode_Generic_Rep.decodeRepArgsArgument(decodeJsonPlayerId))(Data_Argonaut_Decode_Generic_Rep.decodeRepArgsArgument(Data_Argonaut_Decode_Class.decodeJsonInt))))(Data_Argonaut_Decode_Generic_Rep.decodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "Cooldown";
  }))(Data_Argonaut_Decode_Generic_Rep.decodeRepArgsArgument(Data_Argonaut_Decode_Class.decodeJsonInt)))));
  var decodeJsonItemUpdate = new Data_Argonaut_Decode_Class.DecodeJson(Data_Argonaut_Decode_Generic_Rep.genericDecodeJson(genericItemUpdate)(Data_Argonaut_Decode_Generic_Rep.decodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "Eaten";
  }))(Data_Argonaut_Decode_Generic_Rep.decodeRepArgsNoArguments)));
  var decodeJsonItemType = new Data_Argonaut_Decode_Class.DecodeJson(Data_Argonaut_Decode_Generic_Rep.genericDecodeJson(genericItemType)(Data_Argonaut_Decode_Generic_Rep.decodeRepSum(Data_Argonaut_Decode_Generic_Rep.decodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "LittleDot";
  }))(Data_Argonaut_Decode_Generic_Rep.decodeRepArgsNoArguments))(Data_Argonaut_Decode_Generic_Rep.decodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "BigDot";
  }))(Data_Argonaut_Decode_Generic_Rep.decodeRepArgsNoArguments))));
  var decodeJsonItem = new Data_Argonaut_Decode_Class.DecodeJson(Data_Argonaut_Decode_Generic_Rep.genericDecodeJson(genericItem)(Data_Argonaut_Decode_Generic_Rep.decodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "Item";
  }))(Data_Argonaut_Decode_Generic_Rep.decodeRepArgsArgument(Data_Argonaut_Decode_Class.decodeRecord(Data_Argonaut_Decode_Class.gDecodeJsonCons(decodeJsonItemType)(Data_Argonaut_Decode_Class.gDecodeJsonCons(decodeJsonPosition)(Data_Argonaut_Decode_Class.gDecodeJsonNil)(new Data_Symbol.IsSymbol(function () {
      return "position";
  }))()())(new Data_Symbol.IsSymbol(function () {
      return "itemType";
  }))()())()))));
  var decodeJsonGameEndReason = new Data_Argonaut_Decode_Class.DecodeJson(Data_Argonaut_Decode_Generic_Rep.genericDecodeJson(genericGameEndReason)(Data_Argonaut_Decode_Generic_Rep.decodeRepSum(Data_Argonaut_Decode_Generic_Rep.decodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "Completed";
  }))(Data_Argonaut_Decode_Generic_Rep.decodeRepArgsNoArguments))(Data_Argonaut_Decode_Generic_Rep.decodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "TooManyPlayersDisconnected";
  }))(Data_Argonaut_Decode_Generic_Rep.decodeRepArgsNoArguments))));
  var decodeJsonDirection = new Data_Argonaut_Decode_Class.DecodeJson(Data_Argonaut_Decode_Generic_Rep.genericDecodeJson(genericDirection)(Data_Argonaut_Decode_Generic_Rep.decodeRepSum(Data_Argonaut_Decode_Generic_Rep.decodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "Up";
  }))(Data_Argonaut_Decode_Generic_Rep.decodeRepArgsNoArguments))(Data_Argonaut_Decode_Generic_Rep.decodeRepSum(Data_Argonaut_Decode_Generic_Rep.decodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "Down";
  }))(Data_Argonaut_Decode_Generic_Rep.decodeRepArgsNoArguments))(Data_Argonaut_Decode_Generic_Rep.decodeRepSum(Data_Argonaut_Decode_Generic_Rep.decodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "Left";
  }))(Data_Argonaut_Decode_Generic_Rep.decodeRepArgsNoArguments))(Data_Argonaut_Decode_Generic_Rep.decodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "Right";
  }))(Data_Argonaut_Decode_Generic_Rep.decodeRepArgsNoArguments))))));
  var decodeJsonPlayer = new Data_Argonaut_Decode_Class.DecodeJson(Data_Argonaut_Decode_Generic_Rep.genericDecodeJson(genericPlayer)(Data_Argonaut_Decode_Generic_Rep.decodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "Player";
  }))(Data_Argonaut_Decode_Generic_Rep.decodeRepArgsArgument(Data_Argonaut_Decode_Class.decodeRecord(Data_Argonaut_Decode_Class.gDecodeJsonCons(Data_Argonaut_Decode_Class.decodeJsonMaybe(decodeJsonDirection))(Data_Argonaut_Decode_Class.gDecodeJsonCons(Data_Argonaut_Decode_Class.decodeJsonMaybe(decodeJsonDirection))(Data_Argonaut_Decode_Class.gDecodeJsonCons(Data_Argonaut_Decode_Class.decodeJsonInt)(Data_Argonaut_Decode_Class.gDecodeJsonCons(decodeJsonPosition)(Data_Argonaut_Decode_Class.gDecodeJsonCons(Data_Argonaut_Decode_Class.decodeJsonMaybe(Data_Argonaut_Decode_Class.decodeJsonInt))(Data_Argonaut_Decode_Class.gDecodeJsonCons(Data_Argonaut_Decode_Class.decodeJsonInt)(Data_Argonaut_Decode_Class.gDecodeJsonNil)(new Data_Symbol.IsSymbol(function () {
      return "score";
  }))()())(new Data_Symbol.IsSymbol(function () {
      return "respawnCounter";
  }))()())(new Data_Symbol.IsSymbol(function () {
      return "position";
  }))()())(new Data_Symbol.IsSymbol(function () {
      return "nomIndex";
  }))()())(new Data_Symbol.IsSymbol(function () {
      return "intendedDirection";
  }))()())(new Data_Symbol.IsSymbol(function () {
      return "direction";
  }))()())()))));
  var decodeJsonPlayerUpdate = new Data_Argonaut_Decode_Class.DecodeJson(Data_Argonaut_Decode_Generic_Rep.genericDecodeJson(genericPlayerUpdate)(Data_Argonaut_Decode_Generic_Rep.decodeRepSum(Data_Argonaut_Decode_Generic_Rep.decodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "ChangedDirection";
  }))(Data_Argonaut_Decode_Generic_Rep.decodeRepArgsArgument(Data_Argonaut_Decode_Class.decodeJsonMaybe(decodeJsonDirection))))(Data_Argonaut_Decode_Generic_Rep.decodeRepSum(Data_Argonaut_Decode_Generic_Rep.decodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "ChangedIntendedDirection";
  }))(Data_Argonaut_Decode_Generic_Rep.decodeRepArgsArgument(Data_Argonaut_Decode_Class.decodeJsonMaybe(decodeJsonDirection))))(Data_Argonaut_Decode_Generic_Rep.decodeRepSum(Data_Argonaut_Decode_Generic_Rep.decodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "ChangedPosition";
  }))(Data_Argonaut_Decode_Generic_Rep.decodeRepArgsArgument(decodeJsonPosition)))(Data_Argonaut_Decode_Generic_Rep.decodeRepSum(Data_Argonaut_Decode_Generic_Rep.decodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "ChangedScore";
  }))(Data_Argonaut_Decode_Generic_Rep.decodeRepArgsArgument(Data_Argonaut_Decode_Class.decodeJsonInt)))(Data_Argonaut_Decode_Generic_Rep.decodeRepSum(Data_Argonaut_Decode_Generic_Rep.decodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "ChangedNomIndex";
  }))(Data_Argonaut_Decode_Generic_Rep.decodeRepArgsArgument(Data_Argonaut_Decode_Class.decodeJsonInt)))(Data_Argonaut_Decode_Generic_Rep.decodeRepSum(Data_Argonaut_Decode_Generic_Rep.decodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "ChangedRespawnCounter";
  }))(Data_Argonaut_Decode_Generic_Rep.decodeRepArgsArgument(Data_Argonaut_Decode_Class.decodeJsonMaybe(Data_Argonaut_Decode_Class.decodeJsonInt))))(Data_Argonaut_Decode_Generic_Rep.decodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "PlayerLeft";
  }))(Data_Argonaut_Decode_Generic_Rep.decodeRepArgsNoArguments)))))))));
  var decodeJsonGameUpdate = new Data_Argonaut_Decode_Class.DecodeJson(Data_Argonaut_Decode_Generic_Rep.genericDecodeJson(genericGameUpdate)(Data_Argonaut_Decode_Generic_Rep.decodeRepSum(Data_Argonaut_Decode_Generic_Rep.decodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "GUPU";
  }))(Data_Argonaut_Decode_Generic_Rep.decodeRepArgsProduct(Data_Argonaut_Decode_Generic_Rep.decodeRepArgsArgument(decodeJsonPlayerId))(Data_Argonaut_Decode_Generic_Rep.decodeRepArgsArgument(decodeJsonPlayerUpdate))))(Data_Argonaut_Decode_Generic_Rep.decodeRepSum(Data_Argonaut_Decode_Generic_Rep.decodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "GUIU";
  }))(Data_Argonaut_Decode_Generic_Rep.decodeRepArgsProduct(Data_Argonaut_Decode_Generic_Rep.decodeRepArgsArgument(Data_Argonaut_Decode_Class.decodeJsonInt))(Data_Argonaut_Decode_Generic_Rep.decodeRepArgsArgument(decodeJsonItemUpdate))))(Data_Argonaut_Decode_Generic_Rep.decodeRepSum(Data_Argonaut_Decode_Generic_Rep.decodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "ChangedCountdown";
  }))(Data_Argonaut_Decode_Generic_Rep.decodeRepArgsArgument(Data_Argonaut_Decode_Class.decodeJsonMaybe(Data_Argonaut_Decode_Class.decodeJsonInt))))(Data_Argonaut_Decode_Generic_Rep.decodeRepSum(Data_Argonaut_Decode_Generic_Rep.decodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "GameEnded";
  }))(Data_Argonaut_Decode_Generic_Rep.decodeRepArgsArgument(decodeJsonGameEndReason)))(Data_Argonaut_Decode_Generic_Rep.decodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "ChangedRampage";
  }))(Data_Argonaut_Decode_Generic_Rep.decodeRepArgsArgument(Data_Argonaut_Decode_Class.decodeJsonMaybe(decodeJsonRampage)))))))));
  var decodeJsonBlock = new Data_Argonaut_Decode_Class.DecodeJson(Data_Argonaut_Decode_Generic_Rep.genericDecodeJson(genericBlock)(Data_Argonaut_Decode_Generic_Rep.decodeRepSum(Data_Argonaut_Decode_Generic_Rep.decodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "Wall";
  }))(Data_Argonaut_Decode_Generic_Rep.decodeRepArgsNoArguments))(Data_Argonaut_Decode_Generic_Rep.decodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "Empty";
  }))(Data_Argonaut_Decode_Generic_Rep.decodeRepArgsNoArguments))));
  var decodeJsonWrappedLevelMap = new Data_Argonaut_Decode_Class.DecodeJson(Data_Argonaut_Decode_Generic_Rep.genericDecodeJson(genericLevelMap)(Data_Argonaut_Decode_Generic_Rep.decodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "WrappedLevelMap";
  }))(Data_Argonaut_Decode_Generic_Rep.decodeRepArgsArgument(Data_Argonaut_Decode_Class.decodeRecord(Data_Argonaut_Decode_Class.gDecodeJsonCons(Data_Argonaut_Decode_Class.decodeArray(Data_Argonaut_Decode_Class.decodeArray(decodeJsonBlock)))(Data_Argonaut_Decode_Class.gDecodeJsonCons(Data_Argonaut_Decode_Class.decodeArray(Data_Argonaut_Decode_Class.decodeArray(decodeJsonTile)))(Data_Argonaut_Decode_Class.gDecodeJsonNil)(new Data_Symbol.IsSymbol(function () {
      return "tiles";
  }))()())(new Data_Symbol.IsSymbol(function () {
      return "blocks";
  }))()())()))));
  var decodeJsonWrappedGame = new Data_Argonaut_Decode_Class.DecodeJson(Data_Argonaut_Decode_Generic_Rep.genericDecodeJson(genericWrappedGame)(Data_Argonaut_Decode_Generic_Rep.decodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "WrappedGame";
  }))(Data_Argonaut_Decode_Generic_Rep.decodeRepArgsArgument(Data_Argonaut_Decode_Class.decodeRecord(Data_Argonaut_Decode_Class.gDecodeJsonCons(Data_Argonaut_Decode_Class.decodeJsonMaybe(Data_Argonaut_Decode_Class.decodeJsonInt))(Data_Argonaut_Decode_Class.gDecodeJsonCons(Data_Argonaut_Decode_Class.decodeMap(Data_Ord.ordInt)(Data_Argonaut_Decode_Class.decodeJsonInt)(decodeJsonItem))(Data_Argonaut_Decode_Class.gDecodeJsonCons(decodeJsonWrappedLevelMap)(Data_Argonaut_Decode_Class.gDecodeJsonCons(Data_Argonaut_Decode_Class.decodeMap(ordPlayerId)(decodeJsonPlayerId)(decodeJsonPlayer))(Data_Argonaut_Decode_Class.gDecodeJsonCons(Data_Argonaut_Decode_Class.decodeJsonMaybe(decodeJsonRampage))(Data_Argonaut_Decode_Class.gDecodeJsonCons(Data_Argonaut_Decode_Class.decodeArray(decodeJsonPosition))(Data_Argonaut_Decode_Class.gDecodeJsonNil)(new Data_Symbol.IsSymbol(function () {
      return "safeZone";
  }))()())(new Data_Symbol.IsSymbol(function () {
      return "rampage";
  }))()())(new Data_Symbol.IsSymbol(function () {
      return "players";
  }))()())(new Data_Symbol.IsSymbol(function () {
      return "map";
  }))()())(new Data_Symbol.IsSymbol(function () {
      return "items";
  }))()())(new Data_Symbol.IsSymbol(function () {
      return "countdown";
  }))()())()))));
  var decodeJsonWaitingUpdate = new Data_Argonaut_Decode_Class.DecodeJson(Data_Argonaut_Decode_Generic_Rep.genericDecodeJson(genericWaitingUpdate)(Data_Argonaut_Decode_Generic_Rep.decodeRepSum(Data_Argonaut_Decode_Generic_Rep.decodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "GameStarting";
  }))(Data_Argonaut_Decode_Generic_Rep.decodeRepArgsArgument(decodeJsonWrappedGame)))(Data_Argonaut_Decode_Generic_Rep.decodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "NewReadyStates";
  }))(Data_Argonaut_Decode_Generic_Rep.decodeRepArgsArgument(Data_Argonaut_Decode_Class.decodeMap(ordPlayerId)(decodeJsonPlayerId)(decodeJsonReadyState))))));
  var backgroundCleared = Data_Lens_Lens.lens(function (s) {
      return s.backgroundCleared;
  })(function (s) {
      return function (x) {
          var $531 = {};
          for (var $532 in s) {
              if ({}.hasOwnProperty.call(s, $532)) {
                  $531[$532] = s[$532];
              };
          };
          $531.backgroundCleared = x;
          return $531;
      };
  });
  var asWaitingMessageO = function (v) {
      if (v instanceof SOWaiting) {
          return new Data_Maybe.Just(v.value0);
      };
      return Data_Maybe.Nothing.value;
  };
  var asInProgressMessageO = function (v) {
      if (v instanceof SOInProgress) {
          return new Data_Maybe.Just(v.value0);
      };
      return Data_Maybe.Nothing.value;
  };
  var allPlayerIds = [ P1.value, P2.value, P3.value, P4.value ];
  var addPos = function (v) {
      return function (v1) {
          return {
              x: v.x + v1.x,
              y: v.y + v1.y
          };
      };
  };
  exports["unwrapGame"] = unwrapGame;
  exports["P1"] = P1;
  exports["P2"] = P2;
  exports["P3"] = P3;
  exports["P4"] = P4;
  exports["displayPlayerId"] = displayPlayerId;
  exports["allPlayerIds"] = allPlayerIds;
  exports["unwrapLevelMap"] = unwrapLevelMap;
  exports["Wall"] = Wall;
  exports["Empty"] = Empty;
  exports["Intersection"] = Intersection;
  exports["TeeJunctionUp"] = TeeJunctionUp;
  exports["TeeJunctionRight"] = TeeJunctionRight;
  exports["TeeJunctionDown"] = TeeJunctionDown;
  exports["TeeJunctionLeft"] = TeeJunctionLeft;
  exports["CornerUpRight"] = CornerUpRight;
  exports["CornerRightDown"] = CornerRightDown;
  exports["CornerDownLeft"] = CornerDownLeft;
  exports["CornerLeftUp"] = CornerLeftUp;
  exports["StraightHorizontal"] = StraightHorizontal;
  exports["StraightVertical"] = StraightVertical;
  exports["Inaccessible"] = Inaccessible;
  exports["Position"] = Position;
  exports["addPos"] = addPos;
  exports["scalePos"] = scalePos;
  exports["Player"] = Player;
  exports["nomIndexMax"] = nomIndexMax;
  exports["players"] = players;
  exports["items"] = items;
  exports["pPosition"] = pPosition;
  exports["pDirection"] = pDirection;
  exports["pIntendedDirection"] = pIntendedDirection;
  exports["pScore"] = pScore;
  exports["pNomIndex"] = pNomIndex;
  exports["pRespawnCounter"] = pRespawnCounter;
  exports["eachPlayer'"] = eachPlayer$prime;
  exports["Item"] = Item;
  exports["iType"] = iType;
  exports["iPosition"] = iPosition;
  exports["pX"] = pX;
  exports["pY"] = pY;
  exports["eachItem'"] = eachItem$prime;
  exports["Up"] = Up;
  exports["Down"] = Down;
  exports["Left"] = Left;
  exports["Right"] = Right;
  exports["LittleDot"] = LittleDot;
  exports["BigDot"] = BigDot;
  exports["dirToPos"] = dirToPos;
  exports["directionToRadians"] = directionToRadians;
  exports["opposite"] = opposite;
  exports["ChangedDirection"] = ChangedDirection;
  exports["ChangedIntendedDirection"] = ChangedIntendedDirection;
  exports["ChangedPosition"] = ChangedPosition;
  exports["ChangedScore"] = ChangedScore;
  exports["ChangedNomIndex"] = ChangedNomIndex;
  exports["ChangedRespawnCounter"] = ChangedRespawnCounter;
  exports["PlayerLeft"] = PlayerLeft;
  exports["Eaten"] = Eaten;
  exports["Completed"] = Completed;
  exports["TooManyPlayersDisconnected"] = TooManyPlayersDisconnected;
  exports["Rampaging"] = Rampaging;
  exports["Cooldown"] = Cooldown;
  exports["GUPU"] = GUPU;
  exports["GUIU"] = GUIU;
  exports["ChangedCountdown"] = ChangedCountdown;
  exports["GameEnded"] = GameEnded;
  exports["ChangedRampage"] = ChangedRampage;
  exports["Ready"] = Ready;
  exports["NotReady"] = NotReady;
  exports["GameStarting"] = GameStarting;
  exports["NewReadyStates"] = NewReadyStates;
  exports["SOWaiting"] = SOWaiting;
  exports["SOInProgress"] = SOInProgress;
  exports["asWaitingMessageO"] = asWaitingMessageO;
  exports["asInProgressMessageO"] = asInProgressMessageO;
  exports["SIToggleReadyState"] = SIToggleReadyState;
  exports["SIInProgress"] = SIInProgress;
  exports["matchMessage"] = matchMessage;
  exports["CWaitingForPlayers"] = CWaitingForPlayers;
  exports["CInProgress"] = CInProgress;
  exports["redrawMap"] = redrawMap;
  exports["backgroundCleared"] = backgroundCleared;
  exports["readyStates"] = readyStates;
  exports["genericWrappedGame"] = genericWrappedGame;
  exports["decodeJsonWrappedGame"] = decodeJsonWrappedGame;
  exports["eqPlayerId"] = eqPlayerId;
  exports["ordPlayerId"] = ordPlayerId;
  exports["genericPlayerId"] = genericPlayerId;
  exports["decodeJsonPlayerId"] = decodeJsonPlayerId;
  exports["showPlayerId"] = showPlayerId;
  exports["genericLevelMap"] = genericLevelMap;
  exports["decodeJsonWrappedLevelMap"] = decodeJsonWrappedLevelMap;
  exports["genericBlock"] = genericBlock;
  exports["decodeJsonBlock"] = decodeJsonBlock;
  exports["genericTile"] = genericTile;
  exports["decodeJsonTile"] = decodeJsonTile;
  exports["genericPosition"] = genericPosition;
  exports["decodeJsonPosition"] = decodeJsonPosition;
  exports["genericPlayer"] = genericPlayer;
  exports["decodeJsonPlayer"] = decodeJsonPlayer;
  exports["genericItem"] = genericItem;
  exports["decodeJsonItem"] = decodeJsonItem;
  exports["genericDirection"] = genericDirection;
  exports["encodeJsonDirection"] = encodeJsonDirection;
  exports["decodeJsonDirection"] = decodeJsonDirection;
  exports["eqItemType"] = eqItemType;
  exports["genericItemType"] = genericItemType;
  exports["decodeJsonItemType"] = decodeJsonItemType;
  exports["genericPlayerUpdate"] = genericPlayerUpdate;
  exports["decodeJsonPlayerUpdate"] = decodeJsonPlayerUpdate;
  exports["genericItemUpdate"] = genericItemUpdate;
  exports["decodeJsonItemUpdate"] = decodeJsonItemUpdate;
  exports["genericGameEndReason"] = genericGameEndReason;
  exports["decodeJsonGameEndReason"] = decodeJsonGameEndReason;
  exports["genericRampage"] = genericRampage;
  exports["decodeJsonRampage"] = decodeJsonRampage;
  exports["genericGameUpdate"] = genericGameUpdate;
  exports["decodeJsonGameUpdate"] = decodeJsonGameUpdate;
  exports["genericReadyState"] = genericReadyState;
  exports["decodeJsonReadyState"] = decodeJsonReadyState;
  exports["genericWaitingUpdate"] = genericWaitingUpdate;
  exports["decodeJsonWaitingUpdate"] = decodeJsonWaitingUpdate;
  exports["genericServerOutgoingMessage"] = genericServerOutgoingMessage;
  exports["genericServerIncomingMessage"] = genericServerIncomingMessage;
})(PS["Types"] = PS["Types"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Generic_Rep = PS["Data.Generic.Rep"];
  var Data_Map = PS["Data.Map"];
  var Data_Maybe = PS["Data.Maybe"];
  var Prelude = PS["Prelude"];
  var Types = PS["Types"];                 
  var NewPlayer = (function () {
      function NewPlayer(value0) {
          this.value0 = value0;
      };
      NewPlayer.create = function (value0) {
          return new NewPlayer(value0);
      };
      return NewPlayer;
  })();
  var YourPlayerIdIs = (function () {
      function YourPlayerIdIs(value0) {
          this.value0 = value0;
      };
      YourPlayerIdIs.create = function (value0) {
          return new YourPlayerIdIs(value0);
      };
      return YourPlayerIdIs;
  })();
  var genericInternalMessage = new Data_Generic_Rep.Generic(function (x) {
      if (x instanceof NewPlayer) {
          return new Data_Generic_Rep.Inl(x.value0);
      };
      if (x instanceof YourPlayerIdIs) {
          return new Data_Generic_Rep.Inr(x.value0);
      };
      throw new Error("Failed pattern match at BaseCommon line 15, column 8 - line 15, column 67: " + [ x.constructor.name ]);
  }, function (x) {
      if (x instanceof Data_Generic_Rep.Inl) {
          return new NewPlayer(x.value0);
      };
      if (x instanceof Data_Generic_Rep.Inr) {
          return new YourPlayerIdIs(x.value0);
      };
      throw new Error("Failed pattern match at BaseCommon line 15, column 8 - line 15, column 67: " + [ x.constructor.name ]);
  });
  exports["NewPlayer"] = NewPlayer;
  exports["YourPlayerIdIs"] = YourPlayerIdIs;
  exports["genericInternalMessage"] = genericInternalMessage;
})(PS["BaseCommon"] = PS["BaseCommon"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];                 
  var MonadThrow = function (Monad0, throwError) {
      this.Monad0 = Monad0;
      this.throwError = throwError;
  };
  var throwError = function (dict) {
      return dict.throwError;
  };
  exports["throwError"] = throwError;
  exports["MonadThrow"] = MonadThrow;
})(PS["Control.Monad.Error.Class"] = PS["Control.Monad.Error.Class"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Functor = PS["Data.Functor"];
  var Prelude = PS["Prelude"];                 
  var MonadAsk = function (Monad0, ask) {
      this.Monad0 = Monad0;
      this.ask = ask;
  };
  var MonadReader = function (MonadAsk0, local) {
      this.MonadAsk0 = MonadAsk0;
      this.local = local;
  };                                                                           
  var local = function (dict) {
      return dict.local;
  };
  var ask = function (dict) {
      return dict.ask;
  };
  exports["ask"] = ask;
  exports["local"] = local;
  exports["MonadAsk"] = MonadAsk;
  exports["MonadReader"] = MonadReader;
})(PS["Control.Monad.Reader.Class"] = PS["Control.Monad.Reader.Class"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Prelude = PS["Prelude"];                 
  var MonadTrans = function (lift) {
      this.lift = lift;
  };
  var lift = function (dict) {
      return dict.lift;
  };
  exports["lift"] = lift;
  exports["MonadTrans"] = MonadTrans;
})(PS["Control.Monad.Trans.Class"] = PS["Control.Monad.Trans.Class"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Cont_Class = PS["Control.Monad.Cont.Class"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Tuple = PS["Data.Tuple"];
  var Effect_Class = PS["Effect.Class"];
  var Prelude = PS["Prelude"];                 
  var ExceptT = function (x) {
      return x;
  };
  var newtypeExceptT = new Data_Newtype.Newtype(function (n) {
      return n;
  }, ExceptT);
  var mapExceptT = function (f) {
      return function (v) {
          return f(v);
      };
  };
  var functorExceptT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return mapExceptT(Data_Functor.map(dictFunctor)(Data_Functor.map(Data_Either.functorEither)(f)));
      });
  };
  var monadExceptT = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeExceptT(dictMonad);
      }, function () {
          return bindExceptT(dictMonad);
      });
  };
  var bindExceptT = function (dictMonad) {
      return new Control_Bind.Bind(function () {
          return applyExceptT(dictMonad);
      }, function (v) {
          return function (k) {
              return Control_Bind.bind(dictMonad.Bind1())(v)(Data_Either.either(function ($97) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(Data_Either.Left.create($97));
              })(function (a) {
                  var v1 = k(a);
                  return v1;
              }));
          };
      });
  };
  var applyExceptT = function (dictMonad) {
      return new Control_Apply.Apply(function () {
          return functorExceptT(((dictMonad.Bind1()).Apply0()).Functor0());
      }, Control_Monad.ap(monadExceptT(dictMonad)));
  };
  var applicativeExceptT = function (dictMonad) {
      return new Control_Applicative.Applicative(function () {
          return applyExceptT(dictMonad);
      }, function ($98) {
          return ExceptT(Control_Applicative.pure(dictMonad.Applicative0())(Data_Either.Right.create($98)));
      });
  };
  var monadThrowExceptT = function (dictMonad) {
      return new Control_Monad_Error_Class.MonadThrow(function () {
          return monadExceptT(dictMonad);
      }, function ($102) {
          return ExceptT(Control_Applicative.pure(dictMonad.Applicative0())(Data_Either.Left.create($102)));
      });
  };
  exports["ExceptT"] = ExceptT;
  exports["mapExceptT"] = mapExceptT;
  exports["newtypeExceptT"] = newtypeExceptT;
  exports["functorExceptT"] = functorExceptT;
  exports["applyExceptT"] = applyExceptT;
  exports["applicativeExceptT"] = applicativeExceptT;
  exports["bindExceptT"] = bindExceptT;
  exports["monadExceptT"] = monadExceptT;
  exports["monadThrowExceptT"] = monadThrowExceptT;
})(PS["Control.Monad.Except.Trans"] = PS["Control.Monad.Except.Trans"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Effect_Class = PS["Effect.Class"];
  var Prelude = PS["Prelude"];                 
  var RWSResult = (function () {
      function RWSResult(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      RWSResult.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new RWSResult(value0, value1, value2);
              };
          };
      };
      return RWSResult;
  })();
  var runRWST = function (v) {
      return v;
  };       
  var monadTransRWST = function (dictMonoid) {
      return new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
          return function (m) {
              return function (v) {
                  return function (s) {
                      return Control_Bind.bind(dictMonad.Bind1())(m)(function (a) {
                          return Control_Applicative.pure(dictMonad.Applicative0())(new RWSResult(s, a, Data_Monoid.mempty(dictMonoid)));
                      });
                  };
              };
          };
      });
  }; 
  var functorRWST = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return function (v) {
              return function (r) {
                  return function (s) {
                      return Data_Functor.map(dictFunctor)(function (v1) {
                          return new RWSResult(v1.value0, f(v1.value1), v1.value2);
                      })(v(r)(s));
                  };
              };
          };
      });
  };
  var applyRWST = function (dictBind) {
      return function (dictMonoid) {
          return new Control_Apply.Apply(function () {
              return functorRWST((dictBind.Apply0()).Functor0());
          }, function (v) {
              return function (v1) {
                  return function (r) {
                      return function (s) {
                          return Control_Bind.bind(dictBind)(v(r)(s))(function (v2) {
                              return Data_Functor.mapFlipped((dictBind.Apply0()).Functor0())(v1(r)(v2.value0))(function (v3) {
                                  return new RWSResult(v3.value0, v2.value1(v3.value1), Data_Semigroup.append(dictMonoid.Semigroup0())(v2.value2)(v3.value2));
                              });
                          });
                      };
                  };
              };
          });
      };
  };
  var bindRWST = function (dictBind) {
      return function (dictMonoid) {
          return new Control_Bind.Bind(function () {
              return applyRWST(dictBind)(dictMonoid);
          }, function (v) {
              return function (f) {
                  return function (r) {
                      return function (s) {
                          return Control_Bind.bind(dictBind)(v(r)(s))(function (v1) {
                              var v2 = f(v1.value1);
                              return Data_Functor.mapFlipped((dictBind.Apply0()).Functor0())(v2(r)(v1.value0))(function (v3) {
                                  return new RWSResult(v3.value0, v3.value1, Data_Semigroup.append(dictMonoid.Semigroup0())(v1.value2)(v3.value2));
                              });
                          });
                      };
                  };
              };
          });
      };
  };
  var applicativeRWST = function (dictMonad) {
      return function (dictMonoid) {
          return new Control_Applicative.Applicative(function () {
              return applyRWST(dictMonad.Bind1())(dictMonoid);
          }, function (a) {
              return function (v) {
                  return function (s) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(new RWSResult(s, a, Data_Monoid.mempty(dictMonoid)));
                  };
              };
          });
      };
  };
  var monadRWST = function (dictMonad) {
      return function (dictMonoid) {
          return new Control_Monad.Monad(function () {
              return applicativeRWST(dictMonad)(dictMonoid);
          }, function () {
              return bindRWST(dictMonad.Bind1())(dictMonoid);
          });
      };
  };
  var monadAskRWST = function (dictMonad) {
      return function (dictMonoid) {
          return new Control_Monad_Reader_Class.MonadAsk(function () {
              return monadRWST(dictMonad)(dictMonoid);
          }, function (r) {
              return function (s) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(new RWSResult(s, r, Data_Monoid.mempty(dictMonoid)));
              };
          });
      };
  };
  var monadReaderRWST = function (dictMonad) {
      return function (dictMonoid) {
          return new Control_Monad_Reader_Class.MonadReader(function () {
              return monadAskRWST(dictMonad)(dictMonoid);
          }, function (f) {
              return function (m) {
                  return function (r) {
                      return function (s) {
                          return m(f(r))(s);
                      };
                  };
              };
          });
      };
  };
  var monadStateRWST = function (dictMonad) {
      return function (dictMonoid) {
          return new Control_Monad_State_Class.MonadState(function () {
              return monadRWST(dictMonad)(dictMonoid);
          }, function (f) {
              return function (v) {
                  return function (s) {
                      var v1 = f(s);
                      return Control_Applicative.pure(dictMonad.Applicative0())(new RWSResult(v1.value1, v1.value0, Data_Monoid.mempty(dictMonoid)));
                  };
              };
          });
      };
  };
  var monadTellRWST = function (dictMonad) {
      return function (dictMonoid) {
          return new Control_Monad_Writer_Class.MonadTell(function () {
              return monadRWST(dictMonad)(dictMonoid);
          }, function (w) {
              return function (v) {
                  return function (s) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(new RWSResult(s, Data_Unit.unit, w));
                  };
              };
          });
      };
  };
  var monadWriterRWST = function (dictMonad) {
      return function (dictMonoid) {
          return new Control_Monad_Writer_Class.MonadWriter(function () {
              return monadTellRWST(dictMonad)(dictMonoid);
          }, function (m) {
              return function (r) {
                  return function (s) {
                      return Control_Bind.bind(dictMonad.Bind1())(m(r)(s))(function (v) {
                          return Control_Applicative.pure(dictMonad.Applicative0())(new RWSResult(v.value0, new Data_Tuple.Tuple(v.value1, v.value2), v.value2));
                      });
                  };
              };
          }, function (m) {
              return function (r) {
                  return function (s) {
                      return Control_Bind.bind(dictMonad.Bind1())(m(r)(s))(function (v) {
                          return Control_Applicative.pure(dictMonad.Applicative0())(new RWSResult(v.value0, v.value1.value0, v.value1.value1(v.value2)));
                      });
                  };
              };
          });
      };
  };
  exports["RWSResult"] = RWSResult;
  exports["runRWST"] = runRWST;
  exports["functorRWST"] = functorRWST;
  exports["applyRWST"] = applyRWST;
  exports["bindRWST"] = bindRWST;
  exports["applicativeRWST"] = applicativeRWST;
  exports["monadRWST"] = monadRWST;
  exports["monadTransRWST"] = monadTransRWST;
  exports["monadAskRWST"] = monadAskRWST;
  exports["monadReaderRWST"] = monadReaderRWST;
  exports["monadStateRWST"] = monadStateRWST;
  exports["monadTellRWST"] = monadTellRWST;
  exports["monadWriterRWST"] = monadWriterRWST;
})(PS["Control.Monad.RWS.Trans"] = PS["Control.Monad.RWS.Trans"] || {});
(function(exports) {
    "use strict";

  exports.log = function (s) {
    return function () {
      console.log(s);
      return {};
    };
  };

  exports.error = function (s) {
    return function () {
      console.error(s);
      return {};
    };
  };
})(PS["Effect.Console"] = PS["Effect.Console"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Effect.Console"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Effect = PS["Effect"];
  exports["log"] = $foreign.log;
  exports["error"] = $foreign.error;
})(PS["Effect.Console"] = PS["Effect.Console"] || {});
(function(exports) {
    "use strict";

  exports.unsafeFromForeign = function (value) {
    return value;
  };

  exports.tagOf = function (value) {
    return Object.prototype.toString.call(value).slice(8, -1);
  };
})(PS["Foreign"] = PS["Foreign"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semigroup_Foldable = PS["Data.Semigroup.Foldable"];
  var Data_Semigroup_Traversable = PS["Data.Semigroup.Traversable"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var singleton = function ($165) {
      return Data_List_Types.NonEmptyList(Data_NonEmpty.singleton(Data_List_Types.plusList)($165));
  };
  exports["singleton"] = singleton;
})(PS["Data.List.NonEmpty"] = PS["Data.List.NonEmpty"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Foreign"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Except = PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Int = PS["Data.Int"];
  var Data_List_NonEmpty = PS["Data.List.NonEmpty"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_String_CodeUnits = PS["Data.String.CodeUnits"];
  var Prelude = PS["Prelude"];
  var TypeMismatch = (function () {
      function TypeMismatch(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TypeMismatch.create = function (value0) {
          return function (value1) {
              return new TypeMismatch(value0, value1);
          };
      };
      return TypeMismatch;
  })();
  var fail = function ($107) {
      return Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(Data_Identity.monadIdentity))(Data_List_NonEmpty.singleton($107));
  };
  var unsafeReadTagged = function (tag) {
      return function (value) {
          if ($foreign.tagOf(value) === tag) {
              return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))($foreign.unsafeFromForeign(value));
          };
          if (Data_Boolean.otherwise) {
              return fail(new TypeMismatch(tag, $foreign.tagOf(value)));
          };
          throw new Error("Failed pattern match at Foreign line 106, column 1 - line 106, column 55: " + [ tag.constructor.name, value.constructor.name ]);
      };
  };
  var readString = unsafeReadTagged("String");
  exports["TypeMismatch"] = TypeMismatch;
  exports["unsafeReadTagged"] = unsafeReadTagged;
  exports["readString"] = readString;
  exports["fail"] = fail;
})(PS["Foreign"] = PS["Foreign"] || {});
(function(exports) {
    "use strict";

  exports._jsonParser = function (fail, succ, s) {
    try {
      return succ(JSON.parse(s));
    }
    catch (e) {
      return fail(e.message);
    }
  };
})(PS["Data.Argonaut.Parser"] = PS["Data.Argonaut.Parser"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Argonaut.Parser"];
  var Data_Argonaut_Core = PS["Data.Argonaut.Core"];
  var Data_Either = PS["Data.Either"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];                 
  var jsonParser = function (j) {
      return $foreign._jsonParser(Data_Either.Left.create, Data_Either.Right.create, j);
  };
  exports["jsonParser"] = jsonParser;
})(PS["Data.Argonaut.Parser"] = PS["Data.Argonaut.Parser"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Utils"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Argonaut_Core = PS["Data.Argonaut.Core"];
  var Data_Argonaut_Decode_Generic_Rep = PS["Data.Argonaut.Decode.Generic.Rep"];
  var Data_Argonaut_Encode_Generic_Rep = PS["Data.Argonaut.Encode.Generic.Rep"];
  var Data_Argonaut_Parser = PS["Data.Argonaut.Parser"];
  var Data_Array = PS["Data.Array"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Either = PS["Data.Either"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Generic_Rep = PS["Data.Generic.Rep"];
  var Data_Int = PS["Data.Int"];
  var Data_List = PS["Data.List"];
  var Data_List_Lazy = PS["Data.List.Lazy"];
  var Data_List_ZipList = PS["Data.List.ZipList"];
  var Data_Map = PS["Data.Map"];
  var Data_Map_Internal = PS["Data.Map.Internal"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Unfoldable1 = PS["Data.Unfoldable1"];
  var Data_Unit = PS["Data.Unit"];
  var Effect = PS["Effect"];
  var Foreign_Object = PS["Foreign.Object"];
  var Node_Process = PS["Node.Process"];
  var Prelude = PS["Prelude"];
  var whenJust = function (dictApplicative) {
      return function (mx) {
          return function (f) {
              return Data_Maybe.maybe(Control_Applicative.pure(dictApplicative)(Data_Unit.unit))(f)(mx);
          };
      };
  };
  var iterateN = function (n) {
      return function (x) {
          return function (f) {
              var $12 = n <= 0;
              if ($12) {
                  return [  ];
              };
              return Data_Semigroup.append(Data_Semigroup.semigroupArray)([ x ])(iterateN(n - 1 | 0)(f(x))(f));
          };
      };
  };
  var encode = function (dictGeneric) {
      return function (dictEncodeRep) {
          return function ($28) {
              return Data_Argonaut_Core.stringify(Data_Argonaut_Encode_Generic_Rep.genericEncodeJson(dictGeneric)(dictEncodeRep)($28));
          };
      };
  };
  var decode = function (dictGeneric) {
      return function (dictDecodeRep) {
          return Control_Bind.composeKleisliFlipped(Data_Either.bindEither)(Data_Argonaut_Decode_Generic_Rep.genericDecodeJson(dictGeneric)(dictDecodeRep))(Data_Argonaut_Parser.jsonParser);
      };
  };
  exports["iterateN"] = iterateN;
  exports["whenJust"] = whenJust;
  exports["encode"] = encode;
  exports["decode"] = decode;
})(PS["Utils"] = PS["Utils"] || {});
(function(exports) {
    "use strict";

  exports.eventListener = function (fn) {
    return function () {
      return function (event) {
        return fn(event)();
      };
    };
  };

  exports.addEventListener = function (type) {
    return function (listener) {
      return function (useCapture) {
        return function (target) {
          return function () {
            return target.addEventListener(type, listener, useCapture);
          };
        };
      };
    };
  };
})(PS["Web.Event.EventTarget"] = PS["Web.Event.EventTarget"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Web.Event.EventTarget"];
  var Effect = PS["Effect"];
  var Prelude = PS["Prelude"];
  var Web_Event_Event = PS["Web.Event.Event"];
  var Web_Event_Internal_Types = PS["Web.Event.Internal.Types"];
  exports["eventListener"] = $foreign.eventListener;
  exports["addEventListener"] = $foreign.addEventListener;
})(PS["Web.Event.EventTarget"] = PS["Web.Event.EventTarget"] || {});
(function(exports) {
  /* global window */
  "use strict";

  exports.window = function () {
    return window;
  };
})(PS["Web.HTML"] = PS["Web.HTML"] || {});
(function(exports) {
    "use strict";        

  exports.nullable = function (a, r, f) {
    return a == null ? r : f(a);
  };
})(PS["Data.Nullable"] = PS["Data.Nullable"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Nullable"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];                                          
  var toMaybe = function (n) {
      return $foreign.nullable(n, Data_Maybe.Nothing.value, Data_Maybe.Just.create);
  };
  exports["toMaybe"] = toMaybe;
})(PS["Data.Nullable"] = PS["Data.Nullable"] || {});
(function(exports) {
    "use strict";                                             

  exports._querySelector = function (selector) {
    return function (node) {
      return function () {
        return node.querySelector(selector);
      };
    };
  };
})(PS["Web.DOM.ParentNode"] = PS["Web.DOM.ParentNode"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Web.DOM.ParentNode"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Nullable = PS["Data.Nullable"];
  var Data_Ord = PS["Data.Ord"];
  var Effect = PS["Effect"];
  var Prelude = PS["Prelude"];
  var Web_DOM_HTMLCollection = PS["Web.DOM.HTMLCollection"];
  var Web_DOM_Internal_Types = PS["Web.DOM.Internal.Types"];
  var Web_DOM_NodeList = PS["Web.DOM.NodeList"];
  var querySelector = function (qs) {
      return function ($3) {
          return Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe)($foreign._querySelector(qs)($3));
      };
  };
  exports["querySelector"] = querySelector;
})(PS["Web.DOM.ParentNode"] = PS["Web.DOM.ParentNode"] || {});
(function(exports) {
    "use strict";

  exports.focus = function (elt) {
    return function () {
      return elt.focus();
    };
  };
})(PS["Web.HTML.HTMLElement"] = PS["Web.HTML.HTMLElement"] || {});
(function(exports) {
    "use strict";

  exports.setAttribute = function (name) {
    return function (value) {
      return function (element) {
        return function () {
          element.setAttribute(name, value);
          return {};
        };
      };
    };
  };
})(PS["Web.DOM.Element"] = PS["Web.DOM.Element"] || {});
(function(exports) {
    "use strict";

  exports._unsafeReadProtoTagged = function (nothing, just, name, value) {
    var ty = window[name];
    if (ty != null && value instanceof ty) {
      return just(value);
    }
    return nothing;
  };
})(PS["Web.Internal.FFI"] = PS["Web.Internal.FFI"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Web.Internal.FFI"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Maybe = PS["Data.Maybe"];                 
  var unsafeReadProtoTagged = function (name) {
      return function (value) {
          return $foreign._unsafeReadProtoTagged(Data_Maybe.Nothing.value, Data_Maybe.Just.create, name, value);
      };
  };
  exports["unsafeReadProtoTagged"] = unsafeReadProtoTagged;
})(PS["Web.Internal.FFI"] = PS["Web.Internal.FFI"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Web.DOM.Element"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Nullable = PS["Data.Nullable"];
  var Effect = PS["Effect"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var Web_DOM_ChildNode = PS["Web.DOM.ChildNode"];
  var Web_DOM_Internal_Types = PS["Web.DOM.Internal.Types"];
  var Web_DOM_NonDocumentTypeChildNode = PS["Web.DOM.NonDocumentTypeChildNode"];
  var Web_DOM_ParentNode = PS["Web.DOM.ParentNode"];
  var Web_Event_EventTarget = PS["Web.Event.EventTarget"];
  var Web_Internal_FFI = PS["Web.Internal.FFI"];              
  var toNode = Unsafe_Coerce.unsafeCoerce;
  var toEventTarget = Unsafe_Coerce.unsafeCoerce;
  exports["toNode"] = toNode;
  exports["toEventTarget"] = toEventTarget;
  exports["setAttribute"] = $foreign.setAttribute;
})(PS["Web.DOM.Element"] = PS["Web.DOM.Element"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Web.HTML.HTMLElement"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Nullable = PS["Data.Nullable"];
  var Effect = PS["Effect"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var Web_DOM = PS["Web.DOM"];
  var Web_DOM_DOMTokenList = PS["Web.DOM.DOMTokenList"];
  var Web_DOM_Element = PS["Web.DOM.Element"];
  var Web_DOM_Internal_Types = PS["Web.DOM.Internal.Types"];
  var Web_DOM_NonDocumentTypeChildNode = PS["Web.DOM.NonDocumentTypeChildNode"];
  var Web_DOM_ParentNode = PS["Web.DOM.ParentNode"];
  var Web_Event_EventTarget = PS["Web.Event.EventTarget"];
  exports["focus"] = $foreign.focus;
})(PS["Web.HTML.HTMLElement"] = PS["Web.HTML.HTMLElement"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Web.HTML.HTMLDocument"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Nullable = PS["Data.Nullable"];
  var Effect = PS["Effect"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var Web_DOM_Document = PS["Web.DOM.Document"];
  var Web_DOM_Internal_Types = PS["Web.DOM.Internal.Types"];
  var Web_DOM_NonElementParentNode = PS["Web.DOM.NonElementParentNode"];
  var Web_DOM_ParentNode = PS["Web.DOM.ParentNode"];
  var Web_Event_EventTarget = PS["Web.Event.EventTarget"];
  var Web_HTML_HTMLDocument_ReadyState = PS["Web.HTML.HTMLDocument.ReadyState"];
  var Web_HTML_HTMLElement = PS["Web.HTML.HTMLElement"];
  var Web_HTML_HTMLScriptElement = PS["Web.HTML.HTMLScriptElement"];
  var Web_Internal_FFI = PS["Web.Internal.FFI"];                 
  var toParentNode = Unsafe_Coerce.unsafeCoerce;
  exports["toParentNode"] = toParentNode;
})(PS["Web.HTML.HTMLDocument"] = PS["Web.HTML.HTMLDocument"] || {});
(function(exports) {
    "use strict";

  // ----------------------------------------------------------------------------

  exports.value = function (input) {
    return function () {
      return input.value;
    };
  };

  exports.setValue = function (value) {
    return function (input) {
      return function () {
        input.value = value;
      };
    };
  };

  // ----------------------------------------------------------------------------

  exports.select = function (input) {
    return function () {
      input.select();
    };
  };
})(PS["Web.HTML.HTMLInputElement"] = PS["Web.HTML.HTMLInputElement"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Web.HTML.HTMLInputElement"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Functor = PS["Data.Functor"];
  var Data_JSDate = PS["Data.JSDate"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Nullable = PS["Data.Nullable"];
  var Effect = PS["Effect"];
  var Effect_Uncurried = PS["Effect.Uncurried"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var Web_DOM = PS["Web.DOM"];
  var Web_DOM_NodeList = PS["Web.DOM.NodeList"];
  var Web_Event_EventTarget = PS["Web.Event.EventTarget"];
  var Web_File_FileList = PS["Web.File.FileList"];
  var Web_HTML_HTMLElement = PS["Web.HTML.HTMLElement"];
  var Web_HTML_HTMLFormElement = PS["Web.HTML.HTMLFormElement"];
  var Web_HTML_SelectionMode = PS["Web.HTML.SelectionMode"];
  var Web_HTML_ValidityState = PS["Web.HTML.ValidityState"];
  var Web_Internal_FFI = PS["Web.Internal.FFI"];
  var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
  var toEventTarget = Unsafe_Coerce.unsafeCoerce;                                  
  var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLInputElement");
  exports["fromElement"] = fromElement;
  exports["toHTMLElement"] = toHTMLElement;
  exports["toEventTarget"] = toEventTarget;
  exports["value"] = $foreign.value;
  exports["setValue"] = $foreign.setValue;
  exports["select"] = $foreign.select;
})(PS["Web.HTML.HTMLInputElement"] = PS["Web.HTML.HTMLInputElement"] || {});
(function(exports) {
    "use strict";

  // ----------------------------------------------------------------------------

  exports.host = function (location) {
    return function () {
      return location.host;
    };
  };

  // ----------------------------------------------------------------------------

  exports.protocol = function (location) {
    return function () {
      return location.protocol;
    };
  };
})(PS["Web.HTML.Location"] = PS["Web.HTML.Location"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Web.HTML.Location"];
  var Effect = PS["Effect"];
  var Prelude = PS["Prelude"];
  exports["host"] = $foreign.host;
  exports["protocol"] = $foreign.protocol;
})(PS["Web.HTML.Location"] = PS["Web.HTML.Location"] || {});
(function(exports) {
    "use strict";

  exports.document = function (window) {
    return function () {
      return window.document;
    };
  };

  exports.location = function (window) {
    return function () {
      return window.location;
    };
  };

  exports.localStorage = function (window) {
    return function () {
      return window.localStorage;
    };
  };
})(PS["Web.HTML.Window"] = PS["Web.HTML.Window"] || {});
(function(exports) {
    "use strict";

  exports._getItem = function (key) {
    return function (storage) {
      return function () {
        return storage.getItem(key);
      };
    };
  };

  exports.setItem = function (key) {
    return function (value) {
      return function (storage) {
        return function () {
          storage.setItem(key, value);
        };
      };
    };
  };
})(PS["Web.Storage.Storage"] = PS["Web.Storage.Storage"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Web.Storage.Storage"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Nullable = PS["Data.Nullable"];
  var Effect = PS["Effect"];
  var Prelude = PS["Prelude"];
  var getItem = function (s) {
      return function ($1) {
          return Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe)($foreign._getItem(s)($1));
      };
  };
  exports["getItem"] = getItem;
  exports["setItem"] = $foreign.setItem;
})(PS["Web.Storage.Storage"] = PS["Web.Storage.Storage"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Web.HTML.Window"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Nullable = PS["Data.Nullable"];
  var Data_Ord = PS["Data.Ord"];
  var Effect = PS["Effect"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var Web_Event_EventTarget = PS["Web.Event.EventTarget"];
  var Web_HTML_HTMLDocument = PS["Web.HTML.HTMLDocument"];
  var Web_HTML_History = PS["Web.HTML.History"];
  var Web_HTML_Location = PS["Web.HTML.Location"];
  var Web_HTML_Navigator = PS["Web.HTML.Navigator"];
  var Web_Storage_Storage = PS["Web.Storage.Storage"];
  var toEventTarget = Unsafe_Coerce.unsafeCoerce;
  exports["toEventTarget"] = toEventTarget;
  exports["document"] = $foreign.document;
  exports["location"] = $foreign.location;
  exports["localStorage"] = $foreign.localStorage;
})(PS["Web.HTML.Window"] = PS["Web.HTML.Window"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Web.HTML"];
  var Effect = PS["Effect"];
  var Web_HTML_HTMLAnchorElement = PS["Web.HTML.HTMLAnchorElement"];
  var Web_HTML_HTMLAreaElement = PS["Web.HTML.HTMLAreaElement"];
  var Web_HTML_HTMLAudioElement = PS["Web.HTML.HTMLAudioElement"];
  var Web_HTML_HTMLBRElement = PS["Web.HTML.HTMLBRElement"];
  var Web_HTML_HTMLBaseElement = PS["Web.HTML.HTMLBaseElement"];
  var Web_HTML_HTMLBodyElement = PS["Web.HTML.HTMLBodyElement"];
  var Web_HTML_HTMLButtonElement = PS["Web.HTML.HTMLButtonElement"];
  var Web_HTML_HTMLCanvasElement = PS["Web.HTML.HTMLCanvasElement"];
  var Web_HTML_HTMLDListElement = PS["Web.HTML.HTMLDListElement"];
  var Web_HTML_HTMLDataElement = PS["Web.HTML.HTMLDataElement"];
  var Web_HTML_HTMLDataListElement = PS["Web.HTML.HTMLDataListElement"];
  var Web_HTML_HTMLDivElement = PS["Web.HTML.HTMLDivElement"];
  var Web_HTML_HTMLDocument = PS["Web.HTML.HTMLDocument"];
  var Web_HTML_HTMLElement = PS["Web.HTML.HTMLElement"];
  var Web_HTML_HTMLEmbedElement = PS["Web.HTML.HTMLEmbedElement"];
  var Web_HTML_HTMLFieldSetElement = PS["Web.HTML.HTMLFieldSetElement"];
  var Web_HTML_HTMLFormElement = PS["Web.HTML.HTMLFormElement"];
  var Web_HTML_HTMLHRElement = PS["Web.HTML.HTMLHRElement"];
  var Web_HTML_HTMLHeadElement = PS["Web.HTML.HTMLHeadElement"];
  var Web_HTML_HTMLHeadingElement = PS["Web.HTML.HTMLHeadingElement"];
  var Web_HTML_HTMLIFrameElement = PS["Web.HTML.HTMLIFrameElement"];
  var Web_HTML_HTMLImageElement = PS["Web.HTML.HTMLImageElement"];
  var Web_HTML_HTMLInputElement = PS["Web.HTML.HTMLInputElement"];
  var Web_HTML_HTMLKeygenElement = PS["Web.HTML.HTMLKeygenElement"];
  var Web_HTML_HTMLLIElement = PS["Web.HTML.HTMLLIElement"];
  var Web_HTML_HTMLLabelElement = PS["Web.HTML.HTMLLabelElement"];
  var Web_HTML_HTMLLegendElement = PS["Web.HTML.HTMLLegendElement"];
  var Web_HTML_HTMLLinkElement = PS["Web.HTML.HTMLLinkElement"];
  var Web_HTML_HTMLMapElement = PS["Web.HTML.HTMLMapElement"];
  var Web_HTML_HTMLMediaElement = PS["Web.HTML.HTMLMediaElement"];
  var Web_HTML_HTMLMetaElement = PS["Web.HTML.HTMLMetaElement"];
  var Web_HTML_HTMLMeterElement = PS["Web.HTML.HTMLMeterElement"];
  var Web_HTML_HTMLModElement = PS["Web.HTML.HTMLModElement"];
  var Web_HTML_HTMLOListElement = PS["Web.HTML.HTMLOListElement"];
  var Web_HTML_HTMLObjectElement = PS["Web.HTML.HTMLObjectElement"];
  var Web_HTML_HTMLOptGroupElement = PS["Web.HTML.HTMLOptGroupElement"];
  var Web_HTML_HTMLOptionElement = PS["Web.HTML.HTMLOptionElement"];
  var Web_HTML_HTMLOutputElement = PS["Web.HTML.HTMLOutputElement"];
  var Web_HTML_HTMLParagraphElement = PS["Web.HTML.HTMLParagraphElement"];
  var Web_HTML_HTMLParamElement = PS["Web.HTML.HTMLParamElement"];
  var Web_HTML_HTMLPreElement = PS["Web.HTML.HTMLPreElement"];
  var Web_HTML_HTMLProgressElement = PS["Web.HTML.HTMLProgressElement"];
  var Web_HTML_HTMLQuoteElement = PS["Web.HTML.HTMLQuoteElement"];
  var Web_HTML_HTMLScriptElement = PS["Web.HTML.HTMLScriptElement"];
  var Web_HTML_HTMLSelectElement = PS["Web.HTML.HTMLSelectElement"];
  var Web_HTML_HTMLSourceElement = PS["Web.HTML.HTMLSourceElement"];
  var Web_HTML_HTMLSpanElement = PS["Web.HTML.HTMLSpanElement"];
  var Web_HTML_HTMLStyleElement = PS["Web.HTML.HTMLStyleElement"];
  var Web_HTML_HTMLTableCaptionElement = PS["Web.HTML.HTMLTableCaptionElement"];
  var Web_HTML_HTMLTableCellElement = PS["Web.HTML.HTMLTableCellElement"];
  var Web_HTML_HTMLTableColElement = PS["Web.HTML.HTMLTableColElement"];
  var Web_HTML_HTMLTableDataCellElement = PS["Web.HTML.HTMLTableDataCellElement"];
  var Web_HTML_HTMLTableElement = PS["Web.HTML.HTMLTableElement"];
  var Web_HTML_HTMLTableHeaderCellElement = PS["Web.HTML.HTMLTableHeaderCellElement"];
  var Web_HTML_HTMLTableRowElement = PS["Web.HTML.HTMLTableRowElement"];
  var Web_HTML_HTMLTableSectionElement = PS["Web.HTML.HTMLTableSectionElement"];
  var Web_HTML_HTMLTemplateElement = PS["Web.HTML.HTMLTemplateElement"];
  var Web_HTML_HTMLTextAreaElement = PS["Web.HTML.HTMLTextAreaElement"];
  var Web_HTML_HTMLTimeElement = PS["Web.HTML.HTMLTimeElement"];
  var Web_HTML_HTMLTitleElement = PS["Web.HTML.HTMLTitleElement"];
  var Web_HTML_HTMLTrackElement = PS["Web.HTML.HTMLTrackElement"];
  var Web_HTML_HTMLUListElement = PS["Web.HTML.HTMLUListElement"];
  var Web_HTML_HTMLVideoElement = PS["Web.HTML.HTMLVideoElement"];
  var Web_HTML_History = PS["Web.HTML.History"];
  var Web_HTML_Location = PS["Web.HTML.Location"];
  var Web_HTML_Navigator = PS["Web.HTML.Navigator"];
  var Web_HTML_Window = PS["Web.HTML.Window"];
  exports["window"] = $foreign.window;
})(PS["Web.HTML"] = PS["Web.HTML"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Web_Event_Event = PS["Web.Event.Event"];
  var onMessage = "message";
  var onError = "error";
  var onClose = "close";
  exports["onMessage"] = onMessage;
  exports["onError"] = onError;
  exports["onClose"] = onClose;
})(PS["Web.Socket.Event.EventTypes"] = PS["Web.Socket.Event.EventTypes"] || {});
(function(exports) {
    "use strict";

  exports.data_ = function (e) {
    return e.data;
  };
})(PS["Web.Socket.Event.MessageEvent"] = PS["Web.Socket.Event.MessageEvent"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Web.Socket.Event.MessageEvent"];
  var Data_Maybe = PS["Data.Maybe"];
  var Foreign = PS["Foreign"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var Web_Event_Event = PS["Web.Event.Event"];
  var Web_Internal_FFI = PS["Web.Internal.FFI"];
  var fromEvent = Web_Internal_FFI.unsafeReadProtoTagged("MessageEvent");
  exports["fromEvent"] = fromEvent;
  exports["data_"] = $foreign.data_;
})(PS["Web.Socket.Event.MessageEvent"] = PS["Web.Socket.Event.MessageEvent"] || {});
(function(exports) {
    "use strict";

  exports.create = function (url) {
    return function (protocols) {
      return function () {
        return new WebSocket(url, protocols);
      };
    };
  };

  exports.url = function (ws) {
    return function () {
      return ws.url;
    };
  };

  exports.sendImpl = function (ws) {
    return function (value) {
      return function () {
        ws.send(value);
      };
    };
  };
})(PS["Web.Socket.WebSocket"] = PS["Web.Socket.WebSocket"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Web.Socket.WebSocket"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_ArrayBuffer_Types = PS["Data.ArrayBuffer.Types"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Effect = PS["Effect"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var Web_Event_EventTarget = PS["Web.Event.EventTarget"];
  var Web_File_Blob = PS["Web.File.Blob"];
  var Web_Internal_FFI = PS["Web.Internal.FFI"];
  var Web_Socket_BinaryType = PS["Web.Socket.BinaryType"];
  var Web_Socket_ReadyState = PS["Web.Socket.ReadyState"];
  var toEventTarget = Unsafe_Coerce.unsafeCoerce;
  var sendString = $foreign.sendImpl;
  exports["toEventTarget"] = toEventTarget;
  exports["sendString"] = sendString;
  exports["create"] = $foreign.create;
})(PS["Web.Socket.WebSocket"] = PS["Web.Socket.WebSocket"] || {});
(function(exports) {
    "use strict";

  exports.key = function (e) {
    return e.key;
  };
})(PS["Web.UIEvent.KeyboardEvent"] = PS["Web.UIEvent.KeyboardEvent"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Enum"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Unfoldable1 = PS["Data.Unfoldable1"];
  var Data_Unit = PS["Data.Unit"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var Enum = function (Ord0, pred, succ) {
      this.Ord0 = Ord0;
      this.pred = pred;
      this.succ = succ;
  };
  var BoundedEnum = function (Bounded0, Enum1, cardinality, fromEnum, toEnum) {
      this.Bounded0 = Bounded0;
      this.Enum1 = Enum1;
      this.cardinality = cardinality;
      this.fromEnum = fromEnum;
      this.toEnum = toEnum;
  };
  var toEnum = function (dict) {
      return dict.toEnum;
  };
  var succ = function (dict) {
      return dict.succ;
  }; 
  var pred = function (dict) {
      return dict.pred;
  };              
  var fromEnum = function (dict) {
      return dict.fromEnum;
  };
  var defaultSucc = function (toEnum$prime) {
      return function (fromEnum$prime) {
          return function (a) {
              return toEnum$prime(fromEnum$prime(a) + 1 | 0);
          };
      };
  };
  var defaultPred = function (toEnum$prime) {
      return function (fromEnum$prime) {
          return function (a) {
              return toEnum$prime(fromEnum$prime(a) - 1 | 0);
          };
      };
  };                                                                                             
  var cardinality = function (dict) {
      return dict.cardinality;
  };
  exports["Enum"] = Enum;
  exports["succ"] = succ;
  exports["pred"] = pred;
  exports["BoundedEnum"] = BoundedEnum;
  exports["cardinality"] = cardinality;
  exports["toEnum"] = toEnum;
  exports["fromEnum"] = fromEnum;
  exports["defaultSucc"] = defaultSucc;
  exports["defaultPred"] = defaultPred;
})(PS["Data.Enum"] = PS["Data.Enum"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Web.UIEvent.KeyboardEvent"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Enum = PS["Data.Enum"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Effect = PS["Effect"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var Web_Event_Event = PS["Web.Event.Event"];
  var Web_Internal_FFI = PS["Web.Internal.FFI"];
  var Web_UIEvent_UIEvent = PS["Web.UIEvent.UIEvent"];                      
  var fromEvent = Web_Internal_FFI.unsafeReadProtoTagged("KeyboardEvent");
  exports["fromEvent"] = fromEvent;
  exports["key"] = $foreign.key;
})(PS["Web.UIEvent.KeyboardEvent"] = PS["Web.UIEvent.KeyboardEvent"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Web_Event_Event = PS["Web.Event.Event"];
  var keydown = "keydown";
  exports["keydown"] = keydown;
})(PS["Web.UIEvent.KeyboardEvent.EventTypes"] = PS["Web.UIEvent.KeyboardEvent.EventTypes"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["BaseClient"];
  var BaseCommon = PS["BaseCommon"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Monad_RWS_Trans = PS["Control.Monad.RWS.Trans"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Argonaut_Decode_Class = PS["Data.Argonaut.Decode.Class"];
  var Data_Argonaut_Decode_Generic_Rep = PS["Data.Argonaut.Decode.Generic.Rep"];
  var Data_Argonaut_Encode_Generic_Rep = PS["Data.Argonaut.Encode.Generic.Rep"];
  var Data_Array = PS["Data.Array"];
  var Data_Either = PS["Data.Either"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Generic_Rep = PS["Data.Generic.Rep"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Map = PS["Data.Map"];
  var Data_Map_Internal = PS["Data.Map.Internal"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Effect = PS["Effect"];
  var Effect_Console = PS["Effect.Console"];
  var Effect_Exception_Unsafe = PS["Effect.Exception.Unsafe"];
  var Effect_Ref = PS["Effect.Ref"];
  var Foreign = PS["Foreign"];
  var Prelude = PS["Prelude"];
  var Types = PS["Types"];
  var Utils = PS["Utils"];
  var Web_Event_EventTarget = PS["Web.Event.EventTarget"];
  var Web_HTML = PS["Web.HTML"];
  var Web_HTML_Window = PS["Web.HTML.Window"];
  var Web_Socket_Event_EventTypes = PS["Web.Socket.Event.EventTypes"];
  var Web_Socket_Event_MessageEvent = PS["Web.Socket.Event.MessageEvent"];
  var Web_Socket_WebSocket = PS["Web.Socket.WebSocket"];
  var Web_UIEvent_KeyboardEvent = PS["Web.UIEvent.KeyboardEvent"];
  var Web_UIEvent_KeyboardEvent_EventTypes = PS["Web.UIEvent.KeyboardEvent.EventTypes"];                 
  var ClientMReader = (function () {
      function ClientMReader(value0) {
          this.value0 = value0;
      };
      ClientMReader.create = function (value0) {
          return new ClientMReader(value0);
      };
      return ClientMReader;
  })();
  var wsMessageData = (function () {
      var hush = function ($84) {
          return Data_Either.hush(Data_Newtype.unwrap(Data_Identity.newtypeIdentity)(Data_Newtype.unwrap(Control_Monad_Except_Trans.newtypeExceptT)($84)));
      };
      return function ($85) {
          return hush(Foreign.readString(Web_Socket_Event_MessageEvent.data_($85)));
      };
  })();
  var sendUpdates = function (dictMonad) {
      return function (dictMonadWriter) {
          return Control_Monad_Writer_Class.tell(dictMonadWriter.MonadTell0());
      };
  };
  var sendUpdate = function (dictMonad) {
      return function (dictMonadWriter) {
          return function (m) {
              return sendUpdates(dictMonad)(dictMonadWriter)([ m ]);
          };
      };
  };
  var sendAllMessages = function (dictGeneric) {
      return function (dictEncodeRep) {
          return function (cln) {
              return function (msgs) {
                  return Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableArray)(msgs)(function (msg) {
                      return Web_Socket_WebSocket.sendString(cln.sock)(Utils.encode(dictGeneric)(dictEncodeRep)(msg));
                  });
              };
          };
      };
  };
  var runClientM = function (rdr) {
      return function (state) {
          return function (action) {
              return function __do() {
                  var v = Control_Monad_RWS_Trans.runRWST(action)(rdr)(state)();
                  return {
                      nextState: v.value0,
                      result: v.value1,
                      messages: v.value2
                  };
              };
          };
      };
  };
  var mkClient = function (initialState) {
      return function (sock) {
          return function (pId) {
              return {
                  sock: sock,
                  state: initialState,
                  playerId: pId,
                  players: Data_Map_Internal.empty
              };
          };
      };
  };
  var liftEff = Control_Monad_Trans_Class.lift(Control_Monad_RWS_Trans.monadTransRWST(Data_Monoid.monoidArray))(Effect.monadEffect);
  var handleInternalMessage = function (refCln) {
      return function (msg) {
          if (msg instanceof BaseCommon.NewPlayer) {
              return function __do() {
                  Effect_Console.log("handling NewPlayer internal message: " + Data_Show.show(Data_Map_Internal.showMap(Types.showPlayerId)(Data_Show.showString))(msg.value0))();
                  return Data_Functor["void"](Effect.functorEffect)(Effect_Ref.modify(function (cln) {
                      return {
                          players: msg.value0,
                          playerId: cln.playerId,
                          sock: cln.sock,
                          state: cln.state
                      };
                  })(refCln))();
              };
          };
          if (msg instanceof BaseCommon.YourPlayerIdIs) {
              return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
          };
          throw new Error("Failed pattern match at BaseClient line 201, column 3 - line 206, column 16: " + [ msg.constructor.name ]);
      };
  };
  var getReader = function (c) {
      return new ClientMReader({
          playerId: c.playerId,
          players: c.players
      });
  };
  var runCallback = function (dictGeneric) {
      return function (dictEncodeRep) {
          return function (refCln) {
              return function (callback) {
                  return function __do() {
                      var v = Effect_Ref.read(refCln)();
                      var v1 = runClientM(getReader(v))(v.state)(callback)();
                      sendAllMessages(dictGeneric)(dictEncodeRep)(v)(v1.messages)();
                      return Effect_Ref.write({
                          state: v1.nextState,
                          playerId: v.playerId,
                          players: v.players,
                          sock: v.sock
                      })(refCln)();
                  };
              };
          };
      };
  };
  var connectSocket = function (url) {
      return function (playerName) {
          return function (cont) {
              var fullUrl = url + ("?" + playerName);
              return function __do() {
                  var v = Effect_Ref["new"]([  ])();
                  var v1 = Effect_Ref["new"]([  ])();
                  var v2 = Web_Socket_WebSocket.create(fullUrl)([  ])();
                  var onMessage = function (ev) {
                      return Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(Control_Bind.bind(Data_Maybe.bindMaybe)(Web_Socket_Event_MessageEvent.fromEvent(ev))(wsMessageData))(function (msg) {
                          var v3 = Utils.decode(BaseCommon.genericInternalMessage)(Data_Argonaut_Decode_Generic_Rep.decodeRepSum(Data_Argonaut_Decode_Generic_Rep.decodeRepConstructor(new Data_Symbol.IsSymbol(function () {
                              return "NewPlayer";
                          }))(Data_Argonaut_Decode_Generic_Rep.decodeRepArgsArgument(Data_Argonaut_Decode_Class.decodeMap(Types.ordPlayerId)(Types.decodeJsonPlayerId)(Data_Argonaut_Decode_Class.decodeJsonString))))(Data_Argonaut_Decode_Generic_Rep.decodeRepConstructor(new Data_Symbol.IsSymbol(function () {
                              return "YourPlayerIdIs";
                          }))(Data_Argonaut_Decode_Generic_Rep.decodeRepArgsArgument(Types.decodeJsonPlayerId))))(msg);
                          if (v3 instanceof Data_Either.Right && v3.value0 instanceof BaseCommon.YourPlayerIdIs) {
                              return function __do() {
                                  var v4 = Effect_Ref.read(v)();
                                  var v5 = Effect_Ref.read(v1)();
                                  return cont(v2)(v3.value0.value0)(v4)(v5)();
                              };
                          };
                          if (v3 instanceof Data_Either.Right) {
                              return Data_Functor["void"](Effect.functorEffect)(Effect_Ref.modify(function (arr) {
                                  return Data_Semigroup.append(Data_Semigroup.semigroupArray)(arr)([ v3.value0 ]);
                              })(v1));
                          };
                          if (v3 instanceof Data_Either.Left) {
                              return Data_Functor["void"](Effect.functorEffect)(Effect_Ref.modify(function (arr) {
                                  return Data_Semigroup.append(Data_Semigroup.semigroupArray)(arr)([ msg ]);
                              })(v));
                          };
                          throw new Error("Failed pattern match at BaseClient line 227, column 9 - line 233, column 75: " + [ v3.constructor.name ]);
                      });
                  };
                  var v3 = Web_Event_EventTarget.eventListener(onMessage)();
                  return Web_Event_EventTarget.addEventListener(Web_Socket_Event_EventTypes.onMessage)(v3)(false)(Web_Socket_WebSocket.toEventTarget(v2))();
              };
          };
      };
  };
  var startClient = function (dictGeneric) {
      return function (dictDecodeRep) {
          return function (dictGeneric1) {
              return function (dictEncodeRep) {
                  return function (initialState) {
                      return function (cs) {
                          return function (socketUrl) {
                              return function (playerName) {
                                  var onMessageCallback = function (ref) {
                                      return function (msg) {
                                          var v = Utils.decode(dictGeneric)(dictDecodeRep)(msg);
                                          if (v instanceof Data_Either.Right) {
                                              return runCallback(dictGeneric1)(dictEncodeRep)(ref)(cs.onMessage(v.value0));
                                          };
                                          if (v instanceof Data_Either.Left) {
                                              var v1 = Utils.decode(BaseCommon.genericInternalMessage)(Data_Argonaut_Decode_Generic_Rep.decodeRepSum(Data_Argonaut_Decode_Generic_Rep.decodeRepConstructor(new Data_Symbol.IsSymbol(function () {
                                                  return "NewPlayer";
                                              }))(Data_Argonaut_Decode_Generic_Rep.decodeRepArgsArgument(Data_Argonaut_Decode_Class.decodeMap(Types.ordPlayerId)(Types.decodeJsonPlayerId)(Data_Argonaut_Decode_Class.decodeJsonString))))(Data_Argonaut_Decode_Generic_Rep.decodeRepConstructor(new Data_Symbol.IsSymbol(function () {
                                                  return "YourPlayerIdIs";
                                              }))(Data_Argonaut_Decode_Generic_Rep.decodeRepArgsArgument(Types.decodeJsonPlayerId))))(msg);
                                              if (v1 instanceof Data_Either.Right) {
                                                  return handleInternalMessage(ref)(v1.value0);
                                              };
                                              if (v1 instanceof Data_Either.Left) {
                                                  return Effect_Console.error("Unable to parse message:\x0a" + ("data: " + (msg + ("\x0a" + ("errors: " + (Data_Show.show(Data_Show.showString)(v.value0) + ("\x0a" + Data_Show.show(Data_Show.showString)(v1.value0))))))));
                                              };
                                              throw new Error("Failed pattern match at BaseClient line 189, column 9 - line 195, column 59: " + [ v1.constructor.name ]);
                                          };
                                          throw new Error("Failed pattern match at BaseClient line 186, column 5 - line 195, column 59: " + [ v.constructor.name ]);
                                      };
                                  };
                                  return connectSocket(socketUrl)(playerName)(function (sock) {
                                      return function (pId) {
                                          return function (msgs) {
                                              return function (internals) {
                                                  return function __do() {
                                                      Effect_Console.log("connected. pId = " + (Data_Show.show(Types.showPlayerId)(pId) + (", msgs = " + Data_Show.show(Data_Show.showArray(Data_Show.showString))(msgs))))();
                                                      var cln$prime = mkClient(initialState)(sock)(pId);
                                                      var v = Effect_Ref["new"](cln$prime)();
                                                      Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableArray)(msgs)(onMessageCallback(v))();
                                                      Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableArray)(internals)(handleInternalMessage(v))();
                                                      var sockTarget = Web_Socket_WebSocket.toEventTarget(sock);
                                                      var v1 = Web_Event_EventTarget.eventListener(function (evt) {
                                                          return Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(Control_Bind.bind(Data_Maybe.bindMaybe)(Web_Socket_Event_MessageEvent.fromEvent(evt))(wsMessageData))(onMessageCallback(v));
                                                      })();
                                                      Web_Event_EventTarget.addEventListener(Web_Socket_Event_EventTypes.onMessage)(v1)(false)(sockTarget)();
                                                      var v2 = Web_Event_EventTarget.eventListener(Data_Function["const"](runCallback(dictGeneric1)(dictEncodeRep)(v)(cs.onError)))();
                                                      Web_Event_EventTarget.addEventListener(Web_Socket_Event_EventTypes.onError)(v2)(false)(sockTarget)();
                                                      var v3 = Web_Event_EventTarget.eventListener(Data_Function["const"](runCallback(dictGeneric1)(dictEncodeRep)(v)(cs.onClose)))();
                                                      Web_Event_EventTarget.addEventListener(Web_Socket_Event_EventTypes.onClose)(v3)(false)(sockTarget)();
                                                      var v4 = Web_Event_EventTarget.eventListener(function (evt) {
                                                          return Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(Web_UIEvent_KeyboardEvent.fromEvent(evt))(function ($86) {
                                                              return runCallback(dictGeneric1)(dictEncodeRep)(v)(cs.onKeyDown($86));
                                                          });
                                                      })();
                                                      var v5 = Data_Functor.map(Effect.functorEffect)(Web_HTML_Window.toEventTarget)(Web_HTML.window)();
                                                      Web_Event_EventTarget.addEventListener(Web_UIEvent_KeyboardEvent_EventTypes.keydown)(v4)(false)(v5)();
                                                      return Data_Functor["void"](Effect.functorEffect)($foreign.startAnimationLoop(function __do() {
                                                          var v6 = Effect_Ref.read(v)();
                                                          return runCallback(dictGeneric1)(dictEncodeRep)(v)(cs.render)();
                                                      }))();
                                                  };
                                              };
                                          };
                                      };
                                  });
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var askPlayers = function (dictMonad) {
      return function (dictMonadReader) {
          return Data_Functor.map(((dictMonad.Bind1()).Apply0()).Functor0())(function (v) {
              return v.value0.players;
          })(Control_Monad_Reader_Class.ask(dictMonadReader.MonadAsk0()));
      };
  };
  var askPlayerId = function (dictMonad) {
      return function (dictMonadReader) {
          return Data_Functor.map(((dictMonad.Bind1()).Apply0()).Functor0())(function (v) {
              return v.value0.playerId;
          })(Control_Monad_Reader_Class.ask(dictMonadReader.MonadAsk0()));
      };
  };
  exports["ClientMReader"] = ClientMReader;
  exports["getReader"] = getReader;
  exports["runClientM"] = runClientM;
  exports["mkClient"] = mkClient;
  exports["runCallback"] = runCallback;
  exports["sendAllMessages"] = sendAllMessages;
  exports["sendUpdate"] = sendUpdate;
  exports["sendUpdates"] = sendUpdates;
  exports["askPlayerId"] = askPlayerId;
  exports["askPlayers"] = askPlayers;
  exports["liftEff"] = liftEff;
  exports["startClient"] = startClient;
  exports["handleInternalMessage"] = handleInternalMessage;
  exports["connectSocket"] = connectSocket;
  exports["wsMessageData"] = wsMessageData;
})(PS["BaseClient"] = PS["BaseClient"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Cont_Class = PS["Control.Monad.Cont.Class"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Distributive = PS["Data.Distributive"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Effect_Class = PS["Effect.Class"];
  var Prelude = PS["Prelude"];                 
  var ReaderT = function (x) {
      return x;
  };
  var runReaderT = function (v) {
      return v;
  };          
  var monadTransReaderT = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
      return function ($67) {
          return ReaderT(Data_Function["const"]($67));
      };
  });
  var mapReaderT = function (f) {
      return function (v) {
          return function ($68) {
              return f(v($68));
          };
      };
  };
  var functorReaderT = function (dictFunctor) {
      return new Data_Functor.Functor(function ($69) {
          return mapReaderT(Data_Functor.map(dictFunctor)($69));
      });
  };
  var applyReaderT = function (dictApply) {
      return new Control_Apply.Apply(function () {
          return functorReaderT(dictApply.Functor0());
      }, function (v) {
          return function (v1) {
              return function (r) {
                  return Control_Apply.apply(dictApply)(v(r))(v1(r));
              };
          };
      });
  };
  var bindReaderT = function (dictBind) {
      return new Control_Bind.Bind(function () {
          return applyReaderT(dictBind.Apply0());
      }, function (v) {
          return function (k) {
              return function (r) {
                  return Control_Bind.bind(dictBind)(v(r))(function (a) {
                      var v1 = k(a);
                      return v1(r);
                  });
              };
          };
      });
  };
  var applicativeReaderT = function (dictApplicative) {
      return new Control_Applicative.Applicative(function () {
          return applyReaderT(dictApplicative.Apply0());
      }, function ($71) {
          return ReaderT(Data_Function["const"](Control_Applicative.pure(dictApplicative)($71)));
      });
  };
  var monadReaderT = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeReaderT(dictMonad.Applicative0());
      }, function () {
          return bindReaderT(dictMonad.Bind1());
      });
  };
  var monadAskReaderT = function (dictMonad) {
      return new Control_Monad_Reader_Class.MonadAsk(function () {
          return monadReaderT(dictMonad);
      }, Control_Applicative.pure(dictMonad.Applicative0()));
  };
  exports["ReaderT"] = ReaderT;
  exports["runReaderT"] = runReaderT;
  exports["mapReaderT"] = mapReaderT;
  exports["functorReaderT"] = functorReaderT;
  exports["applyReaderT"] = applyReaderT;
  exports["applicativeReaderT"] = applicativeReaderT;
  exports["bindReaderT"] = bindReaderT;
  exports["monadReaderT"] = monadReaderT;
  exports["monadTransReaderT"] = monadTransReaderT;
  exports["monadAskReaderT"] = monadAskReaderT;
})(PS["Control.Monad.Reader.Trans"] = PS["Control.Monad.Reader.Trans"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_Reader_Trans = PS["Control.Monad.Reader.Trans"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Effect = PS["Effect"];
  var Graphics_Canvas = PS["Graphics.Canvas"];
  var Prelude = PS["Prelude"];                 
  var runCanvasM = Data_Function.flip(Control_Monad_Reader_Trans.runReaderT);
  var liftReaderT = function (dictMonad) {
      return Control_Monad_Trans_Class.lift(Control_Monad_Reader_Trans.monadTransReaderT)(dictMonad);
  };
  var liftC = function (action) {
      return Data_Functor["void"](Control_Monad_Reader_Trans.functorReaderT(Effect.functorEffect))(Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(Control_Monad_Reader_Class.ask(Control_Monad_Reader_Trans.monadAskReaderT(Effect.monadEffect)))(function (ctx) {
          return liftReaderT(Effect.monadEffect)(action(ctx));
      }));
  };
  var lineTo = function (x) {
      return function (y) {
          return liftC(function (ctx) {
              return Graphics_Canvas.lineTo(ctx)(x)(y);
          });
      };
  };
  var moveTo = function (x) {
      return function (y) {
          return liftC(function (ctx) {
              return Graphics_Canvas.moveTo(ctx)(x)(y);
          });
      };
  };
  var rotate = function (a) {
      return liftC(function (ctx) {
          return Graphics_Canvas.rotate(ctx)(a);
      });
  };
  var setFillStyle = function (style) {
      return liftC(function (ctx) {
          return Graphics_Canvas.setFillStyle(ctx)(style);
      });
  };
  var setFont = function (font) {
      return liftC(function (ctx) {
          return Graphics_Canvas.setFont(ctx)(font);
      });
  };
  var setLineCap = function (lc) {
      return liftC(function (ctx) {
          return Graphics_Canvas.setLineCap(ctx)(lc);
      });
  };
  var setLineWidth = function (width) {
      return liftC(function (ctx) {
          return Graphics_Canvas.setLineWidth(ctx)(width);
      });
  };
  var setStrokeStyle = function (style) {
      return liftC(function (ctx) {
          return Graphics_Canvas.setStrokeStyle(ctx)(style);
      });
  };
  var setTextAlign = function (align) {
      return liftC(function (ctx) {
          return Graphics_Canvas.setTextAlign(ctx)(align);
      });
  };
  var stroke = liftC(Graphics_Canvas.stroke);
  var strokeText = function (str) {
      return function (x) {
          return function (y) {
              return liftC(function (ctx) {
                  return Graphics_Canvas.strokeText(ctx)(str)(x)(y);
              });
          };
      };
  };
  var translate = function (tt) {
      return liftC(function (ctx) {
          return Graphics_Canvas.translate(ctx)(tt);
      });
  };
  var withContext = function (action) {
      return liftC(function (ctx) {
          return Graphics_Canvas.withContext(ctx)(runCanvasM(ctx)(action));
      });
  };
  var fillText = function (str) {
      return function (x) {
          return function (y) {
              return liftC(function (ctx) {
                  return Graphics_Canvas.fillText(ctx)(str)(x)(y);
              });
          };
      };
  };
  var fill = liftC(Graphics_Canvas.fill);
  var clearRect = function (rect) {
      return liftC(function (ctx) {
          return Graphics_Canvas.clearRect(ctx)(rect);
      });
  };
  var beginPath = liftC(Graphics_Canvas.beginPath);
  var arc = function (a) {
      return liftC(function (ctx) {
          return Graphics_Canvas.arc(ctx)(a);
      });
  };
  exports["liftReaderT"] = liftReaderT;
  exports["liftC"] = liftC;
  exports["runCanvasM"] = runCanvasM;
  exports["beginPath"] = beginPath;
  exports["translate"] = translate;
  exports["rotate"] = rotate;
  exports["arc"] = arc;
  exports["moveTo"] = moveTo;
  exports["setFillStyle"] = setFillStyle;
  exports["setStrokeStyle"] = setStrokeStyle;
  exports["lineTo"] = lineTo;
  exports["withContext"] = withContext;
  exports["stroke"] = stroke;
  exports["fill"] = fill;
  exports["clearRect"] = clearRect;
  exports["fillText"] = fillText;
  exports["strokeText"] = strokeText;
  exports["setTextAlign"] = setTextAlign;
  exports["setFont"] = setFont;
  exports["setLineWidth"] = setLineWidth;
  exports["setLineCap"] = setLineCap;
})(PS["CanvasM"] = PS["CanvasM"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array = PS["Data.Array"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Lens_Internal_Wander = PS["Data.Lens.Internal.Wander"];
  var Data_Lens_Types = PS["Data.Lens.Types"];
  var Data_Map = PS["Data.Map"];
  var Data_Map_Internal = PS["Data.Map.Internal"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Set = PS["Data.Set"];
  var Data_Traversable = PS["Data.Traversable"];
  var Foreign_Object = PS["Foreign.Object"];
  var Prelude = PS["Prelude"];                 
  var Index = function (ix) {
      this.ix = ix;
  };
  var ix = function (dict) {
      return dict.ix;
  }; 
  var indexMap = function (dictOrd) {
      return new Index(function (k) {
          return function (dictWander) {
              return Data_Lens_Internal_Wander.wander(dictWander)(function (dictApplicative) {
                  return function (coalg) {
                      return function (m) {
                          return Data_Maybe.maybe(Control_Applicative.pure(dictApplicative)(m))(function ($21) {
                              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(function (v) {
                                  return Data_Map_Internal.insert(dictOrd)(k)(v)(m);
                              })(coalg($21));
                          })(Data_Map_Internal.lookup(dictOrd)(k)(m));
                      };
                  };
              });
          };
      });
  };
  exports["Index"] = Index;
  exports["ix"] = ix;
  exports["indexMap"] = indexMap;
})(PS["Data.Lens.Index"] = PS["Data.Lens.Index"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Lens = PS["Data.Lens"];
  var Data_Lens_Index = PS["Data.Lens.Index"];
  var Data_Lens_Lens = PS["Data.Lens.Lens"];
  var Data_Map = PS["Data.Map"];
  var Data_Map_Internal = PS["Data.Map.Internal"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Set = PS["Data.Set"];
  var Data_Unit = PS["Data.Unit"];
  var Foreign_Object = PS["Foreign.Object"];
  var Prelude = PS["Prelude"];                 
  var At = function (Index0, at) {
      this.Index0 = Index0;
      this.at = at;
  }; 
  var atMap = function (dictOrd) {
      return new At(function () {
          return Data_Lens_Index.indexMap(dictOrd);
      }, function (k) {
          return function (dictStrong) {
              return Data_Lens_Lens.lens(Data_Map_Internal.lookup(dictOrd)(k))(function (m) {
                  return Data_Maybe.maybe(Data_Map_Internal["delete"](dictOrd)(k)(m))(function (v) {
                      return Data_Map_Internal.insert(dictOrd)(k)(v)(m);
                  });
              })(dictStrong);
          };
      });
  }; 
  var at = function (dict) {
      return dict.at;
  };
  exports["At"] = At;
  exports["at"] = at;
  exports["atMap"] = atMap;
})(PS["Data.Lens.At"] = PS["Data.Lens.At"] || {});
(function(exports) {
    "use strict";

  exports.error = function (msg) {
    return new Error(msg);
  };

  exports.throwException = function (e) {
    return function () {
      throw e;
    };
  };
})(PS["Effect.Exception"] = PS["Effect.Exception"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Effect.Exception"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Show = PS["Data.Show"];
  var Effect = PS["Effect"];
  var Prelude = PS["Prelude"];
  var $$throw = function ($1) {
      return $foreign.throwException($foreign.error($1));
  };
  exports["throw"] = $$throw;
})(PS["Effect.Exception"] = PS["Effect.Exception"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Lens_Internal_Market = PS["Data.Lens.Internal.Market"];
  var Data_Lens_Internal_Tagged = PS["Data.Lens.Internal.Tagged"];
  var Data_Lens_Types = PS["Data.Lens.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Profunctor = PS["Data.Profunctor"];
  var Data_Profunctor_Choice = PS["Data.Profunctor.Choice"];
  var Prelude = PS["Prelude"];                                                                                                                        
  var prism = function (to) {
      return function (fro) {
          return function (dictChoice) {
              return function (pab) {
                  return Data_Profunctor.dimap(dictChoice.Profunctor0())(fro)(Data_Either.either(Control_Category.identity(Control_Category.categoryFn))(Control_Category.identity(Control_Category.categoryFn)))(Data_Profunctor_Choice.right(dictChoice)(Data_Profunctor.rmap(dictChoice.Profunctor0())(to)(pab)));
              };
          };
      };
  };
  exports["prism"] = prism;
})(PS["Data.Lens.Prism"] = PS["Data.Lens.Prism"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_Lens_Prism = PS["Data.Lens.Prism"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  var _Just = function (dictChoice) {
      return Data_Lens_Prism.prism(Data_Maybe.Just.create)(Data_Maybe.maybe(new Data_Either.Left(Data_Maybe.Nothing.value))(Data_Either.Right.create))(dictChoice);
  };
  exports["_Just"] = _Just;
})(PS["Data.Lens.Prism.Maybe"] = PS["Data.Lens.Prism.Maybe"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array = PS["Data.Array"];
  var Data_Char = PS["Data.Char"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Int = PS["Data.Int"];
  var Data_Lens_Getter = PS["Data.Lens.Getter"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_String = PS["Data.String"];
  var Data_String_CodeUnits = PS["Data.String.CodeUnits"];
  var Data_String_Common = PS["Data.String.Common"];
  var Data_String_Pattern = PS["Data.String.Pattern"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Tuple_Nested = PS["Data.Tuple.Nested"];
  var Effect_Exception_Unsafe = PS["Effect.Exception.Unsafe"];
  var $$Math = PS["Math"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var Types = PS["Types"];
  var Utils = PS["Utils"];                 
  var W = (function () {
      function W() {

      };
      W.value = new W();
      return W;
  })();
  var E = (function () {
      function E() {

      };
      E.value = new E();
      return E;
  })();
  var tilesAlongSide = 17;
  var tileSize = 11;
  var mapSize = tileSize * tilesAlongSide | 0;
  var eqBasicTile = new Data_Eq.Eq(function (v) {
      return function (v1) {
          if (v instanceof W && v1 instanceof W) {
              return true;
          };
          if (v instanceof E && v1 instanceof E) {
              return true;
          };
          return false;
      };
  });
  exports["tilesAlongSide"] = tilesAlongSide;
  exports["mapSize"] = mapSize;
  exports["tileSize"] = tileSize;
  exports["W"] = W;
  exports["E"] = E;
  exports["eqBasicTile"] = eqBasicTile;
})(PS["LevelMap"] = PS["LevelMap"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_State_Trans = PS["Control.Monad.State.Trans"];
  var Control_Monad_Writer_Trans = PS["Control.Monad.Writer.Trans"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array = PS["Data.Array"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Int = PS["Data.Int"];
  var Data_Lens = PS["Data.Lens"];
  var Data_Lens_At = PS["Data.Lens.At"];
  var Data_Lens_Getter = PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = PS["Data.Lens.Internal.Forget"];
  var Data_Lens_Internal_Wander = PS["Data.Lens.Internal.Wander"];
  var Data_Lens_Lens_Tuple = PS["Data.Lens.Lens.Tuple"];
  var Data_Lens_Prism_Maybe = PS["Data.Lens.Prism.Maybe"];
  var Data_Lens_Setter = PS["Data.Lens.Setter"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Map = PS["Data.Map"];
  var Data_Map_Internal = PS["Data.Map.Internal"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Profunctor_Strong = PS["Data.Profunctor.Strong"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Tuple_Nested = PS["Data.Tuple.Nested"];
  var Effect_Exception_Unsafe = PS["Effect.Exception.Unsafe"];
  var LevelMap = PS["LevelMap"];
  var $$Math = PS["Math"];
  var Prelude = PS["Prelude"];
  var Types = PS["Types"];
  var Utils = PS["Utils"];                 
  var respawnLength = 60;
  var removePlayer = function (pId) {
      return Data_Lens_Setter.set(function ($97) {
          return Types.players(Data_Profunctor_Strong.strongFn)(Data_Lens_At.at(Data_Lens_At.atMap(Types.ordPlayerId))(pId)(Data_Profunctor_Strong.strongFn)($97));
      })(Data_Maybe.Nothing.value);
  };
  var rampageLength = 180;
  var player = function (pId) {
      return function (dictWander) {
          return function ($98) {
              return Types.players(dictWander.Strong0())(Data_Lens_At.at(Data_Lens_At.atMap(Types.ordPlayerId))(pId)(dictWander.Strong0())(Data_Lens_Prism_Maybe._Just(dictWander.Choice1())($98)));
          };
      };
  };
  var minPlayers = 2;      
  var checkEnded = function (g) {
      if (Data_Map_Internal.isEmpty(Data_Lens_Getter.viewOn(g)(Types.items(Data_Lens_Internal_Forget.strongForget))) && Data_Maybe.isNothing(g.rampage)) {
          return new Data_Maybe.Just(Types.Completed.value);
      };
      if (Data_List.length(Data_Map_Internal.values(Data_Lens_Getter.viewOn(g)(Types.players(Data_Lens_Internal_Forget.strongForget)))) < minPlayers) {
          return new Data_Maybe.Just(Types.TooManyPlayersDisconnected.value);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.Nothing.value;
      };
      throw new Error("Failed pattern match at Game line 342, column 1 - line 342, column 42: " + [ g.constructor.name ]);
  };
  var isEnded = function ($101) {
      return Data_Maybe.isJust(checkEnded($101));
  };
  var applyPlayerUpdate = function (u) {
      if (u instanceof Types.ChangedPosition) {
          return Data_Lens_Setter.set(Types.pPosition(Data_Profunctor_Strong.strongFn))(u.value0);
      };
      if (u instanceof Types.ChangedDirection) {
          return Data_Lens_Setter.set(Types.pDirection(Data_Profunctor_Strong.strongFn))(u.value0);
      };
      if (u instanceof Types.ChangedIntendedDirection) {
          return Data_Lens_Setter.set(Types.pIntendedDirection(Data_Profunctor_Strong.strongFn))(u.value0);
      };
      if (u instanceof Types.ChangedScore) {
          return Data_Lens_Setter.set(Types.pScore(Data_Profunctor_Strong.strongFn))(u.value0);
      };
      if (u instanceof Types.ChangedNomIndex) {
          return Data_Lens_Setter.set(Types.pNomIndex(Data_Profunctor_Strong.strongFn))(u.value0);
      };
      if (u instanceof Types.ChangedRespawnCounter) {
          return Data_Lens_Setter.set(Types.pRespawnCounter(Data_Profunctor_Strong.strongFn))(u.value0);
      };
      if (u instanceof Types.PlayerLeft) {
          return Control_Category.identity(Control_Category.categoryFn);
      };
      throw new Error("Failed pattern match at Game line 73, column 3 - line 80, column 43: " + [ u.constructor.name ]);
  };
  var applyItemUpdate = function (u) {
      return Data_Function["const"](Data_Maybe.Nothing.value);
  };
  var applyGameUpdate = function (u) {
      var setCountdown = function (x) {
          return function (game) {
              return {
                  countdown: x,
                  items: game.items,
                  map: game.map,
                  players: game.players,
                  rampage: game.rampage,
                  safeZone: game.safeZone
              };
          };
      };
      if (u instanceof Types.GUPU && u.value1 instanceof Types.PlayerLeft) {
          return removePlayer(u.value0);
      };
      if (u instanceof Types.GUPU) {
          return Data_Lens_Setter.over(player(u.value0)(Data_Lens_Internal_Wander.wanderFunction))(applyPlayerUpdate(u.value1));
      };
      if (u instanceof Types.GUIU) {
          return Data_Lens_Setter.over(function ($104) {
              return Types.items(Data_Profunctor_Strong.strongFn)(Data_Lens_At.at(Data_Lens_At.atMap(Data_Ord.ordInt))(u.value0)(Data_Profunctor_Strong.strongFn)($104));
          })(applyItemUpdate(u.value1));
      };
      if (u instanceof Types.ChangedCountdown) {
          return setCountdown(u.value0);
      };
      if (u instanceof Types.GameEnded) {
          return Control_Category.identity(Control_Category.categoryFn);
      };
      if (u instanceof Types.ChangedRampage) {
          return function (g) {
              return {
                  map: g.map,
                  players: g.players,
                  items: g.items,
                  countdown: g.countdown,
                  rampage: u.value0,
                  safeZone: g.safeZone
              };
          };
      };
      throw new Error("Failed pattern match at Game line 49, column 3 - line 61, column 30: " + [ u.constructor.name ]);
  };
  var applyGameUpdates = function (dictFoldable) {
      return function (updates) {
          return function (game) {
              return Data_Foldable.foldr(dictFoldable)(applyGameUpdate)(game)(updates);
          };
      };
  };
  exports["minPlayers"] = minPlayers;
  exports["rampageLength"] = rampageLength;
  exports["respawnLength"] = respawnLength;
  exports["player"] = player;
  exports["applyGameUpdate"] = applyGameUpdate;
  exports["applyGameUpdates"] = applyGameUpdates;
  exports["removePlayer"] = removePlayer;
  exports["applyPlayerUpdate"] = applyPlayerUpdate;
  exports["applyItemUpdate"] = applyItemUpdate;
  exports["checkEnded"] = checkEnded;
  exports["isEnded"] = isEnded;
})(PS["Game"] = PS["Game"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Unfoldable1 = PS["Data.Unfoldable1"];
  var Prelude = PS["Prelude"];                 
  var CatQueue = (function () {
      function CatQueue(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      CatQueue.create = function (value0) {
          return function (value1) {
              return new CatQueue(value0, value1);
          };
      };
      return CatQueue;
  })();
  var uncons = function ($copy_v) {
      var $tco_done = false;
      var $tco_result;
      function $tco_loop(v) {
          if (v.value0 instanceof Data_List_Types.Nil && v.value1 instanceof Data_List_Types.Nil) {
              $tco_done = true;
              return Data_Maybe.Nothing.value;
          };
          if (v.value0 instanceof Data_List_Types.Nil) {
              $copy_v = new CatQueue(Data_List.reverse(v.value1), Data_List_Types.Nil.value);
              return;
          };
          if (v.value0 instanceof Data_List_Types.Cons) {
              $tco_done = true;
              return new Data_Maybe.Just(new Data_Tuple.Tuple(v.value0.value0, new CatQueue(v.value0.value1, v.value1)));
          };
          throw new Error("Failed pattern match at Data.CatQueue line 83, column 1 - line 83, column 63: " + [ v.constructor.name ]);
      };
      while (!$tco_done) {
          $tco_result = $tco_loop($copy_v);
      };
      return $tco_result;
  };
  var snoc = function (v) {
      return function (a) {
          return new CatQueue(v.value0, new Data_List_Types.Cons(a, v.value1));
      };
  };
  var $$null = function (v) {
      if (v.value0 instanceof Data_List_Types.Nil && v.value1 instanceof Data_List_Types.Nil) {
          return true;
      };
      return false;
  };                                                                                                
  var empty = new CatQueue(Data_List_Types.Nil.value, Data_List_Types.Nil.value);
  exports["CatQueue"] = CatQueue;
  exports["empty"] = empty;
  exports["null"] = $$null;
  exports["snoc"] = snoc;
  exports["uncons"] = uncons;
})(PS["Data.CatQueue"] = PS["Data.CatQueue"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_CatQueue = PS["Data.CatQueue"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Unfoldable1 = PS["Data.Unfoldable1"];
  var Prelude = PS["Prelude"];                 
  var CatNil = (function () {
      function CatNil() {

      };
      CatNil.value = new CatNil();
      return CatNil;
  })();
  var CatCons = (function () {
      function CatCons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      CatCons.create = function (value0) {
          return function (value1) {
              return new CatCons(value0, value1);
          };
      };
      return CatCons;
  })();
  var link = function (v) {
      return function (cat) {
          if (v instanceof CatNil) {
              return cat;
          };
          if (v instanceof CatCons) {
              return new CatCons(v.value0, Data_CatQueue.snoc(v.value1)(cat));
          };
          throw new Error("Failed pattern match at Data.CatList line 111, column 1 - line 111, column 54: " + [ v.constructor.name, cat.constructor.name ]);
      };
  };
  var foldr = function (k) {
      return function (b) {
          return function (q) {
              var foldl = function ($copy_v) {
                  return function ($copy_c) {
                      return function ($copy_v1) {
                          var $tco_var_v = $copy_v;
                          var $tco_var_c = $copy_c;
                          var $tco_done = false;
                          var $tco_result;
                          function $tco_loop(v, c, v1) {
                              if (v1 instanceof Data_List_Types.Nil) {
                                  $tco_done = true;
                                  return c;
                              };
                              if (v1 instanceof Data_List_Types.Cons) {
                                  $tco_var_v = v;
                                  $tco_var_c = v(c)(v1.value0);
                                  $copy_v1 = v1.value1;
                                  return;
                              };
                              throw new Error("Failed pattern match at Data.CatList line 126, column 3 - line 126, column 59: " + [ v.constructor.name, c.constructor.name, v1.constructor.name ]);
                          };
                          while (!$tco_done) {
                              $tco_result = $tco_loop($tco_var_v, $tco_var_c, $copy_v1);
                          };
                          return $tco_result;
                      };
                  };
              };
              var go = function ($copy_xs) {
                  return function ($copy_ys) {
                      var $tco_var_xs = $copy_xs;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(xs, ys) {
                          var v = Data_CatQueue.uncons(xs);
                          if (v instanceof Data_Maybe.Nothing) {
                              $tco_done = true;
                              return foldl(function (x) {
                                  return function (i) {
                                      return i(x);
                                  };
                              })(b)(ys);
                          };
                          if (v instanceof Data_Maybe.Just) {
                              $tco_var_xs = v.value0.value1;
                              $copy_ys = new Data_List_Types.Cons(k(v.value0.value0), ys);
                              return;
                          };
                          throw new Error("Failed pattern match at Data.CatList line 122, column 14 - line 124, column 67: " + [ v.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_xs, $copy_ys);
                      };
                      return $tco_result;
                  };
              };
              return go(q)(Data_List_Types.Nil.value);
          };
      };
  };
  var uncons = function (v) {
      if (v instanceof CatNil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof CatCons) {
          return new Data_Maybe.Just(new Data_Tuple.Tuple(v.value0, (function () {
              var $45 = Data_CatQueue["null"](v.value1);
              if ($45) {
                  return CatNil.value;
              };
              return foldr(link)(CatNil.value)(v.value1);
          })()));
      };
      throw new Error("Failed pattern match at Data.CatList line 102, column 1 - line 102, column 61: " + [ v.constructor.name ]);
  };
  var foldableCatList = new Data_Foldable.Foldable(function (dictMonoid) {
      return Data_Foldable.foldMapDefaultL(foldableCatList)(dictMonoid);
  }, function (f) {
      var go = function ($copy_acc) {
          return function ($copy_q) {
              var $tco_var_acc = $copy_acc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(acc, q) {
                  var v = uncons(q);
                  if (v instanceof Data_Maybe.Just) {
                      $tco_var_acc = f(acc)(v.value0.value0);
                      $copy_q = v.value0.value1;
                      return;
                  };
                  if (v instanceof Data_Maybe.Nothing) {
                      $tco_done = true;
                      return acc;
                  };
                  throw new Error("Failed pattern match at Data.CatList line 158, column 16 - line 160, column 22: " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_acc, $copy_q);
              };
              return $tco_result;
          };
      };
      return go;
  }, function (f) {
      return function (s) {
          return function (l) {
              return Data_Foldable.foldrDefault(foldableCatList)(f)(s)(l);
          };
      };
  });                                                                           
  var foldMap = function (dictMonoid) {
      return function (f) {
          return function (v) {
              if (v instanceof CatNil) {
                  return Data_Monoid.mempty(dictMonoid);
              };
              if (v instanceof CatCons) {
                  var d = (function () {
                      var $54 = Data_CatQueue["null"](v.value1);
                      if ($54) {
                          return CatNil.value;
                      };
                      return foldr(link)(CatNil.value)(v.value1);
                  })();
                  return Data_Semigroup.append(dictMonoid.Semigroup0())(f(v.value0))(foldMap(dictMonoid)(f)(d));
              };
              throw new Error("Failed pattern match at Data.CatList line 136, column 1 - line 136, column 62: " + [ f.constructor.name, v.constructor.name ]);
          };
      };
  };
  var empty = CatNil.value;
  var append = function (v) {
      return function (v1) {
          if (v1 instanceof CatNil) {
              return v;
          };
          if (v instanceof CatNil) {
              return v1;
          };
          return link(v)(v1);
      };
  };
  var cons = function (a) {
      return function (cat) {
          return append(new CatCons(a, Data_CatQueue.empty))(cat);
      };
  };
  var functorCatList = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof CatNil) {
              return CatNil.value;
          };
          if (v1 instanceof CatCons) {
              var d = (function () {
                  var $61 = Data_CatQueue["null"](v1.value1);
                  if ($61) {
                      return CatNil.value;
                  };
                  return foldr(link)(CatNil.value)(v1.value1);
              })();
              return cons(v(v1.value0))(Data_Functor.map(functorCatList)(v)(d));
          };
          throw new Error("Failed pattern match at Data.CatList line 186, column 1 - line 186, column 43: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var singleton = function (a) {
      return cons(a)(CatNil.value);
  }; 
  var semigroupCatList = new Data_Semigroup.Semigroup(append);
  var monoidCatList = new Data_Monoid.Monoid(function () {
      return semigroupCatList;
  }, CatNil.value);
  var monadCatList = new Control_Monad.Monad(function () {
      return applicativeCatList;
  }, function () {
      return bindCatList;
  });
  var bindCatList = new Control_Bind.Bind(function () {
      return applyCatList;
  }, Data_Function.flip(foldMap(monoidCatList)));
  var applyCatList = new Control_Apply.Apply(function () {
      return functorCatList;
  }, Control_Monad.ap(monadCatList));
  var applicativeCatList = new Control_Applicative.Applicative(function () {
      return applyCatList;
  }, singleton);
  var snoc = function (cat) {
      return function (a) {
          return append(cat)(new CatCons(a, Data_CatQueue.empty));
      };
  };
  exports["CatNil"] = CatNil;
  exports["CatCons"] = CatCons;
  exports["empty"] = empty;
  exports["singleton"] = singleton;
  exports["append"] = append;
  exports["cons"] = cons;
  exports["snoc"] = snoc;
  exports["uncons"] = uncons;
  exports["semigroupCatList"] = semigroupCatList;
  exports["monoidCatList"] = monoidCatList;
  exports["foldableCatList"] = foldableCatList;
  exports["functorCatList"] = functorCatList;
  exports["applyCatList"] = applyCatList;
  exports["applicativeCatList"] = applicativeCatList;
  exports["bindCatList"] = bindCatList;
  exports["monadCatList"] = monadCatList;
})(PS["Data.CatList"] = PS["Data.CatList"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_CatList = PS["Data.CatList"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var Free = (function () {
      function Free(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Free.create = function (value0) {
          return function (value1) {
              return new Free(value0, value1);
          };
      };
      return Free;
  })();
  var Return = (function () {
      function Return(value0) {
          this.value0 = value0;
      };
      Return.create = function (value0) {
          return new Return(value0);
      };
      return Return;
  })();
  var Bind = (function () {
      function Bind(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Bind.create = function (value0) {
          return function (value1) {
              return new Bind(value0, value1);
          };
      };
      return Bind;
  })();
  var toView = function ($copy_v) {
      var $tco_done = false;
      var $tco_result;
      function $tco_loop(v) {
          var runExpF = function (v2) {
              return v2;
          };
          var concatF = function (v2) {
              return function (r) {
                  return new Free(v2.value0, Data_Semigroup.append(Data_CatList.semigroupCatList)(v2.value1)(r));
              };
          };
          if (v.value0 instanceof Return) {
              var v2 = Data_CatList.uncons(v.value1);
              if (v2 instanceof Data_Maybe.Nothing) {
                  $tco_done = true;
                  return new Return(v.value0.value0);
              };
              if (v2 instanceof Data_Maybe.Just) {
                  $copy_v = concatF(runExpF(v2.value0.value0)(v.value0.value0))(v2.value0.value1);
                  return;
              };
              throw new Error("Failed pattern match at Control.Monad.Free line 220, column 7 - line 224, column 64: " + [ v2.constructor.name ]);
          };
          if (v.value0 instanceof Bind) {
              $tco_done = true;
              return new Bind(v.value0.value0, function (a) {
                  return concatF(v.value0.value1(a))(v.value1);
              });
          };
          throw new Error("Failed pattern match at Control.Monad.Free line 218, column 3 - line 226, column 56: " + [ v.value0.constructor.name ]);
      };
      while (!$tco_done) {
          $tco_result = $tco_loop($copy_v);
      };
      return $tco_result;
  };
  var fromView = function (f) {
      return new Free(f, Data_CatList.empty);
  };
  var freeMonad = new Control_Monad.Monad(function () {
      return freeApplicative;
  }, function () {
      return freeBind;
  });
  var freeFunctor = new Data_Functor.Functor(function (k) {
      return function (f) {
          return Control_Bind.bindFlipped(freeBind)(function ($118) {
              return Control_Applicative.pure(freeApplicative)(k($118));
          })(f);
      };
  });
  var freeBind = new Control_Bind.Bind(function () {
      return freeApply;
  }, function (v) {
      return function (k) {
          return new Free(v.value0, Data_CatList.snoc(v.value1)(k));
      };
  });
  var freeApply = new Control_Apply.Apply(function () {
      return freeFunctor;
  }, Control_Monad.ap(freeMonad));
  var freeApplicative = new Control_Applicative.Applicative(function () {
      return freeApply;
  }, function ($119) {
      return fromView(Return.create($119));
  });
  var liftF = function (f) {
      return fromView(new Bind(f, function ($120) {
          return Control_Applicative.pure(freeApplicative)($120);
      }));
  }; 
  var substFree = function (k) {
      var go = function (f) {
          var v = toView(f);
          if (v instanceof Return) {
              return Control_Applicative.pure(freeApplicative)(v.value0);
          };
          if (v instanceof Bind) {
              return Control_Bind.bind(freeBind)(k(v.value0))(Data_Functor.map(Data_Functor.functorFn)(go)(v.value1));
          };
          throw new Error("Failed pattern match at Control.Monad.Free line 161, column 10 - line 163, column 33: " + [ v.constructor.name ]);
      };
      return go;
  };
  var hoistFree = function (k) {
      return substFree(function ($121) {
          return liftF(k($121));
      });
  };
  var foldFree = function (dictMonadRec) {
      return function (k) {
          var go = function (f) {
              var v = toView(f);
              if (v instanceof Return) {
                  return Data_Functor.map((((dictMonadRec.Monad0()).Bind1()).Apply0()).Functor0())(Control_Monad_Rec_Class.Done.create)(Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(v.value0));
              };
              if (v instanceof Bind) {
                  return Data_Functor.map((((dictMonadRec.Monad0()).Bind1()).Apply0()).Functor0())(function ($127) {
                      return Control_Monad_Rec_Class.Loop.create(v.value1($127));
                  })(k(v.value0));
              };
              throw new Error("Failed pattern match at Control.Monad.Free line 151, column 10 - line 153, column 37: " + [ v.constructor.name ]);
          };
          return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(go);
      };
  };
  exports["liftF"] = liftF;
  exports["hoistFree"] = hoistFree;
  exports["foldFree"] = foldFree;
  exports["substFree"] = substFree;
  exports["freeFunctor"] = freeFunctor;
  exports["freeBind"] = freeBind;
  exports["freeApplicative"] = freeApplicative;
  exports["freeApply"] = freeApply;
  exports["freeMonad"] = freeMonad;
})(PS["Control.Monad.Free"] = PS["Control.Monad.Free"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Int = PS["Data.Int"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var LevelMap = PS["LevelMap"];
  var $$Math = PS["Math"];
  var Prelude = PS["Prelude"];
  var Types = PS["Types"];                 
  var tileColor = "hsl(200, 80%, 40%)";
  var rampagePlayerColor = "hsl(55, 90%, 60%)";
  var pxPerTile = 35.0;
  var pxPerBlock = pxPerTile / Data_Int.toNumber(LevelMap.tileSize);
  var playerRadius = $$Math.floor(pxPerTile / 2.2);
  var playerColor = function (pId) {
      var hue = (function () {
          if (pId instanceof Types.P1) {
              return 0;
          };
          if (pId instanceof Types.P2) {
              return 90;
          };
          if (pId instanceof Types.P3) {
              return 180;
          };
          if (pId instanceof Types.P4) {
              return 270;
          };
          throw new Error("Failed pattern match at Style line 24, column 9 - line 29, column 3: " + [ pId.constructor.name ]);
      })();
      return "hsl(" + (Data_Show.show(Data_Show.showInt)(hue) + ", 100%, 60%)");
  };
  var littleDotRadius = pxPerBlock;                               
  var fontName = "Exo";
  var fontColor = "#dfd1a5";
  var fleeingFlashColor = "hsl(160, 100%, 60%)";
  var dotColor = "#eecccc";
  var cornerSize = $$Math.floor(pxPerTile / 3.0);
  var cornerMid = $$Math.floor(cornerSize / 2.0);
  var cornerRadius = cornerMid;
  var canvasSize = pxPerBlock * Data_Int.toNumber(LevelMap.mapSize);
  var bigDotRadius = littleDotRadius * 3.0;
  var dotRadiusFor = function (v) {
      if (v instanceof Types.LittleDot) {
          return littleDotRadius;
      };
      if (v instanceof Types.BigDot) {
          return bigDotRadius;
      };
      throw new Error("Failed pattern match at Style line 39, column 1 - line 39, column 41: " + [ v.constructor.name ]);
  };
  exports["fontName"] = fontName;
  exports["fontColor"] = fontColor;
  exports["tileColor"] = tileColor;
  exports["dotColor"] = dotColor;
  exports["rampagePlayerColor"] = rampagePlayerColor;
  exports["fleeingFlashColor"] = fleeingFlashColor;
  exports["playerColor"] = playerColor;
  exports["pxPerTile"] = pxPerTile;
  exports["pxPerBlock"] = pxPerBlock;
  exports["canvasSize"] = canvasSize;
  exports["playerRadius"] = playerRadius;
  exports["littleDotRadius"] = littleDotRadius;
  exports["bigDotRadius"] = bigDotRadius;
  exports["dotRadiusFor"] = dotRadiusFor;
  exports["cornerSize"] = cornerSize;
  exports["cornerMid"] = cornerMid;
  exports["cornerRadius"] = cornerRadius;
})(PS["Style"] = PS["Style"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Monad_Free = PS["Control.Monad.Free"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_CatList = PS["Data.CatList"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];                 
  var HTMLns = (function () {
      function HTMLns() {

      };
      HTMLns.value = new HTMLns();
      return HTMLns;
  })();
  var SVGns = (function () {
      function SVGns() {

      };
      SVGns.value = new SVGns();
      return SVGns;
  })();
  var Attr = (function () {
      function Attr(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Attr.create = function (value0) {
          return function (value1) {
              return new Attr(value0, value1);
          };
      };
      return Attr;
  })();
  var Attribute = (function () {
      function Attribute(value0) {
          this.value0 = value0;
      };
      Attribute.create = function (value0) {
          return new Attribute(value0);
      };
      return Attribute;
  })();
  var Element = (function () {
      function Element(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      Element.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new Element(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return Element;
  })();
  var Content = (function () {
      function Content(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Content.create = function (value0) {
          return function (value1) {
              return new Content(value0, value1);
          };
      };
      return Content;
  })();
  var Empty = (function () {
      function Empty(value0) {
          this.value0 = value0;
      };
      Empty.create = function (value0) {
          return new Empty(value0);
      };
      return Empty;
  })();
  var Attributable = function ($$with) {
      this["with"] = $$with;
  };
  var $$with = function (dict) {
      return dict["with"];
  };
  var text = function (s) {
      return Control_Monad_Free.liftF(new Content(s, Data_Unit.unit));
  }; 
  var parent = function (ns) {
      return function (el) {
          return function (kids) {
              return Control_Monad_Free.liftF(new Element(ns, el, kids, Data_Monoid.mempty(Data_CatList.monoidCatList), Data_Monoid.mempty(Data_CatList.monoidCatList), Data_Unit.unit));
          };
      };
  }; 
  var attribute = function (key) {
      return function (value) {
          return new Attribute(Control_Applicative.pure(Data_CatList.applicativeCatList)(new Attr(key, value)));
      };
  };
  var attributableMarkup = new Attributable(function (f) {
      return function (v) {
          var withF = function (v1) {
              if (v1 instanceof Element) {
                  return new Element(v1.value0, v1.value1, v1.value2, Data_Semigroup.append(Data_CatList.semigroupCatList)(v1.value3)(v.value0), v1.value4, v1.value5);
              };
              return v1;
          };
          return Control_Monad_Free.hoistFree(withF)(f);
      };
  });
  var attributableMarkupF = new Attributable(function (k) {
      return function (xs) {
          return function (m) {
              return $$with(attributableMarkup)(k(m))(xs);
          };
      };
  });
  exports["Element"] = Element;
  exports["Content"] = Content;
  exports["Empty"] = Empty;
  exports["HTMLns"] = HTMLns;
  exports["SVGns"] = SVGns;
  exports["Attr"] = Attr;
  exports["parent"] = parent;
  exports["text"] = text;
  exports["Attributable"] = Attributable;
  exports["with"] = $$with;
  exports["attribute"] = attribute;
  exports["attributableMarkup"] = attributableMarkup;
  exports["attributableMarkupF"] = attributableMarkupF;
})(PS["Text.Smolder.Markup"] = PS["Text.Smolder.Markup"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Text_Smolder_Markup = PS["Text.Smolder.Markup"];                 
  var parent = Text_Smolder_Markup.parent(Text_Smolder_Markup.HTMLns.value);
  var p = parent("p");  
  var h2 = parent("h2");
  var div = parent("div");
  exports["parent"] = parent;
  exports["div"] = div;
  exports["h2"] = h2;
  exports["p"] = p;
})(PS["Text.Smolder.HTML"] = PS["Text.Smolder.HTML"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Text_Smolder_Markup = PS["Text.Smolder.Markup"];
  var className = Text_Smolder_Markup.attribute("class");
  exports["className"] = className;
})(PS["Text.Smolder.HTML.Attributes"] = PS["Text.Smolder.HTML.Attributes"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Free = PS["Control.Monad.Free"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array = PS["Data.Array"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Lens_Getter = PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = PS["Data.Lens.Internal.Forget"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Map = PS["Data.Map"];
  var Data_Map_Internal = PS["Data.Map.Internal"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_String = PS["Data.String"];
  var Data_String_Common = PS["Data.String.Common"];
  var Data_String_Pattern = PS["Data.String.Pattern"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Tuple_Nested = PS["Data.Tuple.Nested"];
  var Prelude = PS["Prelude"];
  var Style = PS["Style"];
  var Text_Smolder_HTML = PS["Text.Smolder.HTML"];
  var Text_Smolder_HTML_Attributes = PS["Text.Smolder.HTML.Attributes"];
  var Text_Smolder_Markup = PS["Text.Smolder.Markup"];
  var Types = PS["Types"];
  var Utils = PS["Utils"];
  var getPlayerInfo = function (playersMap) {
      return function (v) {
          return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Map_Internal.lookup(Types.ordPlayerId)(v.value0)(playersMap))(function (v1) {
              return Control_Applicative.pure(Data_Maybe.applicativeMaybe)({
                  score: Data_Lens_Getter.viewOn(v.value1)(Types.pScore(Data_Lens_Internal_Forget.strongForget)),
                  name: v1,
                  pId: v.value0
              });
          });
      };
  };
  var playerInfos = function (game) {
      return function (playersMap) {
          var allPlayers = Data_Map_Internal.toUnfoldable(Data_List_Types.unfoldableList)(Data_Lens_Getter.viewOn(game)(Types.players(Data_Lens_Internal_Forget.strongForget)));
          return Data_List.catMaybes(Data_Functor.map(Data_List_Types.functorList)(getPlayerInfo(playersMap))(allPlayers));
      };
  };
  var scoresTable = function (pId) {
      return function (playersMap) {
          return function (game) {
              var scoresCellDiv = function (classes) {
                  return function (innerText) {
                      return Text_Smolder_Markup["with"](Text_Smolder_Markup.attributableMarkupF)(Text_Smolder_HTML.div)(Text_Smolder_HTML_Attributes.className(Data_String_Common.joinWith(" ")(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ "scores-cell" ])(classes))))(Text_Smolder_Markup.text(innerText));
                  };
              };
              var score = function (i) {
                  return i.score;
              };
              var sortedPlayerInfos = function (game1) {
                  return Data_List.reverse(Data_List.sortBy(Data_Function.on(Data_Ord.compare(Data_Ord.ordInt))(score))(playerInfos(game1)(playersMap)));
              };
              return Text_Smolder_Markup["with"](Text_Smolder_Markup.attributableMarkupF)(Text_Smolder_HTML.div)(Text_Smolder_HTML_Attributes.className("scores clearfix"))(Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Free.freeBind)(Text_Smolder_Markup["with"](Text_Smolder_Markup.attributableMarkupF)(Text_Smolder_HTML.h2)(Text_Smolder_HTML_Attributes.className("scores-header"))(Text_Smolder_Markup.text("scores")))(function () {
                  return Text_Smolder_Markup["with"](Text_Smolder_Markup.attributableMarkupF)(Text_Smolder_HTML.div)(Text_Smolder_HTML_Attributes.className("scores-table"))(Data_Foldable.for_(Control_Monad_Free.freeApplicative)(Data_List_Types.foldableList)(sortedPlayerInfos(game))(function (info) {
                      var cl = "scores-row" + (function () {
                          var $13 = Data_Eq.eq(Types.eqPlayerId)(info.pId)(pId);
                          if ($13) {
                              return " is-you";
                          };
                          return "";
                      })();
                      return Text_Smolder_Markup["with"](Text_Smolder_Markup.attributableMarkupF)(Text_Smolder_HTML.div)(Text_Smolder_HTML_Attributes.className(cl))((function () {
                          var pIdStr = Types.displayPlayerId(info.pId);
                          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Free.freeBind)(scoresCellDiv([ "cell-thin", "player-" + pIdStr ])(pIdStr))(function () {
                              return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Free.freeBind)(scoresCellDiv([ "cell-wide" ])(info.name))(function () {
                                  return scoresCellDiv([ "cell-thin", "score" ])(Data_Show.show(Data_Show.showInt)(info.score));
                              });
                          });
                      })());
                  }));
              }));
          };
      };
  };
  var waitingMessage = function (sw) {
      return function (pId) {
          return function (playersMap) {
              var getPlayerInfo1 = function (pId$prime$prime) {
                  return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Map_Internal.lookup(Types.ordPlayerId)(pId$prime$prime)(sw.readyStates))(function (v) {
                      return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Map_Internal.lookup(Types.ordPlayerId)(pId$prime$prime)(playersMap))(function (v1) {
                          return Control_Applicative.pure(Data_Maybe.applicativeMaybe)({
                              ready: v,
                              name: v1
                          });
                      });
                  });
              };
              return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Free.freeBind)(Utils.whenJust(Control_Monad_Free.freeApplicative)(sw.prevGame)(scoresTable(pId)(playersMap)))(function () {
                  var r = Data_Maybe.fromMaybe(Types.NotReady.value)(Data_Map_Internal.lookup(Types.ordPlayerId)(pId)(sw.readyStates));
                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Free.freeBind)(Text_Smolder_HTML.p(Text_Smolder_Markup.text((function () {
                      if (r instanceof Types.Ready) {
                          return "Waiting for other players...";
                      };
                      if (r instanceof Types.NotReady) {
                          return "Press SPACE when you're ready";
                      };
                      throw new Error("Failed pattern match at HtmlViews line 296, column 14 - line 300, column 3: " + [ r.constructor.name ]);
                  })())))(function () {
                      return Text_Smolder_Markup["with"](Text_Smolder_Markup.attributableMarkupF)(Text_Smolder_HTML.div)(Text_Smolder_HTML_Attributes.className("clearfix"))(Data_Foldable.for_(Control_Monad_Free.freeApplicative)(Data_Foldable.foldableArray)(Types.allPlayerIds)(function (pId$prime) {
                          var mInfo = getPlayerInfo1(pId$prime);
                          var cl = "ready-state" + ((function () {
                              var $17 = Data_Eq.eq(Types.eqPlayerId)(pId$prime)(pId);
                              if ($17) {
                                  return " is-you";
                              };
                              return "";
                          })() + (function () {
                              var $18 = Data_Maybe.isJust(mInfo);
                              if ($18) {
                                  return "";
                              };
                              return " not-connected";
                          })());
                          return Text_Smolder_Markup["with"](Text_Smolder_Markup.attributableMarkupF)(Text_Smolder_HTML.div)(Text_Smolder_HTML_Attributes.className(cl))((function () {
                              var pId$primestr = Types.displayPlayerId(pId$prime);
                              var cl$prime = "player-" + pId$primestr;
                              return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Free.freeBind)(Text_Smolder_Markup["with"](Text_Smolder_Markup.attributableMarkupF)(Text_Smolder_HTML.p)(Text_Smolder_HTML_Attributes.className(cl$prime))(Text_Smolder_Markup.text(pId$primestr)))(function () {
                                  return Utils.whenJust(Control_Monad_Free.freeApplicative)(mInfo)(function (info) {
                                      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Free.freeBind)(Text_Smolder_HTML.p(Text_Smolder_Markup.text(info.name)))(function () {
                                          return Text_Smolder_HTML.p(Text_Smolder_Markup.text((function () {
                                              if (info.ready instanceof Types.Ready) {
                                                  return "ready!";
                                              };
                                              if (info.ready instanceof Types.NotReady) {
                                                  return "not ready";
                                              };
                                              throw new Error("Failed pattern match at HtmlViews line 313, column 22 - line 316, column 3: " + [ info.ready.constructor.name ]);
                                          })()));
                                      });
                                  });
                              });
                          })());
                      }));
                  });
              });
          };
      };
  };
  var simpleScores = function (playersMap) {
      return function (game) {
          var scoresCellDiv = function (classes) {
              return function (innerText) {
                  return Text_Smolder_Markup["with"](Text_Smolder_Markup.attributableMarkupF)(Text_Smolder_HTML.div)(Text_Smolder_HTML_Attributes.className(Data_String_Common.joinWith(" ")(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ "scores-cell" ])(classes))))(Text_Smolder_Markup.text(innerText));
              };
          };
          return Text_Smolder_Markup["with"](Text_Smolder_Markup.attributableMarkupF)(Text_Smolder_HTML.div)(Text_Smolder_HTML_Attributes.className("simple-scores"))(Data_Foldable.for_(Control_Monad_Free.freeApplicative)(Data_List_Types.foldableList)(playerInfos(game)(playersMap))(function (info) {
              var pId = Types.displayPlayerId(info.pId);
              return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Free.freeBind)(scoresCellDiv([ "cell-thinnest", "player-" + pId ])(pId))(function () {
                  return scoresCellDiv([ "cell-thinnest", "score" ])(Data_Show.show(Data_Show.showInt)(info.score));
              });
          }));
      };
  };
  exports["waitingMessage"] = waitingMessage;
  exports["scoresTable"] = scoresTable;
  exports["playerInfos"] = playerInfos;
  exports["getPlayerInfo"] = getPlayerInfo;
  exports["simpleScores"] = simpleScores;
})(PS["HtmlViews"] = PS["HtmlViews"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var CanvasM = PS["CanvasM"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Reader_Trans = PS["Control.Monad.Reader.Trans"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array = PS["Data.Array"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Int = PS["Data.Int"];
  var Data_Lens_At = PS["Data.Lens.At"];
  var Data_Lens_Getter = PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = PS["Data.Lens.Internal.Forget"];
  var Data_Lens_Prism_Maybe = PS["Data.Lens.Prism.Maybe"];
  var Data_Map = PS["Data.Map"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Profunctor_Strong = PS["Data.Profunctor.Strong"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Tuple_Nested = PS["Data.Tuple.Nested"];
  var Data_Unit = PS["Data.Unit"];
  var Effect = PS["Effect"];
  var Effect_Exception = PS["Effect.Exception"];
  var Game = PS["Game"];
  var Graphics_Canvas = PS["Graphics.Canvas"];
  var LevelMap = PS["LevelMap"];
  var $$Math = PS["Math"];
  var Prelude = PS["Prelude"];
  var Style = PS["Style"];
  var Types = PS["Types"];
  var Utils = PS["Utils"];                 
  var CRO = (function () {
      function CRO() {

      };
      CRO.value = new CRO();
      return CRO;
  })();
  var CRI = (function () {
      function CRI() {

      };
      CRI.value = new CRI();
      return CRI;
  })();
  var CSH = (function () {
      function CSH() {

      };
      CSH.value = new CSH();
      return CSH;
  })();
  var CSV = (function () {
      function CSV() {

      };
      CSV.value = new CSV();
      return CSV;
  })();
  var NON = (function () {
      function NON() {

      };
      NON.value = new NON();
      return NON;
  })();
  var wholeCanvas = {
      x: 0.0,
      y: 0.0,
      height: Style.canvasSize,
      width: Style.canvasSize
  };
  var toPosition = function (r) {
      return {
          x: r.x,
          y: r.y
      };
  };
  var toBasic = function (v) {
      if (v instanceof Types.Inaccessible) {
          return LevelMap.W.value;
      };
      return LevelMap.E.value;
  };
  var setupRenderingById = function (elId) {
      var justOrErr = function (v) {
          if (v instanceof Data_Maybe.Just) {
              return Control_Applicative.pure(Effect.applicativeEffect)(v.value0);
          };
          if (v instanceof Data_Maybe.Nothing) {
              return Effect_Exception["throw"]("no canvas element found with id = " + elId);
          };
          throw new Error("Failed pattern match at Rendering line 73, column 3 - line 73, column 45: " + [ v.constructor.name ]);
      };
      return function __do() {
          var v = Control_Bind.bind(Effect.bindEffect)(Graphics_Canvas.getCanvasElementById(elId))(justOrErr)();
          Graphics_Canvas.setCanvasHeight(v)(Style.canvasSize)();
          Graphics_Canvas.setCanvasWidth(v)(Style.canvasSize)();
          return Graphics_Canvas.getContext2D(v)();
      };
  };
  var setupRendering = function __do() {
      var v = setupRenderingById("foreground")();
      var v1 = setupRenderingById("background")();
      return {
          foreground: v,
          background: v1
      };
  };
  var setFontSize = function (x) {
      return CanvasM.setFont(Data_Show.show(Data_Show.showNumber)(x) + ("pt " + Style.fontName));
  }; 
  var scaleRect = function (scale) {
      return function (v) {
          return {
              x: v.x * scale,
              y: v.y * scale,
              height: scale,
              width: scale
          };
      };
  };
  var renderEdges = function (es) {
      var s = Style.pxPerTile / 2.0 - Style.cornerSize;
      var x1 = -s - 1.0;
      var y1 = -s - Style.cornerSize / 2.0;
      var renderEdge = function (e) {
          return Control_Applicative.when(Control_Monad_Reader_Trans.applicativeReaderT(Effect.applicativeEffect))(Data_Eq.eq(LevelMap.eqBasicTile)(e)(LevelMap.E.value))(Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(CanvasM.moveTo(x1)(y1))(function () {
              return CanvasM.lineTo(s)(y1);
          }));
      };
      var es$prime = [ {
          e: es.t,
          a: 0.0
      }, {
          e: es.r,
          a: $$Math.pi / 2.0
      }, {
          e: es.b,
          a: $$Math.pi
      }, {
          e: es.l,
          a: 1.5 * $$Math.pi
      } ];
      return Data_Foldable.for_(Control_Monad_Reader_Trans.applicativeReaderT(Effect.applicativeEffect))(Data_Foldable.foldableArray)(es$prime)(function (e) {
          return CanvasM.withContext(Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(CanvasM.rotate(e.a))(function () {
              return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(CanvasM.beginPath)(function () {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(renderEdge(e.e))(function () {
                      return CanvasM.stroke;
                  });
              });
          }));
      });
  };
  var renderCorners = function (cs) {
      var renderCorner = function (c) {
          return function (a) {
              return function (t) {
                  if (c instanceof CRO) {
                      return {
                          prep: Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(CanvasM.translate(t))(function () {
                              return CanvasM.rotate(a);
                          }),
                          go: CanvasM.arc({
                              start: $$Math.pi,
                              end: 1.5 * $$Math.pi,
                              x: Style.cornerMid,
                              y: Style.cornerMid,
                              radius: Style.cornerRadius
                          })
                      };
                  };
                  if (c instanceof CRI) {
                      return {
                          prep: Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(CanvasM.translate(t))(function () {
                              return CanvasM.rotate(a);
                          }),
                          go: CanvasM.arc({
                              start: 0.0,
                              end: $$Math.pi / 2.0,
                              x: -Style.cornerMid,
                              y: -Style.cornerMid,
                              radius: Style.cornerRadius
                          })
                      };
                  };
                  if (c instanceof CSH) {
                      return {
                          prep: CanvasM.translate(t),
                          go: Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(CanvasM.moveTo(-Style.cornerMid - 1.0)(0.0))(function () {
                              return CanvasM.lineTo(Style.cornerMid + 1.0)(0.0);
                          })
                      };
                  };
                  if (c instanceof CSV) {
                      return {
                          prep: CanvasM.translate(t),
                          go: Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(CanvasM.moveTo(0.0)(-Style.cornerMid - 1.0))(function () {
                              return CanvasM.lineTo(0.0)(Style.cornerMid + 1.0);
                          })
                      };
                  };
                  if (c instanceof NON) {
                      return {
                          prep: Control_Applicative.pure(Control_Monad_Reader_Trans.applicativeReaderT(Effect.applicativeEffect))(Data_Unit.unit),
                          go: Control_Applicative.pure(Control_Monad_Reader_Trans.applicativeReaderT(Effect.applicativeEffect))(Data_Unit.unit)
                      };
                  };
                  throw new Error("Failed pattern match at Rendering line 159, column 28 - line 199, column 12: " + [ c.constructor.name ]);
              };
          };
      };
      var s = (Style.pxPerTile - Style.cornerSize) / 2.0;
      var cs$prime = [ {
          c: cs.tl,
          a: 0.0,
          t: {
              translateX: -s,
              translateY: -s
          }
      }, {
          c: cs.tr,
          a: $$Math.pi / 2.0,
          t: {
              translateX: s,
              translateY: -s
          }
      }, {
          c: cs.br,
          a: $$Math.pi,
          t: {
              translateX: s,
              translateY: s
          }
      }, {
          c: cs.bl,
          a: 1.5 * $$Math.pi,
          t: {
              translateX: -s,
              translateY: s
          }
      } ];
      return Data_Foldable.for_(Control_Monad_Reader_Trans.applicativeReaderT(Effect.applicativeEffect))(Data_Foldable.foldableArray)(cs$prime)(function (c) {
          return CanvasM.withContext(Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(CanvasM.setLineCap(Graphics_Canvas.Square.value))(function () {
              var r = renderCorner(c.c)(c.a)(c.t);
              return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(r.prep)(function () {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(CanvasM.beginPath)(function () {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(r.go)(function () {
                          return CanvasM.stroke;
                      });
                  });
              });
          }));
      });
  };                                                      
  var halfCanvas = $$Math.floor(Style.canvasSize / 2.0);
  var renderCounter = function (cd) {
      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(setFontSize(Style.pxPerTile * 3.0))(function () {
          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(CanvasM.setTextAlign(Graphics_Canvas.AlignCenter.value))(function () {
              return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(CanvasM.setLineWidth(3.0))(function () {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(CanvasM.setFillStyle(Style.fontColor))(function () {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(CanvasM.setStrokeStyle("black"))(function () {
                          var text = Data_Show.show(Data_Show.showInt)(Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(cd)(30));
                          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(CanvasM.fillText(text)(halfCanvas)(halfCanvas))(function () {
                              return CanvasM.strokeText(text)(halfCanvas)(halfCanvas);
                          });
                      });
                  });
              });
          });
      });
  };
  var halfBlock = $$Math.floor(Style.pxPerBlock / 2.0);
  var getRectAt = scaleRect(Style.pxPerBlock);
  var getEdges = function (above) {
      return function (right) {
          return function (below) {
              return function (left) {
                  return {
                      t: above,
                      r: right,
                      b: below,
                      l: left
                  };
              };
          };
      };
  };
  var getCorner = function (v) {
      return function (v1) {
          return function (v2) {
              if (v instanceof LevelMap.W && (v1 instanceof LevelMap.W && v2 instanceof LevelMap.E)) {
                  return CRI.value;
              };
              if (v instanceof LevelMap.W && (v1 instanceof LevelMap.W && v2 instanceof LevelMap.W)) {
                  return NON.value;
              };
              if (v instanceof LevelMap.W && v1 instanceof LevelMap.E) {
                  return CSH.value;
              };
              if (v instanceof LevelMap.E && v1 instanceof LevelMap.W) {
                  return CSV.value;
              };
              if (v instanceof LevelMap.E && v1 instanceof LevelMap.E) {
                  return CRO.value;
              };
              throw new Error("Failed pattern match at Rendering line 151, column 1 - line 151, column 22: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var getCorners = function (above) {
      return function (aboveRight) {
          return function (right) {
              return function (belowRight) {
                  return function (below) {
                      return function (belowLeft) {
                          return function (left) {
                              return function (aboveLeft) {
                                  return {
                                      tl: getCorner(left)(above)(aboveLeft),
                                      tr: getCorner(right)(above)(aboveRight),
                                      br: getCorner(right)(below)(belowRight),
                                      bl: getCorner(left)(below)(belowLeft)
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var renderMap = function (map) {
      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(CanvasM.setStrokeStyle(Style.tileColor))(function () {
          var tileIndices = Data_Array.range(0)(LevelMap.tilesAlongSide - 1 | 0);
          var getTile = function (i) {
              return function (j) {
                  return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Array.index(map.tiles)(i))(function (r) {
                      return Data_Array.index(r)(j);
                  });
              };
          };
          var t = function (i) {
              return function (j) {
                  return Data_Functor.map(Data_Maybe.functorMaybe)(toBasic)(getTile(i)(j));
              };
          };
          return Data_Foldable.for_(Control_Monad_Reader_Trans.applicativeReaderT(Effect.applicativeEffect))(Data_Foldable.foldableArray)(tileIndices)(function (i) {
              return Data_Foldable.for_(Control_Monad_Reader_Trans.applicativeReaderT(Effect.applicativeEffect))(Data_Foldable.foldableArray)(tileIndices)(function (j) {
                  var above = Data_Maybe.fromMaybe(LevelMap.W.value)(t(i)(j - 1 | 0));
                  var aboveRight = Data_Maybe.fromMaybe(LevelMap.W.value)(t(i + 1 | 0)(j - 1 | 0));
                  var right = Data_Maybe.fromMaybe(LevelMap.W.value)(t(i + 1 | 0)(j));
                  var belowRight = Data_Maybe.fromMaybe(LevelMap.W.value)(t(i + 1 | 0)(j + 1 | 0));
                  var below = Data_Maybe.fromMaybe(LevelMap.W.value)(t(i)(j + 1 | 0));
                  var belowLeft = Data_Maybe.fromMaybe(LevelMap.W.value)(t(i - 1 | 0)(j + 1 | 0));
                  var left = Data_Maybe.fromMaybe(LevelMap.W.value)(t(i - 1 | 0)(j));
                  var aboveLeft = Data_Maybe.fromMaybe(LevelMap.W.value)(t(i - 1 | 0)(j - 1 | 0));
                  var v = t(i)(j);
                  if (v instanceof Data_Maybe.Just && v.value0 instanceof LevelMap.W) {
                      var cs = getCorners(above)(aboveRight)(right)(belowRight)(below)(belowLeft)(left)(aboveLeft);
                      var es = getEdges(above)(right)(below)(left);
                      return CanvasM.withContext(Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(CanvasM.translate({
                          translateX: (Data_Int.toNumber(i) + 0.5) * Style.pxPerTile,
                          translateY: (Data_Int.toNumber(j) + 0.5) * Style.pxPerTile
                      }))(function () {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(renderCorners(cs))(function () {
                              return renderEdges(es);
                          });
                      }));
                  };
                  return Control_Applicative.pure(Control_Monad_Reader_Trans.applicativeReaderT(Effect.applicativeEffect))(Data_Unit.unit);
              });
          });
      });
  };
  var getCentredRectAt = function (p) {
      var r = getRectAt(p);
      return {
          x: r.x + halfBlock,
          y: r.y + halfBlock,
          width: r.width,
          height: r.height
      };
  };
  var playerRenderParameters = function (player) {
      var maxAngle = $$Math.pi / 2.0;
      var multiplier = Data_Int.toNumber(Types.nomIndexMax) / maxAngle;
      var index = Data_Lens_Getter.viewOn(player)(Types.pNomIndex(Data_Lens_Internal_Forget.strongForget));
      var halfAngle = maxAngle / 2.0;
      var half = Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(Types.nomIndexMax)(2);
      var direction = Data_Maybe.fromMaybe(Types.Left.value)(Data_Lens_Getter.viewOn(player)(Types.pDirection(Data_Lens_Internal_Forget.strongForget)));
      var op = Types.dirToPos(Types.opposite(direction));
      var delta = (function () {
          var v = Data_Lens_Getter.viewOn(player)(Types.pRespawnCounter(Data_Lens_Internal_Forget.strongForget));
          if (v instanceof Data_Maybe.Just) {
              var ratio = Data_Int.toNumber(v.value0) / Data_Int.toNumber(Game.respawnLength);
              return halfAngle + (1.0 - ratio) * ($$Math.pi - halfAngle);
          };
          if (v instanceof Data_Maybe.Nothing) {
              var x = (function () {
                  var $30 = index <= half;
                  if ($30) {
                      return index;
                  };
                  return Types.nomIndexMax - index | 0;
              })();
              return multiplier * Data_Int.toNumber(x) + 1.0e-3;
          };
          throw new Error("Failed pattern match at Rendering line 295, column 9 - line 310, column 7: " + [ v.constructor.name ]);
      })();
      var centre = getCentredRectAt(Data_Lens_Getter.viewOn(player)(Types.pPosition(Data_Lens_Internal_Forget.strongForget)));
      var start = Types.addPos(Types.scalePos(Style.playerRadius / 2.0)(op))(toPosition(centre));
      var baseAngle = Types.directionToRadians(direction);
      return {
          arc: {
              x: centre.x,
              y: centre.y,
              start: baseAngle + delta,
              end: baseAngle - delta,
              radius: Style.playerRadius
          },
          start: {
              x: Data_Lens_Getter.viewOn(start)(Types.pX(Data_Lens_Internal_Forget.strongForget)),
              y: Data_Lens_Getter.viewOn(start)(Types.pY(Data_Lens_Internal_Forget.strongForget))
          }
      };
  };
  var renderItem = function (rampaging) {
      return function (item) {
          var centre = getCentredRectAt(Data_Lens_Getter.viewOn(item)(Types.iPosition(Data_Lens_Internal_Forget.strongForget)));
          return Control_Applicative.when(Control_Monad_Reader_Trans.applicativeReaderT(Effect.applicativeEffect))(!(Data_Eq.eq(Types.eqItemType)(Data_Lens_Getter.viewOn(item)(Types.iType(Data_Lens_Internal_Forget.strongForget)))(Types.BigDot.value) && rampaging))(Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(CanvasM.beginPath)(function () {
              return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(CanvasM.arc({
                  x: centre.x,
                  y: centre.y,
                  start: 0.0,
                  end: 2.0 * $$Math.pi,
                  radius: Style.dotRadiusFor(Data_Lens_Getter.viewOn(item)(Types.iType(Data_Lens_Internal_Forget.strongForget)))
              }))(function () {
                  return CanvasM.fill;
              });
          }));
      };
  };
  var renderItems = function (game) {
      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(CanvasM.setFillStyle(Style.dotColor))(function () {
          var rampaging = Data_Maybe.isJust(game.rampage);
          return Types["eachItem'"](Control_Monad_Reader_Trans.applicativeReaderT(Effect.applicativeEffect))(game)(renderItem(rampaging));
      });
  };
  var renderPlayer = function (isRampaging) {
      return function (isFleeing) {
          return function (pId) {
              return function (player) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(CanvasM.setFillStyle((function () {
                      var $31 = isFleeing(pId);
                      if ($31) {
                          return Style.fleeingFlashColor;
                      };
                      return Style.playerColor(pId);
                  })()))(function () {
                      var r = playerRenderParameters(player);
                      var centre = getCentredRectAt(Data_Lens_Getter.viewOn(player)(Types.pPosition(Data_Lens_Internal_Forget.strongForget)));
                      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(CanvasM.beginPath)(function () {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(CanvasM.moveTo(r.start.x)(r.start.y))(function () {
                              return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(CanvasM.arc(r.arc))(function () {
                                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(CanvasM.lineTo(r.start.x)(r.start.y))(function () {
                                      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(CanvasM.fill)(function () {
                                          return Control_Applicative.when(Control_Monad_Reader_Trans.applicativeReaderT(Effect.applicativeEffect))(isRampaging(pId))(Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(CanvasM.setLineWidth(2.0))(function () {
                                              return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(CanvasM.setStrokeStyle(Style.rampagePlayerColor))(function () {
                                                  return CanvasM.stroke;
                                              });
                                          }));
                                      });
                                  });
                              });
                          });
                      });
                  });
              };
          };
      };
  };
  var renderPlayers = function (game) {
      var initial = new Data_Tuple.Tuple(Game.rampageLength, Game.rampageLength - 8 | 0);
      var f = function (x) {
          return x - (2 * 8 | 0) | 0;
      };
      var flashes = Utils.iterateN(5)(initial)(Data_Profunctor_Strong.splitStrong(Control_Category.categoryFn)(Data_Profunctor_Strong.strongFn)(f)(f));
      var flashCounts = Data_Array.concatMap(Data_Tuple.uncurry(Data_Array.range))(flashes);
      var isRampaging = Data_Maybe.maybe(Data_Function["const"](false))(function (r) {
          if (r instanceof Types.Rampaging) {
              return Data_Eq.eq(Types.eqPlayerId)(r.value0);
          };
          return Data_Function["const"](false);
      })(game.rampage);
      var isFleeing = Data_Maybe.maybe(Data_Function["const"](false))(function (r) {
          if (r instanceof Types.Rampaging) {
              return function (pId$prime) {
                  return Data_Eq.notEq(Types.eqPlayerId)(r.value0)(pId$prime) && Data_Foldable.elem(Data_Foldable.foldableArray)(Data_Eq.eqInt)(r.value1)(flashCounts);
              };
          };
          return Data_Function["const"](false);
      })(game.rampage);
      return Types["eachPlayer'"](Control_Monad_Reader_Trans.applicativeReaderT(Effect.applicativeEffect))(game)(renderPlayer(isRampaging)(isFleeing));
  };
  var clearCanvas = CanvasM.clearRect(wholeCanvas);
  var clearBoth = function (ctx) {
      return function __do() {
          CanvasM.runCanvasM(ctx.background)(clearCanvas)();
          return CanvasM.runCanvasM(ctx.foreground)(clearCanvas)();
      };
  }; 
  var arrowPath = function (toRight) {
      return function (x) {
          return function (y) {
              return function (length) {
                  return function (width) {
                      var halfLen = Data_Int.toNumber(Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(length)(2));
                      var halfWid = Data_Int.toNumber(Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(width)(2));
                      var f = function (z) {
                          if (toRight) {
                              return x + z;
                          };
                          return x - z;
                      };
                      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(CanvasM.moveTo(f(halfLen))(y - halfWid))(function () {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(CanvasM.lineTo(f(-halfLen))(y - halfWid))(function () {
                              return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(CanvasM.lineTo(f(-halfLen))(y - 2.0 * halfWid))(function () {
                                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(CanvasM.lineTo(f(-(2.0 * halfLen)))(y))(function () {
                                      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(CanvasM.lineTo(f(-halfLen))(y + 2.0 * halfWid))(function () {
                                          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(CanvasM.lineTo(f(-halfLen))(y + halfWid))(function () {
                                              return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(CanvasM.lineTo(f(halfLen))(y + halfWid))(function () {
                                                  return CanvasM.lineTo(f(halfLen))(y - halfWid);
                                              });
                                          });
                                      });
                                  });
                              });
                          });
                      });
                  };
              };
          };
      };
  };
  var renderReminderArrow = function (game) {
      return function (pId) {
          return Utils.whenJust(Control_Monad_Reader_Trans.applicativeReaderT(Effect.applicativeEffect))(Data_Lens_Getter.viewOn(game)(function ($40) {
              return Types.players(Data_Lens_Internal_Forget.strongForget)(Data_Lens_At.at(Data_Lens_At.atMap(Types.ordPlayerId))(pId)(Data_Lens_Internal_Forget.strongForget)($40));
          }))(function (pl) {
              return CanvasM.withContext((function () {
                  var pos = Data_Lens_Getter.viewOn(pl)(Types.pPosition(Data_Lens_Internal_Forget.strongForget));
                  var playerX = Data_Lens_Getter.viewOn(pos)(Types.pX(Data_Lens_Internal_Forget.strongForget));
                  var y = Data_Lens_Getter.viewOn(pos)(Types.pY(Data_Lens_Internal_Forget.strongForget));
                  var greater = playerX > Data_Int.toNumber(Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(LevelMap.mapSize)(2));
                  var d = 1.5 * Data_Int.toNumber(LevelMap.tileSize);
                  var x = playerX + (function () {
                      if (greater) {
                          return d;
                      };
                      return -d;
                  })();
                  var centre = getCentredRectAt({
                      x: x,
                      y: y
                  });
                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(CanvasM.setLineWidth(1.0))(function () {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(CanvasM.beginPath)(function () {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(arrowPath(greater)(centre.x)(centre.y)(30)(10))(function () {
                              return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(CanvasM.fill)(function () {
                                  return CanvasM.stroke;
                              });
                          });
                      });
                  });
              })());
          });
      };
  };
  var renderCountdown = function (game) {
      return function (pId) {
          return Utils.whenJust(Control_Monad_Reader_Trans.applicativeReaderT(Effect.applicativeEffect))(game.countdown)(function (cd) {
              return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(renderCounter(cd))(function () {
                  return renderReminderArrow(game)(pId);
              });
          });
      };
  };
  var render = function (ctx) {
      return function (game) {
          return function (pId) {
              return function (redrawMap) {
                  return function __do() {
                      Control_Applicative.when(Effect.applicativeEffect)(redrawMap)(CanvasM.runCanvasM(ctx.background)(renderMap(Types.unwrapLevelMap(game.map))))();
                      return CanvasM.runCanvasM(ctx.foreground)(Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(clearCanvas)(function () {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(renderItems(game))(function () {
                              return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(renderPlayers(game))(function () {
                                  return renderCountdown(game)(pId);
                              });
                          });
                      }))();
                  };
              };
          };
      };
  };
  exports["halfBlock"] = halfBlock;
  exports["halfCanvas"] = halfCanvas;
  exports["scaleRect"] = scaleRect;
  exports["toPosition"] = toPosition;
  exports["getRectAt"] = getRectAt;
  exports["getCentredRectAt"] = getCentredRectAt;
  exports["setupRendering"] = setupRendering;
  exports["setupRenderingById"] = setupRenderingById;
  exports["CRO"] = CRO;
  exports["CRI"] = CRI;
  exports["CSH"] = CSH;
  exports["CSV"] = CSV;
  exports["NON"] = NON;
  exports["toBasic"] = toBasic;
  exports["renderMap"] = renderMap;
  exports["getCorners"] = getCorners;
  exports["getCorner"] = getCorner;
  exports["renderCorners"] = renderCorners;
  exports["getEdges"] = getEdges;
  exports["renderEdges"] = renderEdges;
  exports["renderPlayer"] = renderPlayer;
  exports["playerRenderParameters"] = playerRenderParameters;
  exports["renderItems"] = renderItems;
  exports["renderItem"] = renderItem;
  exports["renderPlayers"] = renderPlayers;
  exports["wholeCanvas"] = wholeCanvas;
  exports["clearCanvas"] = clearCanvas;
  exports["renderCountdown"] = renderCountdown;
  exports["setFontSize"] = setFontSize;
  exports["renderCounter"] = renderCounter;
  exports["renderReminderArrow"] = renderReminderArrow;
  exports["arrowPath"] = arrowPath;
  exports["render"] = render;
  exports["clearBoth"] = clearBoth;
})(PS["Rendering"] = PS["Rendering"] || {});
(function(exports) {exports.makeElement = function(name) {
    return function() {
      return window.document.createElement(name);
    };
  };

  exports.makeElementNS = function(ns) {
    return function(name) {
      return function() {
        return window.document.createElementNS(ns, name);
      };
    };
  };

  exports.makeText = function(text) {
    return function() {
      return window.document.createTextNode(text);
    };
  };

  exports.nodeListToArray = function(list) {
    return function() {
      return Array.from(list);
    };
  };

  exports.foldlAList = function(f) {
    return function(b) {
      return function(l) {
        for (var i = l.index, len = l.array.length; i < len; i++) {
          b = f(b)(l.array[i]);
        }
        return b;
      };
    };
  };

  // The following patch functions are ported from:
  // https://github.com/yoshuawuyts/nanomorph/blob/master/lib/morph.js

  exports.patchAttributes = function(node) {
    return function(newAttrs) {
      return function() {
        var oldAttrs = node.attributes;
        var fromValue, attrValue, attr;

        for (var attrName in newAttrs) {
          attrValue = newAttrs[attrName];
          fromValue = node.getAttribute(attrName);
          if (fromValue !== attrValue) {
            node.setAttribute(attrName, attrValue);
          }
        }

        for (var i = oldAttrs.length - 1; i >= 0; --i) {
          attr = oldAttrs[i];
          if (attr.specified !== false) {
            attrName = attr.name;
            if (!newAttrs.hasOwnProperty(attrName)) {
              node.removeAttribute(attrName);
            }
          }
        }
      };
    };
  };

  exports.patchEventListeners = function(node) {
    return function(events) {
      return function() {
        for (var i = 0; i < eventsLength; i++) {
          var ev = eventNames[i];
          if (events.hasOwnProperty(ev)) {
            node[ev] = events[ev];
          } else if (node[ev]) {
            node[ev] = undefined;
          }
        }
      };
    };
  };

  var eventNames = [
    // attribute events (can be set with attributes)
    "onclick",
    "ondblclick",
    "onmousedown",
    "onmouseup",
    "onmouseover",
    "onmousemove",
    "onmouseout",
    "onmouseenter",
    "onmouseleave",
    "ondragstart",
    "ondrag",
    "ondragenter",
    "ondragleave",
    "ondragover",
    "ondrop",
    "ondragend",
    "onkeydown",
    "onkeypress",
    "onkeyup",
    "onunload",
    "onabort",
    "onerror",
    "onresize",
    "onscroll",
    "onselect",
    "onchange",
    "onsubmit",
    "onreset",
    "onfocus",
    "onblur",
    "oninput",
    // other common events
    "oncontextmenu",
    "onfocusin",
    "onfocusout"
  ];

  var eventsLength = eventNames.length;
})(PS["Text.Smolder.Renderer.DOM"] = PS["Text.Smolder.Renderer.DOM"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Unsafe_Coerce = PS["Unsafe.Coerce"];                 
  var runExists = Unsafe_Coerce.unsafeCoerce;
  var mkExists = Unsafe_Coerce.unsafeCoerce;
  exports["mkExists"] = mkExists;
  exports["runExists"] = runExists;
})(PS["Data.Exists"] = PS["Data.Exists"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Either = PS["Data.Either"];
  var Data_Exists = PS["Data.Exists"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var Effect_Class = PS["Effect.Class"];
  var Prelude = PS["Prelude"];                 
  var Bound = (function () {
      function Bound(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Bound.create = function (value0) {
          return function (value1) {
              return new Bound(value0, value1);
          };
      };
      return Bound;
  })();
  var FreeT = (function () {
      function FreeT(value0) {
          this.value0 = value0;
      };
      FreeT.create = function (value0) {
          return new FreeT(value0);
      };
      return FreeT;
  })();
  var Bind = (function () {
      function Bind(value0) {
          this.value0 = value0;
      };
      Bind.create = function (value0) {
          return new Bind(value0);
      };
      return Bind;
  })();
  var monadTransFreeT = function (dictFunctor) {
      return new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
          return function (ma) {
              return new FreeT(function (v) {
                  return Data_Functor.map(((dictMonad.Bind1()).Apply0()).Functor0())(Data_Either.Left.create)(ma);
              });
          };
      });
  };                       
  var bound = function (m) {
      return function (f) {
          return new Bind(Data_Exists.mkExists(new Bound(m, f)));
      };
  };
  var functorFreeT = function (dictFunctor) {
      return function (dictFunctor1) {
          return new Data_Functor.Functor(function (f) {
              return function (v) {
                  if (v instanceof FreeT) {
                      return new FreeT(function (v1) {
                          return Data_Functor.map(dictFunctor1)(Data_Bifunctor.bimap(Data_Either.bifunctorEither)(f)(Data_Functor.map(dictFunctor)(Data_Functor.map(functorFreeT(dictFunctor)(dictFunctor1))(f))))(v.value0(Data_Unit.unit));
                      });
                  };
                  if (v instanceof Bind) {
                      return Data_Exists.runExists(function (v1) {
                          return bound(v1.value0)(function ($104) {
                              return Data_Functor.map(functorFreeT(dictFunctor)(dictFunctor1))(f)(v1.value1($104));
                          });
                      })(v.value0);
                  };
                  throw new Error("Failed pattern match at Control.Monad.Free.Trans line 57, column 1 - line 57, column 71: " + [ f.constructor.name, v.constructor.name ]);
              };
          });
      };
  };
  var monadFreeT = function (dictFunctor) {
      return function (dictMonad) {
          return new Control_Monad.Monad(function () {
              return applicativeFreeT(dictFunctor)(dictMonad);
          }, function () {
              return bindFreeT(dictFunctor)(dictMonad);
          });
      };
  };
  var bindFreeT = function (dictFunctor) {
      return function (dictMonad) {
          return new Control_Bind.Bind(function () {
              return applyFreeT(dictFunctor)(dictMonad);
          }, function (v) {
              return function (f) {
                  if (v instanceof Bind) {
                      return Data_Exists.runExists(function (v1) {
                          return bound(v1.value0)(function (x) {
                              return bound(function (v2) {
                                  return v1.value1(x);
                              })(f);
                          });
                      })(v.value0);
                  };
                  return bound(function (v1) {
                      return v;
                  })(f);
              };
          });
      };
  };
  var applyFreeT = function (dictFunctor) {
      return function (dictMonad) {
          return new Control_Apply.Apply(function () {
              return functorFreeT(dictFunctor)(((dictMonad.Bind1()).Apply0()).Functor0());
          }, Control_Monad.ap(monadFreeT(dictFunctor)(dictMonad)));
      };
  };
  var applicativeFreeT = function (dictFunctor) {
      return function (dictMonad) {
          return new Control_Applicative.Applicative(function () {
              return applyFreeT(dictFunctor)(dictMonad);
          }, function (a) {
              return new FreeT(function (v) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Left(a));
              });
          });
      };
  };
  var resume = function (dictFunctor) {
      return function (dictMonadRec) {
          var go = function (v) {
              if (v instanceof FreeT) {
                  return Data_Functor.map((((dictMonadRec.Monad0()).Bind1()).Apply0()).Functor0())(Control_Monad_Rec_Class.Done.create)(v.value0(Data_Unit.unit));
              };
              if (v instanceof Bind) {
                  return Data_Exists.runExists(function (v1) {
                      var v2 = v1.value0(Data_Unit.unit);
                      if (v2 instanceof FreeT) {
                          return Control_Bind.bind((dictMonadRec.Monad0()).Bind1())(v2.value0(Data_Unit.unit))(function (v3) {
                              if (v3 instanceof Data_Either.Left) {
                                  return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(new Control_Monad_Rec_Class.Loop(v1.value1(v3.value0)));
                              };
                              if (v3 instanceof Data_Either.Right) {
                                  return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(new Control_Monad_Rec_Class.Done(new Data_Either.Right(Data_Functor.map(dictFunctor)(function (h) {
                                      return Control_Bind.bind(bindFreeT(dictFunctor)(dictMonadRec.Monad0()))(h)(v1.value1);
                                  })(v3.value0))));
                              };
                              throw new Error("Failed pattern match at Control.Monad.Free.Trans line 52, column 20 - line 54, column 67: " + [ v3.constructor.name ]);
                          });
                      };
                      if (v2 instanceof Bind) {
                          return Data_Exists.runExists(function (v3) {
                              return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(new Control_Monad_Rec_Class.Loop(Control_Bind.bind(bindFreeT(dictFunctor)(dictMonadRec.Monad0()))(v3.value0(Data_Unit.unit))(function (z) {
                                  return Control_Bind.bind(bindFreeT(dictFunctor)(dictMonadRec.Monad0()))(v3.value1(z))(v1.value1);
                              })));
                          })(v2.value0);
                      };
                      throw new Error("Failed pattern match at Control.Monad.Free.Trans line 50, column 5 - line 55, column 98: " + [ v2.constructor.name ]);
                  })(v.value0);
              };
              throw new Error("Failed pattern match at Control.Monad.Free.Trans line 47, column 3 - line 47, column 75: " + [ v.constructor.name ]);
          };
          return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(go);
      };
  };
  var runFreeT = function (dictFunctor) {
      return function (dictMonadRec) {
          return function (interp) {
              var go = function (v) {
                  if (v instanceof Data_Either.Left) {
                      return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(new Control_Monad_Rec_Class.Done(v.value0));
                  };
                  if (v instanceof Data_Either.Right) {
                      return Data_Functor.map((((dictMonadRec.Monad0()).Bind1()).Apply0()).Functor0())(Control_Monad_Rec_Class.Loop.create)(interp(v.value0));
                  };
                  throw new Error("Failed pattern match at Control.Monad.Free.Trans line 126, column 3 - line 126, column 63: " + [ v.constructor.name ]);
              };
              return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(Control_Bind.composeKleisliFlipped((dictMonadRec.Monad0()).Bind1())(go)(resume(dictFunctor)(dictMonadRec)));
          };
      };
  };
  var monadRecFreeT = function (dictFunctor) {
      return function (dictMonad) {
          return new Control_Monad_Rec_Class.MonadRec(function () {
              return monadFreeT(dictFunctor)(dictMonad);
          }, function (f) {
              var go = function (s) {
                  return Control_Bind.bind(bindFreeT(dictFunctor)(dictMonad))(f(s))(function (v) {
                      if (v instanceof Control_Monad_Rec_Class.Loop) {
                          return go(v.value0);
                      };
                      if (v instanceof Control_Monad_Rec_Class.Done) {
                          return Control_Applicative.pure(applicativeFreeT(dictFunctor)(dictMonad))(v.value0);
                      };
                      throw new Error("Failed pattern match at Control.Monad.Free.Trans line 80, column 15 - line 82, column 25: " + [ v.constructor.name ]);
                  });
              };
              return go;
          });
      };
  };
  exports["resume"] = resume;
  exports["runFreeT"] = runFreeT;
  exports["functorFreeT"] = functorFreeT;
  exports["applyFreeT"] = applyFreeT;
  exports["applicativeFreeT"] = applicativeFreeT;
  exports["bindFreeT"] = bindFreeT;
  exports["monadFreeT"] = monadFreeT;
  exports["monadTransFreeT"] = monadTransFreeT;
  exports["monadRecFreeT"] = monadRecFreeT;
})(PS["Control.Monad.Free.Trans"] = PS["Control.Monad.Free.Trans"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Free_Trans = PS["Control.Monad.Free.Trans"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Identity = PS["Data.Identity"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];                 
  var safely = function (dictMonadRec) {
      return function (f) {
          var lower = function (dictMonadRec1) {
              return Control_Monad_Free_Trans.runFreeT(Data_Identity.functorIdentity)(dictMonadRec1)(function ($19) {
                  return Control_Applicative.pure((dictMonadRec1.Monad0()).Applicative0())(Data_Newtype.unwrap(Data_Identity.newtypeIdentity)($19));
              });
          };
          return lower(dictMonadRec)(f(Control_Monad_Free_Trans.monadRecFreeT(Data_Identity.functorIdentity)(dictMonadRec.Monad0()))(Control_Monad_Trans_Class.lift(Control_Monad_Free_Trans.monadTransFreeT(Data_Identity.functorIdentity))(dictMonadRec.Monad0()))(lower(dictMonadRec)));
      };
  };
  var traverse_ = function (dictFoldable) {
      return function (dictMonadRec) {
          return function (f) {
              return function (xs) {
                  return safely(dictMonadRec)(function (dictMonadRec1) {
                      return function (lift) {
                          return function (v) {
                              return Data_Foldable.traverse_((dictMonadRec1.Monad0()).Applicative0())(dictFoldable)(function ($20) {
                                  return lift(f($20));
                              })(xs);
                          };
                      };
                  });
              };
          };
      };
  };
  var for_ = function (dictFoldable) {
      return function (dictMonadRec) {
          return Data_Function.flip(traverse_(dictFoldable)(dictMonadRec));
      };
  };
  exports["safely"] = safely;
  exports["traverse_"] = traverse_;
  exports["for_"] = for_;
})(PS["Control.Safely"] = PS["Control.Safely"] || {});
(function(exports) {
    "use strict";

  var getEffProp = function (name) {
    return function (node) {
      return function () {
        return node[name];
      };
    };
  };

  exports.nodeTypeIndex = function (node) {
    return node.nodeType;
  };

  exports.nodeName = function (node) {
    return node.nodeName;
  };

  exports.childNodes = getEffProp("childNodes");

  exports._firstChild = getEffProp("firstChild");  

  exports.nodeValue = getEffProp("nodeValue");

  exports.setNodeValue = function (value) {
    return function (node) {
      return function () {
        node.nodeValue = value;
        return {};
      };
    };
  };

  exports.textContent = getEffProp("textContent");

  exports.setTextContent = function (value) {
    return function (node) {
      return function () {
        node.textContent = value;
        return {};
      };
    };
  };

  exports.appendChild = function (node) {
    return function (parent) {
      return function () {
        return parent.appendChild(node);
      };
    };
  };

  exports.replaceChild = function (newChild) {
    return function (oldChild) {
      return function (parent) {
        return function () {
          return parent.replaceChild(newChild, oldChild);
        };
      };
    };
  };

  exports.removeChild = function (node) {
    return function (parent) {
      return function () {
        return parent.removeChild(node);
      };
    };
  };
})(PS["Web.DOM.Node"] = PS["Web.DOM.Node"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Enum = PS["Data.Enum"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Prelude = PS["Prelude"];                 
  var ElementNode = (function () {
      function ElementNode() {

      };
      ElementNode.value = new ElementNode();
      return ElementNode;
  })();
  var AttributeNode = (function () {
      function AttributeNode() {

      };
      AttributeNode.value = new AttributeNode();
      return AttributeNode;
  })();
  var TextNode = (function () {
      function TextNode() {

      };
      TextNode.value = new TextNode();
      return TextNode;
  })();
  var CDATASectionNode = (function () {
      function CDATASectionNode() {

      };
      CDATASectionNode.value = new CDATASectionNode();
      return CDATASectionNode;
  })();
  var EntityReferenceNode = (function () {
      function EntityReferenceNode() {

      };
      EntityReferenceNode.value = new EntityReferenceNode();
      return EntityReferenceNode;
  })();
  var EntityNode = (function () {
      function EntityNode() {

      };
      EntityNode.value = new EntityNode();
      return EntityNode;
  })();
  var ProcessingInstructionNode = (function () {
      function ProcessingInstructionNode() {

      };
      ProcessingInstructionNode.value = new ProcessingInstructionNode();
      return ProcessingInstructionNode;
  })();
  var CommentNode = (function () {
      function CommentNode() {

      };
      CommentNode.value = new CommentNode();
      return CommentNode;
  })();
  var DocumentNode = (function () {
      function DocumentNode() {

      };
      DocumentNode.value = new DocumentNode();
      return DocumentNode;
  })();
  var DocumentTypeNode = (function () {
      function DocumentTypeNode() {

      };
      DocumentTypeNode.value = new DocumentTypeNode();
      return DocumentTypeNode;
  })();
  var DocumentFragmentNode = (function () {
      function DocumentFragmentNode() {

      };
      DocumentFragmentNode.value = new DocumentFragmentNode();
      return DocumentFragmentNode;
  })();
  var NotationNode = (function () {
      function NotationNode() {

      };
      NotationNode.value = new NotationNode();
      return NotationNode;
  })();
  var toEnumNodeType = function (v) {
      if (v === 1) {
          return new Data_Maybe.Just(ElementNode.value);
      };
      if (v === 2) {
          return new Data_Maybe.Just(AttributeNode.value);
      };
      if (v === 3) {
          return new Data_Maybe.Just(TextNode.value);
      };
      if (v === 4) {
          return new Data_Maybe.Just(CDATASectionNode.value);
      };
      if (v === 5) {
          return new Data_Maybe.Just(EntityReferenceNode.value);
      };
      if (v === 6) {
          return new Data_Maybe.Just(EntityNode.value);
      };
      if (v === 7) {
          return new Data_Maybe.Just(ProcessingInstructionNode.value);
      };
      if (v === 8) {
          return new Data_Maybe.Just(CommentNode.value);
      };
      if (v === 9) {
          return new Data_Maybe.Just(DocumentNode.value);
      };
      if (v === 10) {
          return new Data_Maybe.Just(DocumentTypeNode.value);
      };
      if (v === 11) {
          return new Data_Maybe.Just(DocumentFragmentNode.value);
      };
      if (v === 12) {
          return new Data_Maybe.Just(NotationNode.value);
      };
      return Data_Maybe.Nothing.value;
  };
  var fromEnumNodeType = function (v) {
      if (v instanceof ElementNode) {
          return 1;
      };
      if (v instanceof AttributeNode) {
          return 2;
      };
      if (v instanceof TextNode) {
          return 3;
      };
      if (v instanceof CDATASectionNode) {
          return 4;
      };
      if (v instanceof EntityReferenceNode) {
          return 5;
      };
      if (v instanceof EntityNode) {
          return 6;
      };
      if (v instanceof ProcessingInstructionNode) {
          return 7;
      };
      if (v instanceof CommentNode) {
          return 8;
      };
      if (v instanceof DocumentNode) {
          return 9;
      };
      if (v instanceof DocumentTypeNode) {
          return 10;
      };
      if (v instanceof DocumentFragmentNode) {
          return 11;
      };
      if (v instanceof NotationNode) {
          return 12;
      };
      throw new Error("Failed pattern match at Web.DOM.NodeType line 54, column 1 - line 54, column 36: " + [ v.constructor.name ]);
  };
  var eqNodeType = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof ElementNode && y instanceof ElementNode) {
              return true;
          };
          if (x instanceof AttributeNode && y instanceof AttributeNode) {
              return true;
          };
          if (x instanceof TextNode && y instanceof TextNode) {
              return true;
          };
          if (x instanceof CDATASectionNode && y instanceof CDATASectionNode) {
              return true;
          };
          if (x instanceof EntityReferenceNode && y instanceof EntityReferenceNode) {
              return true;
          };
          if (x instanceof EntityNode && y instanceof EntityNode) {
              return true;
          };
          if (x instanceof ProcessingInstructionNode && y instanceof ProcessingInstructionNode) {
              return true;
          };
          if (x instanceof CommentNode && y instanceof CommentNode) {
              return true;
          };
          if (x instanceof DocumentNode && y instanceof DocumentNode) {
              return true;
          };
          if (x instanceof DocumentTypeNode && y instanceof DocumentTypeNode) {
              return true;
          };
          if (x instanceof DocumentFragmentNode && y instanceof DocumentFragmentNode) {
              return true;
          };
          if (x instanceof NotationNode && y instanceof NotationNode) {
              return true;
          };
          return false;
      };
  });
  var ordNodeType = new Data_Ord.Ord(function () {
      return eqNodeType;
  }, function (x) {
      return function (y) {
          return Data_Ord.compare(Data_Ord.ordInt)(fromEnumNodeType(x))(fromEnumNodeType(y));
      };
  });
  var enumNodeType = new Data_Enum.Enum(function () {
      return ordNodeType;
  }, Data_Enum.defaultPred(toEnumNodeType)(fromEnumNodeType), Data_Enum.defaultSucc(toEnumNodeType)(fromEnumNodeType));
  var boundedNodeType = new Data_Bounded.Bounded(function () {
      return ordNodeType;
  }, ElementNode.value, NotationNode.value);
  var boundedEnumNodeType = new Data_Enum.BoundedEnum(function () {
      return boundedNodeType;
  }, function () {
      return enumNodeType;
  }, 12, fromEnumNodeType, toEnumNodeType);
  exports["ElementNode"] = ElementNode;
  exports["AttributeNode"] = AttributeNode;
  exports["TextNode"] = TextNode;
  exports["CDATASectionNode"] = CDATASectionNode;
  exports["EntityReferenceNode"] = EntityReferenceNode;
  exports["EntityNode"] = EntityNode;
  exports["ProcessingInstructionNode"] = ProcessingInstructionNode;
  exports["CommentNode"] = CommentNode;
  exports["DocumentNode"] = DocumentNode;
  exports["DocumentTypeNode"] = DocumentTypeNode;
  exports["DocumentFragmentNode"] = DocumentFragmentNode;
  exports["NotationNode"] = NotationNode;
  exports["eqNodeType"] = eqNodeType;
  exports["ordNodeType"] = ordNodeType;
  exports["boundedNodeType"] = boundedNodeType;
  exports["enumNodeType"] = enumNodeType;
  exports["boundedEnumNodeType"] = boundedEnumNodeType;
})(PS["Web.DOM.NodeType"] = PS["Web.DOM.NodeType"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Web.DOM.Node"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Enum = PS["Data.Enum"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Nullable = PS["Data.Nullable"];
  var Effect = PS["Effect"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var Web_DOM_Document = PS["Web.DOM.Document"];
  var Web_DOM_Element = PS["Web.DOM.Element"];
  var Web_DOM_Internal_Types = PS["Web.DOM.Internal.Types"];
  var Web_DOM_NodeType = PS["Web.DOM.NodeType"];
  var Web_Event_EventTarget = PS["Web.Event.EventTarget"];
  var Web_Internal_FFI = PS["Web.Internal.FFI"];
  var nodeType = function (dictPartial) {
      return function ($5) {
          return Data_Maybe.fromJust(dictPartial)(Data_Enum.toEnum(Web_DOM_NodeType.boundedEnumNodeType)($foreign.nodeTypeIndex($5)));
      };
  };                                                                   
  var firstChild = function ($10) {
      return Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe)($foreign._firstChild($10));
  };
  exports["nodeType"] = nodeType;
  exports["firstChild"] = firstChild;
  exports["nodeName"] = $foreign.nodeName;
  exports["childNodes"] = $foreign.childNodes;
  exports["setNodeValue"] = $foreign.setNodeValue;
  exports["setTextContent"] = $foreign.setTextContent;
  exports["appendChild"] = $foreign.appendChild;
  exports["replaceChild"] = $foreign.replaceChild;
  exports["removeChild"] = $foreign.removeChild;
})(PS["Web.DOM.Node"] = PS["Web.DOM.Node"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Web.DOM.Text"];
  var Data_Maybe = PS["Data.Maybe"];
  var Effect = PS["Effect"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var Web_DOM_CharacterData = PS["Web.DOM.CharacterData"];
  var Web_DOM_ChildNode = PS["Web.DOM.ChildNode"];
  var Web_DOM_Internal_Types = PS["Web.DOM.Internal.Types"];
  var Web_DOM_NonDocumentTypeChildNode = PS["Web.DOM.NonDocumentTypeChildNode"];
  var Web_Event_EventTarget = PS["Web.Event.EventTarget"];
  var Web_Internal_FFI = PS["Web.Internal.FFI"];              
  var toNode = Unsafe_Coerce.unsafeCoerce;
  exports["toNode"] = toNode;
})(PS["Web.DOM.Text"] = PS["Web.DOM.Text"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Text.Smolder.Renderer.DOM"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Free = PS["Control.Monad.Free"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Safely = PS["Control.Safely"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array = PS["Data.Array"];
  var Data_CatList = PS["Data.CatList"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_String = PS["Data.String"];
  var Data_String_Common = PS["Data.String.Common"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Effect = PS["Effect"];
  var Effect_Ref = PS["Effect.Ref"];
  var Foreign_Object = PS["Foreign.Object"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var Text_Smolder_Markup = PS["Text.Smolder.Markup"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var Web_DOM = PS["Web.DOM"];
  var Web_DOM_Element = PS["Web.DOM.Element"];
  var Web_DOM_Node = PS["Web.DOM.Node"];
  var Web_DOM_NodeType = PS["Web.DOM.NodeType"];
  var Web_DOM_Text = PS["Web.DOM.Text"];
  var Web_Event_Event = PS["Web.Event.Event"];
  var Web_Event_EventTarget = PS["Web.Event.EventTarget"];
  var uncons = function (v) {
      var v1 = Data_Array.index(v.array)(v.index);
      if (v1 instanceof Data_Maybe.Nothing) {
          return Data_Maybe.Nothing.value;
      };
      if (v1 instanceof Data_Maybe.Just) {
          return Data_Maybe.Just.create(new Data_Tuple.Tuple(v1.value0, {
              index: v.index + 1 | 0,
              array: v.array
          }));
      };
      throw new Error("Failed pattern match at Text.Smolder.Renderer.DOM line 48, column 33 - line 50, column 60: " + [ v1.constructor.name ]);
  };
  var setEvent = function (n) {
      return function (v) {
          return Web_Event_EventTarget.addEventListener(v.value0)(v.value1)(false)(Web_DOM_Element.toEventTarget(n));
      };
  };
  var setAttr = function (n) {
      return function (v) {
          return Web_DOM_Element.setAttribute(v.value0)(v.value1)(n);
      };
  };
  var setAttributes = function (n) {
      return Control_Safely.traverse_(Data_CatList.foldableCatList)(Control_Monad_Rec_Class.monadRecEffect)(setAttr(n));
  };
  var pop = function (ref) {
      var pop$prime = function (l) {
          var v = uncons(l);
          if (v instanceof Data_Maybe.Just) {
              return {
                  state: v.value0.value1,
                  value: new Data_Maybe.Just(v.value0.value0)
              };
          };
          if (v instanceof Data_Maybe.Nothing) {
              return {
                  state: l,
                  value: Data_Maybe.Nothing.value
              };
          };
          throw new Error("Failed pattern match at Text.Smolder.Renderer.DOM line 134, column 16 - line 136, column 45: " + [ v.constructor.name ]);
      };
      return Effect_Ref["modify'"](pop$prime)(ref);
  };
  var patchEvents = function (node) {
      return function (events) {
          var toTuple = function (v) {
              return new Data_Tuple.Tuple(v.value0, v.value1);
          };
          return $foreign.patchEventListeners(node)(Foreign_Object.fromFoldable(Data_CatList.foldableCatList)(Data_Functor.map(Data_CatList.functorCatList)(toTuple)(events)));
      };
  };
  var patchAttrs = function (node) {
      return function (attrs) {
          var toTuple = function (v) {
              return new Data_Tuple.Tuple(v.value0, v.value1);
          };
          return $foreign.patchAttributes(node)(Foreign_Object.fromFoldable(Data_CatList.foldableCatList)(Data_Functor.map(Data_CatList.functorCatList)(toTuple)(attrs)));
      };
  };
  var foldableAList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return function (l) {
              return Data_Foldable.foldMapDefaultL(foldableAList)(dictMonoid)(f)(l);
          };
      };
  }, function (f) {
      return function (b) {
          return function (l) {
              return $foreign.foldlAList(f)(b)(l);
          };
      };
  }, function (f) {
      return function (b) {
          return function (l) {
              return Data_Foldable.foldrDefault(foldableAList)(f)(b)(l);
          };
      };
  });
  var removeNodes = function (parent) {
      return function (children) {
          return Control_Safely.for_(foldableAList)(Control_Monad_Rec_Class.monadRecEffect)(children)(function (child) {
              return function __do() {
                  var v = Web_DOM_Node.removeChild(child)(parent)();
                  return Data_Unit.unit;
              };
          });
      };
  };
  var element = function (ns) {
      return function (name) {
          return function (attrs) {
              return function (events) {
                  var makeElement$prime = (function () {
                      if (ns instanceof Text_Smolder_Markup.HTMLns) {
                          return $foreign.makeElement;
                      };
                      if (ns instanceof Text_Smolder_Markup.SVGns) {
                          return $foreign.makeElementNS("http://www.w3.org/2000/svg");
                      };
                      throw new Error("Failed pattern match at Text.Smolder.Renderer.DOM line 72, column 20 - line 75, column 3: " + [ ns.constructor.name ]);
                  })();
                  return function __do() {
                      var v = makeElement$prime(name)();
                      setAttributes(v)(attrs)();
                      Control_Safely.traverse_(Data_CatList.foldableCatList)(Control_Monad_Rec_Class.monadRecEffect)(setEvent(v))(events)();
                      return v;
                  };
              };
          };
      };
  };
  var asAList = function ($95) {
      return Data_Functor.map(Effect.functorEffect)(function (a) {
          return {
              index: 0,
              array: a
          };
      })($foreign.nodeListToArray($95));
  };
  var childrenOf = function (parent) {
      return Control_Bind.bind(Effect.bindEffect)(Web_DOM_Node.childNodes(parent))(asAList);
  };
  var walk = function (parent) {
      return function (ref) {
          return function (v) {
              if (v instanceof Text_Smolder_Markup.Empty) {
                  return function __do() {
                      var v1 = Effect_Ref.read(ref)();
                      removeNodes(parent)(v1)();
                      return v.value0;
                  };
              };
              if (v instanceof Text_Smolder_Markup.Content) {
                  return function __do() {
                      var node$prime = pop(ref)();
                      if (node$prime instanceof Data_Maybe.Nothing) {
                          var v1 = $foreign.makeText(v.value0)();
                          var v2 = Web_DOM_Node.appendChild(Web_DOM_Text.toNode(v1))(parent)();
                          return v.value1;
                      };
                      if (node$prime instanceof Data_Maybe.Just) {
                          var t = Web_DOM_Node.nodeType()(node$prime.value0);
                          (function () {
                              var $75 = Data_Eq.eq(Web_DOM_NodeType.eqNodeType)(t)(Web_DOM_NodeType.TextNode.value);
                              if ($75) {
                                  return Web_DOM_Node.setNodeValue(v.value0)(node$prime.value0)();
                              };
                              var v1 = $foreign.makeText(v.value0)();
                              return Data_Functor["void"](Effect.functorEffect)(Web_DOM_Node.replaceChild(Web_DOM_Text.toNode(v1))(node$prime.value0)(parent))();
                          })();
                          return v.value1;
                      };
                      throw new Error("Failed pattern match at Text.Smolder.Renderer.DOM line 145, column 60 - line 157, column 14: " + [ node$prime.constructor.name ]);
                  };
              };
              if (v instanceof Text_Smolder_Markup.Element) {
                  return function __do() {
                      var node$prime = pop(ref)();
                      if (node$prime instanceof Data_Maybe.Nothing) {
                          var v1 = element(v.value0)(v.value1)(v.value3)(v.value4)();
                          patch(v1)(v.value2)();
                          var v2 = Web_DOM_Node.appendChild(Web_DOM_Element.toNode(v1))(parent)();
                          return v.value5;
                      };
                      if (node$prime instanceof Data_Maybe.Just) {
                          (function () {
                              var v1 = Web_DOM_Node.nodeType()(node$prime.value0);
                              var v2 = Data_String_Common.toUpper(Web_DOM_Node.nodeName(node$prime.value0)) === Data_String_Common.toUpper(v.value1);
                              if (v2 && v1 instanceof Web_DOM_NodeType.ElementNode) {
                                  patchAttrs(node$prime.value0)(v.value3)();
                                  patchEvents(node$prime.value0)(v.value4)();
                                  return patch(node$prime.value0)(v.value2)();
                              };
                              var v3 = element(v.value0)(v.value1)(v.value3)(v.value4)();
                              patch(v3)(v.value2)();
                              return Data_Functor["void"](Effect.functorEffect)(Web_DOM_Node.replaceChild(Web_DOM_Element.toNode(v3))(node$prime.value0)(parent))();
                          })();
                          return v.value5;
                      };
                      throw new Error("Failed pattern match at Text.Smolder.Renderer.DOM line 159, column 85 - line 180, column 14: " + [ node$prime.constructor.name ]);
                  };
              };
              throw new Error("Failed pattern match at Text.Smolder.Renderer.DOM line 138, column 1 - line 138, column 66: " + [ parent.constructor.name, ref.constructor.name, v.constructor.name ]);
          };
      };
  };
  var patch = function (parent) {
      return function (markup) {
          var node = Web_DOM_Element.toNode(parent);
          return function __do() {
              var v = childrenOf(node)();
              var v1 = Effect_Ref["new"](v)();
              Control_Monad_Free.foldFree(Control_Monad_Rec_Class.monadRecEffect)(walk(node)(v1))(markup)();
              var v2 = Effect_Ref.read(v1)();
              return removeNodes(node)(v2)();
          };
      };
  };
  exports["patch"] = patch;
})(PS["Text.Smolder.Renderer.DOM"] = PS["Text.Smolder.Renderer.DOM"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var BaseClient = PS["BaseClient"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_RWS_Trans = PS["Control.Monad.RWS.Trans"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Argonaut_Decode_Class = PS["Data.Argonaut.Decode.Class"];
  var Data_Argonaut_Decode_Generic_Rep = PS["Data.Argonaut.Decode.Generic.Rep"];
  var Data_Argonaut_Encode_Generic_Rep = PS["Data.Argonaut.Encode.Generic.Rep"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Lens = PS["Data.Lens"];
  var Data_Lens_At = PS["Data.Lens.At"];
  var Data_Lens_Getter = PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = PS["Data.Lens.Internal.Forget"];
  var Data_Lens_Setter = PS["Data.Lens.Setter"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Map = PS["Data.Map"];
  var Data_Map_Internal = PS["Data.Map.Internal"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Profunctor_Strong = PS["Data.Profunctor.Strong"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_String = PS["Data.String"];
  var Data_String_Common = PS["Data.String.Common"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Tuple_Nested = PS["Data.Tuple.Nested"];
  var Data_Unit = PS["Data.Unit"];
  var Effect = PS["Effect"];
  var Effect_Exception = PS["Effect.Exception"];
  var Effect_Ref = PS["Effect.Ref"];
  var Effect_Timer = PS["Effect.Timer"];
  var Game = PS["Game"];
  var HtmlViews = PS["HtmlViews"];
  var Prelude = PS["Prelude"];
  var Rendering = PS["Rendering"];
  var Text_Smolder_Renderer_DOM = PS["Text.Smolder.Renderer.DOM"];
  var Types = PS["Types"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var Utils = PS["Utils"];
  var Web_DOM = PS["Web.DOM"];
  var Web_DOM_Element = PS["Web.DOM.Element"];
  var Web_DOM_Node = PS["Web.DOM.Node"];
  var Web_DOM_ParentNode = PS["Web.DOM.ParentNode"];
  var Web_Event_Event = PS["Web.Event.Event"];
  var Web_Event_EventTarget = PS["Web.Event.EventTarget"];
  var Web_HTML = PS["Web.HTML"];
  var Web_HTML_HTMLDocument = PS["Web.HTML.HTMLDocument"];
  var Web_HTML_HTMLElement = PS["Web.HTML.HTMLElement"];
  var Web_HTML_HTMLInputElement = PS["Web.HTML.HTMLInputElement"];
  var Web_HTML_Location = PS["Web.HTML.Location"];
  var Web_HTML_Window = PS["Web.HTML.Window"];
  var Web_Storage_Storage = PS["Web.Storage.Storage"];
  var Web_UIEvent_KeyboardEvent = PS["Web.UIEvent.KeyboardEvent"];
  var Web_UIEvent_KeyboardEvent_EventTypes = PS["Web.UIEvent.KeyboardEvent.EventTypes"];                 
  var startNewGame = function (game) {
      return {
          game: game,
          prevGame: game,
          redrawMap: true
      };
  };
  var showElement = function (el) {
      return Web_DOM_Element.setAttribute("style")("display: block;")(el);
  };
  var removeAllChildren = function (node) {
      return function __do() {
          var v = Web_DOM_Node.firstChild(node)();
          if (v instanceof Data_Maybe.Just) {
              Data_Functor["void"](Effect.functorEffect)(Web_DOM_Node.removeChild(v.value0)(node))();
              return removeAllChildren(node)();
          };
          if (v instanceof Data_Maybe.Nothing) {
              return Data_Unit.unit;
          };
          throw new Error("Failed pattern match at Client line 281, column 3 - line 286, column 12: " + [ v.constructor.name ]);
      };
  };
  var q = function (sel) {
      return function __do() {
          var $73 = Control_Bind.bind(Effect.bindEffect)(Web_HTML.window)(Web_HTML_Window.document)();
          return Web_DOM_ParentNode.querySelector(sel)(Web_HTML_HTMLDocument.toParentNode($73))();
      };
  };
  var q$prime = function (sel) {
      return function __do() {
          var v = q(sel)();
          if (v instanceof Data_Maybe.Just) {
              return v.value0;
          };
          if (v instanceof Data_Maybe.Nothing) {
              return Effect_Exception["throw"]("Could not find an element matching " + sel)();
          };
          throw new Error("Failed pattern match at Client line 261, column 3 - line 263, column 68: " + [ v.constructor.name ]);
      };
  };
  var render = function (ctx) {
      return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Effect.bindEffect)(Data_Monoid.monoidArray))(Control_Monad_State_Class.get(Control_Monad_RWS_Trans.monadStateRWST(Effect.monadEffect)(Data_Monoid.monoidArray)))(function (v) {
          return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Effect.bindEffect)(Data_Monoid.monoidArray))(BaseClient.askPlayerId(Control_Monad_RWS_Trans.monadRWST(Effect.monadEffect)(Data_Monoid.monoidArray))(Control_Monad_RWS_Trans.monadReaderRWST(Effect.monadEffect)(Data_Monoid.monoidArray)))(function (v1) {
              if (v instanceof Types.CInProgress) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_RWS_Trans.bindRWST(Effect.bindEffect)(Data_Monoid.monoidArray))(BaseClient.liftEff(Rendering.render(ctx)(v.value0.game)(v1)(v.value0.redrawMap)))(function () {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_RWS_Trans.bindRWST(Effect.bindEffect)(Data_Monoid.monoidArray))(Control_Monad_State_Class.put(Control_Monad_RWS_Trans.monadStateRWST(Effect.monadEffect)(Data_Monoid.monoidArray))(new Types.CInProgress(Data_Lens_Setter.set(Types.redrawMap(Data_Profunctor_Strong.strongFn))(false)(v.value0))))(function () {
                          return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Effect.bindEffect)(Data_Monoid.monoidArray))(BaseClient.askPlayers(Control_Monad_RWS_Trans.monadRWST(Effect.monadEffect)(Data_Monoid.monoidArray))(Control_Monad_RWS_Trans.monadReaderRWST(Effect.monadEffect)(Data_Monoid.monoidArray)))(function (v2) {
                              var html = HtmlViews.simpleScores(v2)(v.value0.game);
                              return BaseClient.liftEff(Control_Bind.bind(Effect.bindEffect)(q$prime("#scores-container"))(Data_Function.flip(Text_Smolder_Renderer_DOM.patch)(html)));
                          });
                      });
                  });
              };
              if (v instanceof Types.CWaitingForPlayers) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_RWS_Trans.bindRWST(Effect.bindEffect)(Data_Monoid.monoidArray))(Control_Applicative.when(Control_Monad_RWS_Trans.applicativeRWST(Effect.monadEffect)(Data_Monoid.monoidArray))(!Data_Lens_Getter.viewOn(v.value0)(Types.backgroundCleared(Data_Lens_Internal_Forget.strongForget)))(Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_RWS_Trans.bindRWST(Effect.bindEffect)(Data_Monoid.monoidArray))(BaseClient.liftEff(Rendering.clearBoth(ctx)))(function () {
                      return Control_Monad_State_Class.put(Control_Monad_RWS_Trans.monadStateRWST(Effect.monadEffect)(Data_Monoid.monoidArray))(new Types.CWaitingForPlayers(Data_Lens_Setter.set(Types.backgroundCleared(Data_Profunctor_Strong.strongFn))(true)(v.value0)));
                  })))(function () {
                      return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Effect.bindEffect)(Data_Monoid.monoidArray))(BaseClient.askPlayers(Control_Monad_RWS_Trans.monadRWST(Effect.monadEffect)(Data_Monoid.monoidArray))(Control_Monad_RWS_Trans.monadReaderRWST(Effect.monadEffect)(Data_Monoid.monoidArray)))(function (v2) {
                          var html = HtmlViews.waitingMessage(v.value0)(v1)(v2);
                          return BaseClient.liftEff(function __do() {
                              var v3 = q("#waiting-message")();
                              return Utils.whenJust(Effect.applicativeEffect)(v3)(Data_Function.flip(Text_Smolder_Renderer_DOM.patch)(html))();
                          });
                      });
                  });
              };
              throw new Error("Failed pattern match at Client line 136, column 3 - line 154, column 38: " + [ v.constructor.name ]);
          });
      });
  };
  var withEl = function (f) {
      return function (sel) {
          return function __do() {
              var v = q(sel)();
              return Utils.whenJust(Effect.applicativeEffect)(v)(f)();
          };
      };
  };
  var showSimpleScoresDiv = withEl(showElement)("#scores-container");
  var showWaitingMessageDiv = withEl(showElement)("#waiting-message");
  var putWaitingState = function (prevGame) {
      var asList = Data_Map_Internal.toUnfoldable(Data_List_Types.unfoldableList);
      var getStates = function (mg) {
          if (mg instanceof Data_Maybe.Just) {
              return Data_Map_Internal.fromFoldable(Types.ordPlayerId)(Data_List_Types.foldableList)(Data_Functor.map(Data_List_Types.functorList)(function (v) {
                  return new Data_Tuple.Tuple(v.value0, Types.NotReady.value);
              })(asList(Data_Lens_Getter.viewOn(mg.value0)(Types.players(Data_Lens_Internal_Forget.strongForget)))));
          };
          if (mg instanceof Data_Maybe.Nothing) {
              return Data_Map_Internal.empty;
          };
          throw new Error("Failed pattern match at Client line 233, column 5 - line 236, column 25: " + [ mg.constructor.name ]);
      };
      return Control_Monad_State_Class.put(Control_Monad_RWS_Trans.monadStateRWST(Effect.monadEffect)(Data_Monoid.monoidArray))(new Types.CWaitingForPlayers({
          prevGame: prevGame,
          backgroundCleared: false,
          readyStates: getStates(prevGame)
      }));
  };
  var onError = BaseClient.liftEff(function __do() {
      withEl(showElement)("#error")();
      return withEl(showElement)("#error-overlay")();
  });
  var onClose = onError;
  var matchWaiting = Types.matchMessage(Control_Monad_RWS_Trans.monadRWST(Effect.monadEffect)(Data_Monoid.monoidArray))(Types.asWaitingMessageO);
  var matchInProgress = Types.matchMessage(Control_Monad_RWS_Trans.monadRWST(Effect.monadEffect)(Data_Monoid.monoidArray))(Types.asInProgressMessageO);
  var keySpace = " ";
  var keyEnter = "Enter";
  var initialState = new Types.CWaitingForPlayers({
      prevGame: Data_Maybe.Nothing.value,
      backgroundCleared: false,
      readyStates: Data_Map_Internal.empty
  });
  var hideElement = function (el) {
      return Web_DOM_Element.setAttribute("style")("display: none;")(el);
  };
  var hideSimpleScoresDiv = withEl(hideElement)("#scores-container");
  var hideWaitingMessageDiv = withEl(hideElement)("#waiting-message");
  var onMessage = function (msg) {
      return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Effect.bindEffect)(Data_Monoid.monoidArray))(Control_Monad_State_Class.get(Control_Monad_RWS_Trans.monadStateRWST(Effect.monadEffect)(Data_Monoid.monoidArray)))(function (v) {
          if (v instanceof Types.CInProgress) {
              return matchInProgress(msg)(function (updates) {
                  var game$prime = Game.applyGameUpdates(Data_Foldable.foldableArray)(updates)(v.value0.game);
                  var $46 = Game.isEnded(game$prime);
                  if ($46) {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_RWS_Trans.bindRWST(Effect.bindEffect)(Data_Monoid.monoidArray))(BaseClient.liftEff(function __do() {
                          showWaitingMessageDiv();
                          return hideSimpleScoresDiv();
                      }))(function () {
                          return putWaitingState(new Data_Maybe.Just(game$prime));
                      });
                  };
                  return Control_Monad_State_Class.put(Control_Monad_RWS_Trans.monadStateRWST(Effect.monadEffect)(Data_Monoid.monoidArray))(new Types.CInProgress({
                      game: game$prime,
                      prevGame: v.value0.game,
                      redrawMap: v.value0.redrawMap
                  }));
              });
          };
          if (v instanceof Types.CWaitingForPlayers) {
              return matchWaiting(msg)(function (update) {
                  if (update instanceof Types.GameStarting) {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_RWS_Trans.bindRWST(Effect.bindEffect)(Data_Monoid.monoidArray))(BaseClient.liftEff(function __do() {
                          hideWaitingMessageDiv();
                          return showSimpleScoresDiv();
                      }))(function () {
                          return Control_Monad_State_Class.put(Control_Monad_RWS_Trans.monadStateRWST(Effect.monadEffect)(Data_Monoid.monoidArray))(Types.CInProgress.create(startNewGame(Types.unwrapGame(update.value0))));
                      });
                  };
                  if (update instanceof Types.NewReadyStates) {
                      return Control_Monad_State_Class.put(Control_Monad_RWS_Trans.monadStateRWST(Effect.monadEffect)(Data_Monoid.monoidArray))(new Types.CWaitingForPlayers(Data_Lens_Setter.set(Types.readyStates(Data_Profunctor_Strong.strongFn))(update.value0)(v.value0)));
                  };
                  throw new Error("Failed pattern match at Client line 200, column 9 - line 207, column 60: " + [ update.constructor.name ]);
              });
          };
          throw new Error("Failed pattern match at Client line 184, column 3 - line 207, column 60: " + [ v.constructor.name ]);
      });
  };
  var popupPromptInput = function (msg) {
      return function (val) {
          return function (cont) {
              var handleKeydown = function (cEl) {
                  return function (iEl) {
                      return function (event) {
                          return Control_Applicative.when(Effect.applicativeEffect)(Web_UIEvent_KeyboardEvent.key(event) === keyEnter)(function __do() {
                              hideElement(cEl)();
                              return Control_Bind.bind(Effect.bindEffect)(Web_HTML_HTMLInputElement.value(iEl))(cont)();
                          });
                      };
                  };
              };
              return function __do() {
                  var v = q$prime("#prompt")();
                  showElement(v)();
                  var v1 = q$prime("#prompt-message")();
                  Web_DOM_Node.setTextContent(msg)(Web_DOM_Element.toNode(v1))();
                  var v2 = Data_Functor.map(Effect.functorEffect)(function (el) {
                      return Control_Bind.bind(Data_Maybe.bindMaybe)(el)(Web_HTML_HTMLInputElement.fromElement);
                  })(q("#prompt-input"))();
                  if (v2 instanceof Data_Maybe.Nothing) {
                      return Effect_Exception["throw"]("Could not locate HTML input element #prompt-input")();
                  };
                  if (v2 instanceof Data_Maybe.Just) {
                      Web_HTML_HTMLInputElement.setValue(val)(v2.value0)();
                      Web_HTML_HTMLElement.focus(Web_HTML_HTMLInputElement.toHTMLElement(v2.value0))();
                      Web_HTML_HTMLInputElement.select(v2.value0)();
                      var v3 = Web_Event_EventTarget.eventListener(function (evt) {
                          return Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(Web_UIEvent_KeyboardEvent.fromEvent(evt))(handleKeydown(v)(v2.value0));
                      })();
                      return Web_Event_EventTarget.addEventListener(Web_UIEvent_KeyboardEvent_EventTypes.keydown)(v3)(false)(Web_HTML_HTMLInputElement.toEventTarget(v2.value0))();
                  };
                  throw new Error("Failed pattern match at Client line 89, column 3 - line 99, column 94: " + [ v2.constructor.name ]);
              };
          };
      };
  };
  var promptScreenName = function (msg) {
      return function (cont) {
          return function __do() {
              var v = Control_Bind.bind(Effect.bindEffect)(Web_HTML.window)(Web_HTML_Window.localStorage)();
              var v1 = Web_Storage_Storage.getItem("screenName")(v)();
              var val = Data_Maybe.fromMaybe("")(v1);
              return popupPromptInput(msg)(val)(function (name) {
                  return function __do() {
                      Web_Storage_Storage.setItem("screenName")(name)(v)();
                      return cont(name)();
                  };
              })();
          };
      };
  };
  var directionFromKey = function (code) {
      if (code === "ArrowUp") {
          return new Data_Maybe.Just(Types.Up.value);
      };
      if (code === "ArrowDown") {
          return new Data_Maybe.Just(Types.Down.value);
      };
      if (code === "ArrowLeft") {
          return new Data_Maybe.Just(Types.Left.value);
      };
      if (code === "ArrowRight") {
          return new Data_Maybe.Just(Types.Right.value);
      };
      return Data_Maybe.Nothing.value;
  };
  var onKeyDown = function (event) {
      var key = Web_UIEvent_KeyboardEvent.key(event);
      return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Effect.bindEffect)(Data_Monoid.monoidArray))(Control_Monad_State_Class.get(Control_Monad_RWS_Trans.monadStateRWST(Effect.monadEffect)(Data_Monoid.monoidArray)))(function (v) {
          if (v instanceof Types.CInProgress) {
              return Utils.whenJust(Control_Monad_RWS_Trans.applicativeRWST(Effect.monadEffect)(Data_Monoid.monoidArray))(directionFromKey(key))(function (direction) {
                  return BaseClient.sendUpdate(Control_Monad_RWS_Trans.monadRWST(Effect.monadEffect)(Data_Monoid.monoidArray))(Control_Monad_RWS_Trans.monadWriterRWST(Effect.monadEffect)(Data_Monoid.monoidArray))(new Types.SIInProgress(direction));
              });
          };
          if (v instanceof Types.CWaitingForPlayers) {
              return Control_Applicative.when(Control_Monad_RWS_Trans.applicativeRWST(Effect.monadEffect)(Data_Monoid.monoidArray))(key === keySpace)(BaseClient.sendUpdate(Control_Monad_RWS_Trans.monadRWST(Effect.monadEffect)(Data_Monoid.monoidArray))(Control_Monad_RWS_Trans.monadWriterRWST(Effect.monadEffect)(Data_Monoid.monoidArray))(Types.SIToggleReadyState.value));
          };
          throw new Error("Failed pattern match at Client line 162, column 3 - line 169, column 38: " + [ v.constructor.name ]);
      });
  };
  var mkCallbacks = Data_Functor.mapFlipped(Effect.functorEffect)(Rendering.setupRendering)(function (ctx) {
      return {
          render: render(ctx),
          onMessage: onMessage,
          onKeyDown: onKeyDown,
          onError: onError,
          onClose: onClose
      };
  });
  var start = function (startedRef) {
      return function (name) {
          return function __do() {
              var v = Effect_Ref.read(startedRef)();
              return Control_Applicative.when(Effect.applicativeEffect)(!v)(function __do() {
                  Effect_Ref.write(true)(startedRef)();
                  var v1 = mkCallbacks();
                  var v2 = Control_Bind.bind(Effect.bindEffect)(Web_HTML.window)(Web_HTML_Window.location)();
                  var v3 = Web_HTML_Location.host(v2)();
                  var v4 = Web_HTML_Location.protocol(v2)();
                  var wsProtocol = (function () {
                      var $70 = v4 === "https:";
                      if ($70) {
                          return "wss:";
                      };
                      return "ws:";
                  })();
                  var socketUrl = wsProtocol + ("//" + (v3 + "/"));
                  return BaseClient.startClient(Types.genericServerOutgoingMessage)(Data_Argonaut_Decode_Generic_Rep.decodeRepSum(Data_Argonaut_Decode_Generic_Rep.decodeRepConstructor(new Data_Symbol.IsSymbol(function () {
                      return "SOWaiting";
                  }))(Data_Argonaut_Decode_Generic_Rep.decodeRepArgsArgument(Types.decodeJsonWaitingUpdate)))(Data_Argonaut_Decode_Generic_Rep.decodeRepConstructor(new Data_Symbol.IsSymbol(function () {
                      return "SOInProgress";
                  }))(Data_Argonaut_Decode_Generic_Rep.decodeRepArgsArgument(Data_Argonaut_Decode_Class.decodeArray(Types.decodeJsonGameUpdate)))))(Types.genericServerIncomingMessage)(Data_Argonaut_Encode_Generic_Rep.encodeRepSum(Data_Argonaut_Encode_Generic_Rep.encodeRepConstructor(new Data_Symbol.IsSymbol(function () {
                      return "SIToggleReadyState";
                  }))(Data_Argonaut_Encode_Generic_Rep.encodeRepArgsNoArguments))(Data_Argonaut_Encode_Generic_Rep.encodeRepConstructor(new Data_Symbol.IsSymbol(function () {
                      return "SIInProgress";
                  }))(Data_Argonaut_Encode_Generic_Rep.encodeRepArgsArgument(Types.encodeJsonDirection))))(initialState)(v1)(socketUrl)(name)();
              })();
          };
      };
  };
  var main = (function () {
      var loop = function (startRef) {
          return promptScreenName("Enter a screen name:")(function (name) {
              var $71 = Data_String_Common["null"](Data_String_Common.trim(name));
              if ($71) {
                  return loop(startRef);
              };
              return start(startRef)(name);
          });
      };
      return function __do() {
          hideSimpleScoresDiv();
          var v = Effect_Ref["new"](false)();
          return loop(v)();
      };
  })();
  exports["initialState"] = initialState;
  exports["main"] = main;
  exports["promptScreenName"] = promptScreenName;
  exports["popupPromptInput"] = popupPromptInput;
  exports["start"] = start;
  exports["mkCallbacks"] = mkCallbacks;
  exports["render"] = render;
  exports["onKeyDown"] = onKeyDown;
  exports["matchInProgress"] = matchInProgress;
  exports["matchWaiting"] = matchWaiting;
  exports["onMessage"] = onMessage;
  exports["startNewGame"] = startNewGame;
  exports["onError"] = onError;
  exports["onClose"] = onClose;
  exports["putWaitingState"] = putWaitingState;
  exports["directionFromKey"] = directionFromKey;
  exports["keySpace"] = keySpace;
  exports["keyEnter"] = keyEnter;
  exports["q"] = q;
  exports["q'"] = q$prime;
  exports["withEl"] = withEl;
  exports["showElement"] = showElement;
  exports["hideElement"] = hideElement;
  exports["showWaitingMessageDiv"] = showWaitingMessageDiv;
  exports["hideWaitingMessageDiv"] = hideWaitingMessageDiv;
  exports["showSimpleScoresDiv"] = showSimpleScoresDiv;
  exports["hideSimpleScoresDiv"] = hideSimpleScoresDiv;
  exports["removeAllChildren"] = removeAllChildren;
})(PS["Client"] = PS["Client"] || {});
PS["Client"].main();