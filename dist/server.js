// Generated by purs bundle 0.12.0
var PS = {};
(function(exports) {
    "use strict";

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var compose = function (dict) {
      return dict.compose;
  };
  var composeFlipped = function (dictSemigroupoid) {
      return function (f) {
          return function (g) {
              return compose(dictSemigroupoid)(g)(f);
          };
      };
  };
  exports["compose"] = compose;
  exports["Semigroupoid"] = Semigroupoid;
  exports["composeFlipped"] = composeFlipped;
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS["Control.Semigroupoid"] = PS["Control.Semigroupoid"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];                 
  var Category = function (Semigroupoid0, identity) {
      this.Semigroupoid0 = Semigroupoid0;
      this.identity = identity;
  };
  var identity = function (dict) {
      return dict.identity;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["Category"] = Category;
  exports["identity"] = identity;
  exports["categoryFn"] = categoryFn;
})(PS["Control.Category"] = PS["Control.Category"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS["Data.Boolean"] = PS["Data.Boolean"] || {});
(function(exports) {
    "use strict";

  exports.refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };

  exports.eqArrayImpl = function (f) {
    return function (xs) {
      return function (ys) {
        if (xs === ys) return true;
        if (xs.length !== ys.length) return false;
        for (var i = 0; i < xs.length; i++) {
          if (!f(xs[i])(ys[i])) return false;
        }
        return true;
      };
    };
  };
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function(exports) {
    "use strict";

  exports.boolConj = function (b1) {
    return function (b2) {
      return b1 && b2;
    };
  };

  exports.boolDisj = function (b1) {
    return function (b2) {
      return b1 || b2;
    };
  };

  exports.boolNot = function (b) {
    return !b;
  };
})(PS["Data.HeytingAlgebra"] = PS["Data.HeytingAlgebra"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Symbol"];      
  var SProxy = (function () {
      function SProxy() {

      };
      SProxy.value = new SProxy();
      return SProxy;
  })();
  var IsSymbol = function (reflectSymbol) {
      this.reflectSymbol = reflectSymbol;
  };
  var reflectSymbol = function (dict) {
      return dict.reflectSymbol;
  };
  exports["IsSymbol"] = IsSymbol;
  exports["reflectSymbol"] = reflectSymbol;
  exports["SProxy"] = SProxy;
})(PS["Data.Symbol"] = PS["Data.Symbol"] || {});
(function(exports) {
    "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
    "use strict";

  exports.showIntImpl = function (n) {
    return n.toString();
  };

  exports.showNumberImpl = function (n) {
    var str = n.toString();
    return isNaN(str + ".0") ? str : str + ".0";
  };

  exports.showStringImpl = function (s) {
    var l = s.length;
    return "\"" + s.replace(
      /[\0-\x1F\x7F"\\]/g, // eslint-disable-line no-control-regex
      function (c, i) {
        switch (c) {
          case "\"":
          case "\\":
            return "\\" + c;
          case "\x07": return "\\a";
          case "\b": return "\\b";
          case "\f": return "\\f";
          case "\n": return "\\n";
          case "\r": return "\\r";
          case "\t": return "\\t";
          case "\v": return "\\v";
        }
        var k = i + 1;
        var empty = k < l && s[k] >= "0" && s[k] <= "9" ? "\\&" : "";
        return "\\" + c.charCodeAt(0).toString(10) + empty;
      }
    ) + "\"";
  };

  exports.cons = function (head) {
    return function (tail) {
      return [head].concat(tail);
    };
  };

  exports.join = function (separator) {
    return function (xs) {
      return xs.join(separator);
    };
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
    "use strict";

  exports.unsafeGet = function (label) {
    return function (rec) {
      return rec[label];
    };
  };
})(PS["Record.Unsafe"] = PS["Record.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Record.Unsafe"];
  exports["unsafeGet"] = $foreign.unsafeGet;
})(PS["Record.Unsafe"] = PS["Record.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var RLProxy = (function () {
      function RLProxy() {

      };
      RLProxy.value = new RLProxy();
      return RLProxy;
  })();
  exports["RLProxy"] = RLProxy;
})(PS["Type.Data.RowList"] = PS["Type.Data.RowList"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Show"];
  var Data_Symbol = PS["Data.Symbol"];
  var Record_Unsafe = PS["Record.Unsafe"];
  var Type_Data_RowList = PS["Type.Data.RowList"];                 
  var Show = function (show) {
      this.show = show;
  };
  var ShowRecordFields = function (showRecordFields) {
      this.showRecordFields = showRecordFields;
  };
  var showString = new Show($foreign.showStringImpl);
  var showRecordFieldsNil = new ShowRecordFields(function (v) {
      return function (v1) {
          return [  ];
      };
  });
  var showRecordFields = function (dict) {
      return dict.showRecordFields;
  };
  var showRecord = function (dictRowToList) {
      return function (dictShowRecordFields) {
          return new Show(function (record) {
              var v = showRecordFields(dictShowRecordFields)(Type_Data_RowList.RLProxy.value)(record);
              if (v.length === 0) {
                  return "{}";
              };
              return $foreign.join(" ")([ "{", $foreign.join(", ")(v), "}" ]);
          });
      };
  };
  var showNumber = new Show($foreign.showNumberImpl);
  var showInt = new Show($foreign.showIntImpl);
  var show = function (dict) {
      return dict.show;
  };
  var showRecordFieldsCons = function (dictIsSymbol) {
      return function (dictShowRecordFields) {
          return function (dictShow) {
              return new ShowRecordFields(function (v) {
                  return function (record) {
                      var tail = showRecordFields(dictShowRecordFields)(Type_Data_RowList.RLProxy.value)(record);
                      var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                      var focus = Record_Unsafe.unsafeGet(key)(record);
                      return $foreign.cons($foreign.join(": ")([ key, show(dictShow)(focus) ]))(tail);
                  };
              });
          };
      };
  };
  exports["Show"] = Show;
  exports["show"] = show;
  exports["ShowRecordFields"] = ShowRecordFields;
  exports["showRecordFields"] = showRecordFields;
  exports["showInt"] = showInt;
  exports["showNumber"] = showNumber;
  exports["showString"] = showString;
  exports["showRecord"] = showRecord;
  exports["showRecordFieldsNil"] = showRecordFieldsNil;
  exports["showRecordFieldsCons"] = showRecordFieldsCons;
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Unit"];
  var Data_Show = PS["Data.Show"];
  exports["unit"] = $foreign.unit;
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.HeytingAlgebra"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Unit = PS["Data.Unit"];
  var Record_Unsafe = PS["Record.Unsafe"];
  var Type_Data_Row = PS["Type.Data.Row"];
  var Type_Data_RowList = PS["Type.Data.RowList"];                 
  var HeytingAlgebra = function (conj, disj, ff, implies, not, tt) {
      this.conj = conj;
      this.disj = disj;
      this.ff = ff;
      this.implies = implies;
      this.not = not;
      this.tt = tt;
  };
  var tt = function (dict) {
      return dict.tt;
  };
  var not = function (dict) {
      return dict.not;
  };
  var implies = function (dict) {
      return dict.implies;
  };
  var ff = function (dict) {
      return dict.ff;
  };
  var disj = function (dict) {
      return dict.disj;
  };
  var heytingAlgebraBoolean = new HeytingAlgebra($foreign.boolConj, $foreign.boolDisj, false, function (a) {
      return function (b) {
          return disj(heytingAlgebraBoolean)(not(heytingAlgebraBoolean)(a))(b);
      };
  }, $foreign.boolNot, true);
  var conj = function (dict) {
      return dict.conj;
  };
  exports["HeytingAlgebra"] = HeytingAlgebra;
  exports["tt"] = tt;
  exports["ff"] = ff;
  exports["implies"] = implies;
  exports["conj"] = conj;
  exports["disj"] = disj;
  exports["not"] = not;
  exports["heytingAlgebraBoolean"] = heytingAlgebraBoolean;
})(PS["Data.HeytingAlgebra"] = PS["Data.HeytingAlgebra"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];
  var Record_Unsafe = PS["Record.Unsafe"];
  var Type_Data_RowList = PS["Type.Data.RowList"];                 
  var Eq = function (eq) {
      this.eq = eq;
  };                                    
  var eqInt = new Eq($foreign.refEq);
  var eqChar = new Eq($foreign.refEq);
  var eqBoolean = new Eq($foreign.refEq);
  var eq = function (dict) {
      return dict.eq;
  };
  var eqArray = function (dictEq) {
      return new Eq($foreign.eqArrayImpl(eq(dictEq)));
  };
  var notEq = function (dictEq) {
      return function (x) {
          return function (y) {
              return eq(eqBoolean)(eq(dictEq)(x)(y))(false);
          };
      };
  };
  exports["Eq"] = Eq;
  exports["eq"] = eq;
  exports["notEq"] = notEq;
  exports["eqBoolean"] = eqBoolean;
  exports["eqInt"] = eqInt;
  exports["eqChar"] = eqChar;
  exports["eqArray"] = eqArray;
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function(exports) {
    "use strict";

  exports.unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x === y ? eq : gt;
          };
        };
      };
    };
  };
})(PS["Data.Ord.Unsafe"] = PS["Data.Ord.Unsafe"] || {});
(function(exports) {
    "use strict";

  exports.concatString = function (s1) {
    return function (s2) {
      return s1 + s2;
    };
  };

  exports.concatArray = function (xs) {
    return function (ys) {
      if (xs.length === 0) return ys;
      if (ys.length === 0) return xs;
      return xs.concat(ys);
    };
  };
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Semigroup"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];
  var Record_Unsafe = PS["Record.Unsafe"];
  var Type_Data_RowList = PS["Type.Data.RowList"];                 
  var Semigroup = function (append) {
      this.append = append;
  }; 
  var semigroupString = new Semigroup($foreign.concatString);
  var semigroupArray = new Semigroup($foreign.concatArray);
  var append = function (dict) {
      return dict.append;
  };
  exports["Semigroup"] = Semigroup;
  exports["append"] = append;
  exports["semigroupString"] = semigroupString;
  exports["semigroupArray"] = semigroupArray;
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Eq = PS["Data.Eq"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];                 
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  var eqOrdering = new Data_Eq.Eq(function (v) {
      return function (v1) {
          if (v instanceof LT && v1 instanceof LT) {
              return true;
          };
          if (v instanceof GT && v1 instanceof GT) {
              return true;
          };
          if (v instanceof EQ && v1 instanceof EQ) {
              return true;
          };
          return false;
      };
  });
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
  exports["eqOrdering"] = eqOrdering;
})(PS["Data.Ordering"] = PS["Data.Ordering"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Ord.Unsafe"];
  var Data_Ordering = PS["Data.Ordering"];                 
  var unsafeCompare = $foreign.unsafeCompareImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value);
  exports["unsafeCompare"] = unsafeCompare;
})(PS["Data.Ord.Unsafe"] = PS["Data.Ord.Unsafe"] || {});
(function(exports) {
    "use strict";

  exports.intSub = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x - y | 0;
    };
  };
})(PS["Data.Ring"] = PS["Data.Ring"] || {});
(function(exports) {
    "use strict";

  exports.intAdd = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x + y | 0;
    };
  };

  exports.intMul = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x * y | 0;
    };
  };
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Semiring"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Unit = PS["Data.Unit"];
  var Record_Unsafe = PS["Record.Unsafe"];
  var Type_Data_Row = PS["Type.Data.Row"];
  var Type_Data_RowList = PS["Type.Data.RowList"];                 
  var Semiring = function (add, mul, one, zero) {
      this.add = add;
      this.mul = mul;
      this.one = one;
      this.zero = zero;
  };
  var zero = function (dict) {
      return dict.zero;
  };                                                                            
  var semiringInt = new Semiring($foreign.intAdd, $foreign.intMul, 1, 0);
  var one = function (dict) {
      return dict.one;
  };
  var mul = function (dict) {
      return dict.mul;
  };
  var add = function (dict) {
      return dict.add;
  };
  exports["Semiring"] = Semiring;
  exports["add"] = add;
  exports["zero"] = zero;
  exports["mul"] = mul;
  exports["one"] = one;
  exports["semiringInt"] = semiringInt;
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Unit = PS["Data.Unit"];
  var Record_Unsafe = PS["Record.Unsafe"];
  var Type_Data_RowList = PS["Type.Data.RowList"];                 
  var Ring = function (Semiring0, sub) {
      this.Semiring0 = Semiring0;
      this.sub = sub;
  };
  var sub = function (dict) {
      return dict.sub;
  };                  
  var ringInt = new Ring(function () {
      return Data_Semiring.semiringInt;
  }, $foreign.intSub);
  exports["Ring"] = Ring;
  exports["sub"] = sub;
  exports["ringInt"] = ringInt;
})(PS["Data.Ring"] = PS["Data.Ring"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Ord"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord_Unsafe = PS["Data.Ord.Unsafe"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];
  var Record_Unsafe = PS["Record.Unsafe"];
  var Type_Data_RowList = PS["Type.Data.RowList"];                 
  var Ord = function (Eq0, compare) {
      this.Eq0 = Eq0;
      this.compare = compare;
  };                                
  var ordInt = new Ord(function () {
      return Data_Eq.eqInt;
  }, Data_Ord_Unsafe.unsafeCompare);
  var ordChar = new Ord(function () {
      return Data_Eq.eqChar;
  }, Data_Ord_Unsafe.unsafeCompare);
  var compare = function (dict) {
      return dict.compare;
  };
  exports["Ord"] = Ord;
  exports["compare"] = compare;
  exports["ordInt"] = ordInt;
  exports["ordChar"] = ordChar;
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  var apply = function (f) {
      return function (x) {
          return f(x);
      };
  };
  exports["flip"] = flip;
  exports["const"] = $$const;
  exports["apply"] = apply;
})(PS["Data.Function"] = PS["Data.Function"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Functor"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Unit = PS["Data.Unit"];                 
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  var mapFlipped = function (dictFunctor) {
      return function (fa) {
          return function (f) {
              return map(dictFunctor)(f)(fa);
          };
      };
  };
  var $$void = function (dictFunctor) {
      return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
  };
  var functorFn = new Functor(Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn));
  var functorArray = new Functor($foreign.arrayMap);
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["mapFlipped"] = mapFlipped;
  exports["void"] = $$void;
  exports["functorFn"] = functorFn;
  exports["functorArray"] = functorArray;
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Functor = PS["Data.Functor"];
  var Data_Semigroup = PS["Data.Semigroup"];                 
  var Alt = function (Functor0, alt) {
      this.Functor0 = Functor0;
      this.alt = alt;
  };                                                       
  var alt = function (dict) {
      return dict.alt;
  };
  exports["Alt"] = Alt;
  exports["alt"] = alt;
})(PS["Control.Alt"] = PS["Control.Alt"] || {});
(function(exports) {
    "use strict";

  exports.arrayApply = function (fs) {
    return function (xs) {
      var l = fs.length;
      var k = xs.length;
      var result = new Array(l*k);
      var n = 0;
      for (var i = 0; i < l; i++) {
        var f = fs[i];
        for (var j = 0; j < k; j++) {
          result[n++] = f(xs[j]);
        }
      }
      return result;
    };
  };
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];                 
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  }; 
  var applyArray = new Apply(function () {
      return Data_Functor.functorArray;
  }, $foreign.arrayApply);
  var apply = function (dict) {
      return dict.apply;
  };
  var applySecond = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn)))(a))(b);
          };
      };
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
  exports["applySecond"] = applySecond;
  exports["applyArray"] = applyArray;
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];                 
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var unless = function (dictApplicative) {
      return function (v) {
          return function (v1) {
              if (!v) {
                  return v1;
              };
              if (v) {
                  return pure(dictApplicative)(Data_Unit.unit);
              };
              throw new Error("Failed pattern match at Control.Applicative line 62, column 1 - line 62, column 65: " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var when = function (dictApplicative) {
      return function (v) {
          return function (v1) {
              if (v) {
                  return v1;
              };
              if (!v) {
                  return pure(dictApplicative)(Data_Unit.unit);
              };
              throw new Error("Failed pattern match at Control.Applicative line 57, column 1 - line 57, column 63: " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  }; 
  var applicativeArray = new Applicative(function () {
      return Control_Apply.applyArray;
  }, function (x) {
      return [ x ];
  });
  exports["Applicative"] = Applicative;
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
  exports["unless"] = unless;
  exports["when"] = when;
  exports["applicativeArray"] = applicativeArray;
})(PS["Control.Applicative"] = PS["Control.Applicative"] || {});
(function(exports) {
    "use strict";

  exports.arrayBind = function (arr) {
    return function (f) {
      var result = [];
      for (var i = 0, l = arr.length; i < l; i++) {
        Array.prototype.push.apply(result, f(arr[i]));
      }
      return result;
    };
  };
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];                 
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  };
  var Discard = function (discard) {
      this.discard = discard;
  };
  var discard = function (dict) {
      return dict.discard;
  }; 
  var bindArray = new Bind(function () {
      return Control_Apply.applyArray;
  }, $foreign.arrayBind);
  var bind = function (dict) {
      return dict.bind;
  };
  var bindFlipped = function (dictBind) {
      return Data_Function.flip(bind(dictBind));
  };
  var composeKleisliFlipped = function (dictBind) {
      return function (f) {
          return function (g) {
              return function (a) {
                  return bindFlipped(dictBind)(f)(g(a));
              };
          };
      };
  };
  var discardUnit = new Discard(function (dictBind) {
      return bind(dictBind);
  });
  exports["Bind"] = Bind;
  exports["bind"] = bind;
  exports["bindFlipped"] = bindFlipped;
  exports["Discard"] = Discard;
  exports["discard"] = discard;
  exports["composeKleisliFlipped"] = composeKleisliFlipped;
  exports["bindArray"] = bindArray;
  exports["discardUnit"] = discardUnit;
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Control.Extend"];
  var Control_Category = PS["Control.Category"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Semigroup = PS["Data.Semigroup"];                 
  var Extend = function (Functor0, extend) {
      this.Functor0 = Functor0;
      this.extend = extend;
  };                       
  var extend = function (dict) {
      return dict.extend;
  };
  exports["Extend"] = Extend;
  exports["extend"] = extend;
})(PS["Control.Extend"] = PS["Control.Extend"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];                 
  var Monad = function (Applicative0, Bind1) {
      this.Applicative0 = Applicative0;
      this.Bind1 = Bind1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (v) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (v1) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(v(v1));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(PS["Control.Monad"] = PS["Control.Monad"] || {});
(function(exports) {
    "use strict";

  exports.topInt = 2147483647;
  exports.bottomInt = -2147483648;

  exports.topChar = String.fromCharCode(65535);
  exports.bottomChar = String.fromCharCode(0);
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Bounded"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Unit = PS["Data.Unit"];                 
  var Bounded = function (Ord0, bottom, top) {
      this.Ord0 = Ord0;
      this.bottom = bottom;
      this.top = top;
  };
  var top = function (dict) {
      return dict.top;
  };                                            
  var boundedInt = new Bounded(function () {
      return Data_Ord.ordInt;
  }, $foreign.bottomInt, $foreign.topInt);
  var boundedChar = new Bounded(function () {
      return Data_Ord.ordChar;
  }, $foreign.bottomChar, $foreign.topChar);
  var bottom = function (dict) {
      return dict.bottom;
  };
  exports["Bounded"] = Bounded;
  exports["bottom"] = bottom;
  exports["top"] = top;
  exports["boundedInt"] = boundedInt;
  exports["boundedChar"] = boundedChar;
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function(exports) {
    "use strict";

  exports.intDegree = function (x) {
    return Math.min(Math.abs(x), 2147483647);
  };

  // See the Euclidean definition in
  // https://en.m.wikipedia.org/wiki/Modulo_operation.
  exports.intDiv = function (x) {
    return function (y) {
      if (y === 0) return 0;
      return y > 0 ? Math.floor(x / y) : -Math.floor(x / -y);
    };
  };

  exports.intMod = function (x) {
    return function (y) {
      if (y === 0) return 0;
      var yy = Math.abs(y);
      return ((x % yy) + yy) % yy;
    };
  };
})(PS["Data.EuclideanRing"] = PS["Data.EuclideanRing"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Unit = PS["Data.Unit"];                 
  var CommutativeRing = function (Ring0) {
      this.Ring0 = Ring0;
  }; 
  var commutativeRingInt = new CommutativeRing(function () {
      return Data_Ring.ringInt;
  });
  exports["CommutativeRing"] = CommutativeRing;
  exports["commutativeRingInt"] = commutativeRingInt;
})(PS["Data.CommutativeRing"] = PS["Data.CommutativeRing"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.EuclideanRing"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Eq = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];                 
  var EuclideanRing = function (CommutativeRing0, degree, div, mod) {
      this.CommutativeRing0 = CommutativeRing0;
      this.degree = degree;
      this.div = div;
      this.mod = mod;
  };
  var mod = function (dict) {
      return dict.mod;
  }; 
  var euclideanRingInt = new EuclideanRing(function () {
      return Data_CommutativeRing.commutativeRingInt;
  }, $foreign.intDegree, $foreign.intDiv, $foreign.intMod);
  var div = function (dict) {
      return dict.div;
  };
  var degree = function (dict) {
      return dict.degree;
  };
  exports["EuclideanRing"] = EuclideanRing;
  exports["degree"] = degree;
  exports["div"] = div;
  exports["mod"] = mod;
  exports["euclideanRingInt"] = euclideanRingInt;
})(PS["Data.EuclideanRing"] = PS["Data.EuclideanRing"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Unit = PS["Data.Unit"];
  var Record_Unsafe = PS["Record.Unsafe"];
  var Type_Data_RowList = PS["Type.Data.RowList"];                 
  var Monoid = function (Semigroup0, mempty) {
      this.Semigroup0 = Semigroup0;
      this.mempty = mempty;
  };                 
  var monoidString = new Monoid(function () {
      return Data_Semigroup.semigroupString;
  }, "");                    
  var monoidArray = new Monoid(function () {
      return Data_Semigroup.semigroupArray;
  }, [  ]);
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["Monoid"] = Monoid;
  exports["mempty"] = mempty;
  exports["monoidString"] = monoidString;
  exports["monoidArray"] = monoidArray;
})(PS["Data.Monoid"] = PS["Data.Monoid"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];                 
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var semigroupMaybe = function (dictSemigroup) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              if (v instanceof Nothing) {
                  return v1;
              };
              if (v1 instanceof Nothing) {
                  return v;
              };
              if (v instanceof Just && v1 instanceof Just) {
                  return new Just(Data_Semigroup.append(dictSemigroup)(v.value0)(v1.value0));
              };
              throw new Error("Failed pattern match at Data.Maybe line 175, column 1 - line 175, column 62: " + [ v.constructor.name, v1.constructor.name ]);
          };
      });
  };
  var monoidMaybe = function (dictSemigroup) {
      return new Data_Monoid.Monoid(function () {
          return semigroupMaybe(dictSemigroup);
      }, Nothing.value);
  };
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe line 218, column 1 - line 218, column 51: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var isNothing = maybe(true)(Data_Function["const"](false));
  var isJust = maybe(false)(Data_Function["const"](true));
  var functorMaybe = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Just) {
              return new Just(v(v1.value0));
          };
          return Nothing.value;
      };
  });
  var fromMaybe = function (a) {
      return maybe(a)(Control_Category.identity(Control_Category.categoryFn));
  };
  var fromJust = function (dictPartial) {
      return function (v) {
          var $__unused = function (dictPartial1) {
              return function ($dollar35) {
                  return $dollar35;
              };
          };
          return $__unused(dictPartial)((function () {
              if (v instanceof Just) {
                  return v.value0;
              };
              throw new Error("Failed pattern match at Data.Maybe line 269, column 1 - line 269, column 46: " + [ v.constructor.name ]);
          })());
      };
  }; 
  var eqMaybe = function (dictEq) {
      return new Data_Eq.Eq(function (x) {
          return function (y) {
              if (x instanceof Nothing && y instanceof Nothing) {
                  return true;
              };
              if (x instanceof Just && y instanceof Just) {
                  return Data_Eq.eq(dictEq)(x.value0)(y.value0);
              };
              return false;
          };
      });
  };
  var applyMaybe = new Control_Apply.Apply(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return Data_Functor.map(functorMaybe)(v.value0)(v1);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe line 67, column 1 - line 67, column 35: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindMaybe = new Control_Bind.Bind(function () {
      return applyMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return v1(v.value0);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe line 126, column 1 - line 126, column 33: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var applicativeMaybe = new Control_Applicative.Applicative(function () {
      return applyMaybe;
  }, Just.create);
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["maybe"] = maybe;
  exports["fromMaybe"] = fromMaybe;
  exports["isJust"] = isJust;
  exports["isNothing"] = isNothing;
  exports["fromJust"] = fromJust;
  exports["functorMaybe"] = functorMaybe;
  exports["applyMaybe"] = applyMaybe;
  exports["applicativeMaybe"] = applicativeMaybe;
  exports["bindMaybe"] = bindMaybe;
  exports["semigroupMaybe"] = semigroupMaybe;
  exports["monoidMaybe"] = monoidMaybe;
  exports["eqMaybe"] = eqMaybe;
})(PS["Data.Maybe"] = PS["Data.Maybe"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Maybe = PS["Data.Maybe"];                 
  var Inl = (function () {
      function Inl(value0) {
          this.value0 = value0;
      };
      Inl.create = function (value0) {
          return new Inl(value0);
      };
      return Inl;
  })();
  var Inr = (function () {
      function Inr(value0) {
          this.value0 = value0;
      };
      Inr.create = function (value0) {
          return new Inr(value0);
      };
      return Inr;
  })();
  var Product = (function () {
      function Product(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Product.create = function (value0) {
          return function (value1) {
              return new Product(value0, value1);
          };
      };
      return Product;
  })();
  var NoArguments = (function () {
      function NoArguments() {

      };
      NoArguments.value = new NoArguments();
      return NoArguments;
  })();
  var Argument = function (x) {
      return x;
  };
  var Generic = function (from, to) {
      this.from = from;
      this.to = to;
  };
  var to = function (dict) {
      return dict.to;
  }; 
  var from = function (dict) {
      return dict.from;
  };
  exports["Generic"] = Generic;
  exports["to"] = to;
  exports["from"] = from;
  exports["NoArguments"] = NoArguments;
  exports["Inl"] = Inl;
  exports["Inr"] = Inr;
  exports["Product"] = Product;
  exports["Argument"] = Argument;
})(PS["Data.Generic.Rep"] = PS["Data.Generic.Rep"] || {});
(function(exports) {
    "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];                 
  var Conj = function (x) {
      return x;
  };
  var semigroupConj = function (dictHeytingAlgebra) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Data_HeytingAlgebra.conj(dictHeytingAlgebra)(v)(v1);
          };
      });
  };
  var monoidConj = function (dictHeytingAlgebra) {
      return new Data_Monoid.Monoid(function () {
          return semigroupConj(dictHeytingAlgebra);
      }, Data_HeytingAlgebra.tt(dictHeytingAlgebra));
  };
  exports["Conj"] = Conj;
  exports["semigroupConj"] = semigroupConj;
  exports["monoidConj"] = monoidConj;
})(PS["Data.Monoid.Conj"] = PS["Data.Monoid.Conj"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];                 
  var Disj = function (x) {
      return x;
  };
  var semigroupDisj = function (dictHeytingAlgebra) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Data_HeytingAlgebra.disj(dictHeytingAlgebra)(v)(v1);
          };
      });
  };
  var monoidDisj = function (dictHeytingAlgebra) {
      return new Data_Monoid.Monoid(function () {
          return semigroupDisj(dictHeytingAlgebra);
      }, Data_HeytingAlgebra.ff(dictHeytingAlgebra));
  };
  exports["Disj"] = Disj;
  exports["semigroupDisj"] = semigroupDisj;
  exports["monoidDisj"] = monoidDisj;
})(PS["Data.Monoid.Disj"] = PS["Data.Monoid.Disj"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];                 
  var Endo = function (x) {
      return x;
  };
  var semigroupEndo = function (dictSemigroupoid) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Control_Semigroupoid.compose(dictSemigroupoid)(v)(v1);
          };
      });
  };
  var monoidEndo = function (dictCategory) {
      return new Data_Monoid.Monoid(function () {
          return semigroupEndo(dictCategory.Semigroupoid0());
      }, Control_Category.identity(dictCategory));
  };
  exports["Endo"] = Endo;
  exports["semigroupEndo"] = semigroupEndo;
  exports["monoidEndo"] = monoidEndo;
})(PS["Data.Monoid.Endo"] = PS["Data.Monoid.Endo"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Semigroup_First = PS["Data.Semigroup.First"];
  var Data_Semigroup_Last = PS["Data.Semigroup.Last"];
  var Prelude = PS["Prelude"];                 
  var Newtype = function (unwrap, wrap) {
      this.unwrap = unwrap;
      this.wrap = wrap;
  };
  var wrap = function (dict) {
      return dict.wrap;
  };
  var unwrap = function (dict) {
      return dict.unwrap;
  };                             
  var newtypeEndo = new Newtype(function (v) {
      return v;
  }, Data_Monoid_Endo.Endo);
  var newtypeDisj = new Newtype(function (v) {
      return v;
  }, Data_Monoid_Disj.Disj);
  var newtypeConj = new Newtype(function (v) {
      return v;
  }, Data_Monoid_Conj.Conj);
  var alaF = function (dictFunctor) {
      return function (dictFunctor1) {
          return function (dictNewtype) {
              return function (dictNewtype1) {
                  return function (v) {
                      return function (f) {
                          return function ($80) {
                              return Data_Functor.map(dictFunctor1)(unwrap(dictNewtype1))(f(Data_Functor.map(dictFunctor)(wrap(dictNewtype))($80)));
                          };
                      };
                  };
              };
          };
      };
  };
  exports["unwrap"] = unwrap;
  exports["wrap"] = wrap;
  exports["Newtype"] = Newtype;
  exports["alaF"] = alaF;
  exports["newtypeConj"] = newtypeConj;
  exports["newtypeDisj"] = newtypeDisj;
  exports["newtypeEndo"] = newtypeEndo;
})(PS["Data.Newtype"] = PS["Data.Newtype"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Foldable"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];                 
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var traverse_ = function (dictApplicative) {
      return function (dictFoldable) {
          return function (f) {
              return foldr(dictFoldable)(function ($195) {
                  return Control_Apply.applySecond(dictApplicative.Apply0())(f($195));
              })(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
          };
      };
  };
  var for_ = function (dictApplicative) {
      return function (dictFoldable) {
          return Data_Function.flip(traverse_(dictApplicative)(dictFoldable));
      };
  };
  var foldl = function (dict) {
      return dict.foldl;
  };
  var intercalate = function (dictFoldable) {
      return function (dictMonoid) {
          return function (sep) {
              return function (xs) {
                  var go = function (v) {
                      return function (x) {
                          if (v.init) {
                              return {
                                  init: false,
                                  acc: x
                              };
                          };
                          return {
                              init: false,
                              acc: Data_Semigroup.append(dictMonoid.Semigroup0())(v.acc)(Data_Semigroup.append(dictMonoid.Semigroup0())(sep)(x))
                          };
                      };
                  };
                  return (foldl(dictFoldable)(go)({
                      init: true,
                      acc: Data_Monoid.mempty(dictMonoid)
                  })(xs)).acc;
              };
          };
      };
  }; 
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldr(dictFoldable)(function (x) {
                  return function (acc) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMapDefaultL = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldl(dictFoldable)(function (acc) {
                  return function (x) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(acc)(f(x));
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  var foldrDefault = function (dictFoldable) {
      return function (c) {
          return function (u) {
              return function (xs) {
                  return Data_Newtype.unwrap(Data_Newtype.newtypeEndo)(foldMap(dictFoldable)(Data_Monoid_Endo.monoidEndo(Control_Category.categoryFn))(function ($198) {
                      return Data_Monoid_Endo.Endo(c($198));
                  })(xs))(u);
              };
          };
      };
  };
  var fold = function (dictFoldable) {
      return function (dictMonoid) {
          return foldMap(dictFoldable)(dictMonoid)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var find = function (dictFoldable) {
      return function (p) {
          var go = function (v) {
              return function (v1) {
                  if (v instanceof Data_Maybe.Nothing && p(v1)) {
                      return new Data_Maybe.Just(v1);
                  };
                  return v;
              };
          };
          return foldl(dictFoldable)(go)(Data_Maybe.Nothing.value);
      };
  };
  var any = function (dictFoldable) {
      return function (dictHeytingAlgebra) {
          return Data_Newtype.alaF(Data_Functor.functorFn)(Data_Functor.functorFn)(Data_Newtype.newtypeDisj)(Data_Newtype.newtypeDisj)(Data_Monoid_Disj.Disj)(foldMap(dictFoldable)(Data_Monoid_Disj.monoidDisj(dictHeytingAlgebra)));
      };
  };
  var elem = function (dictFoldable) {
      return function (dictEq) {
          return function ($199) {
              return any(dictFoldable)(Data_HeytingAlgebra.heytingAlgebraBoolean)(Data_Eq.eq(dictEq)($199));
          };
      };
  };
  var all = function (dictFoldable) {
      return function (dictHeytingAlgebra) {
          return Data_Newtype.alaF(Data_Functor.functorFn)(Data_Functor.functorFn)(Data_Newtype.newtypeConj)(Data_Newtype.newtypeConj)(Data_Monoid_Conj.Conj)(foldMap(dictFoldable)(Data_Monoid_Conj.monoidConj(dictHeytingAlgebra)));
      };
  };
  exports["Foldable"] = Foldable;
  exports["foldr"] = foldr;
  exports["foldl"] = foldl;
  exports["foldMap"] = foldMap;
  exports["foldrDefault"] = foldrDefault;
  exports["foldMapDefaultL"] = foldMapDefaultL;
  exports["foldMapDefaultR"] = foldMapDefaultR;
  exports["fold"] = fold;
  exports["traverse_"] = traverse_;
  exports["for_"] = for_;
  exports["intercalate"] = intercalate;
  exports["all"] = all;
  exports["any"] = any;
  exports["elem"] = elem;
  exports["find"] = find;
  exports["foldableArray"] = foldableArray;
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Unit = PS["Data.Unit"];                 
  var Lazy = function (defer) {
      this.defer = defer;
  }; 
  var defer = function (dict) {
      return dict.defer;
  };
  var fix = function (dictLazy) {
      return function (f) {
          var go = defer(dictLazy)(function (v) {
              return f(go);
          });
          return go;
      };
  };
  exports["defer"] = defer;
  exports["Lazy"] = Lazy;
  exports["fix"] = fix;
})(PS["Control.Lazy"] = PS["Control.Lazy"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Category = PS["Control.Category"];                 
  var Bifunctor = function (bimap) {
      this.bimap = bimap;
  };
  var bimap = function (dict) {
      return dict.bimap;
  };
  var lmap = function (dictBifunctor) {
      return function (f) {
          return bimap(dictBifunctor)(f)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  exports["bimap"] = bimap;
  exports["Bifunctor"] = Bifunctor;
  exports["lmap"] = lmap;
})(PS["Data.Bifunctor"] = PS["Data.Bifunctor"] || {});
(function(exports) {
    "use strict";

  // jshint maxparams: 3

  exports.traverseArrayImpl = function () {
    function array1(a) {
      return [a];
    }

    function array2(a) {
      return function (b) {
        return [a, b];
      };
    }

    function array3(a) {
      return function (b) {
        return function (c) {
          return [a, b, c];
        };
      };
    }

    function concat2(xs) {
      return function (ys) {
        return xs.concat(ys);
      };
    }

    return function (apply) {
      return function (map) {
        return function (pure) {
          return function (f) {
            return function (array) {
              function go(bot, top) {
                switch (top - bot) {
                case 0: return pure([]);
                case 1: return map(array1)(f(array[bot]));
                case 2: return apply(map(array2)(f(array[bot])))(f(array[bot + 1]));
                case 3: return apply(apply(map(array3)(f(array[bot])))(f(array[bot + 1])))(f(array[bot + 2]));
                default:
                  // This slightly tricky pivot selection aims to produce two
                  // even-length partitions where possible.
                  var pivot = bot + Math.floor((top - bot) / 4) * 2;
                  return apply(map(concat2)(go(bot, pivot)))(go(pivot, top));
                }
              }
              return go(0, array.length);
            };
          };
        };
      };
    };
  }();
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Traversable"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Traversable_Accum = PS["Data.Traversable.Accum"];
  var Data_Traversable_Accum_Internal = PS["Data.Traversable.Accum.Internal"];
  var Prelude = PS["Prelude"];                 
  var Traversable = function (Foldable1, Functor0, sequence, traverse) {
      this.Foldable1 = Foldable1;
      this.Functor0 = Functor0;
      this.sequence = sequence;
      this.traverse = traverse;
  };
  var traverse = function (dict) {
      return dict.traverse;
  }; 
  var sequenceDefault = function (dictTraversable) {
      return function (dictApplicative) {
          return traverse(dictTraversable)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var traversableArray = new Traversable(function () {
      return Data_Foldable.foldableArray;
  }, function () {
      return Data_Functor.functorArray;
  }, function (dictApplicative) {
      return sequenceDefault(traversableArray)(dictApplicative);
  }, function (dictApplicative) {
      return $foreign.traverseArrayImpl(Control_Apply.apply(dictApplicative.Apply0()))(Data_Functor.map((dictApplicative.Apply0()).Functor0()))(Control_Applicative.pure(dictApplicative));
  });
  var sequence = function (dict) {
      return dict.sequence;
  };
  var $$for = function (dictApplicative) {
      return function (dictTraversable) {
          return function (x) {
              return function (f) {
                  return traverse(dictTraversable)(dictApplicative)(f)(x);
              };
          };
      };
  };
  exports["Traversable"] = Traversable;
  exports["traverse"] = traverse;
  exports["sequence"] = sequence;
  exports["sequenceDefault"] = sequenceDefault;
  exports["for"] = $$for;
  exports["traversableArray"] = traversableArray;
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_FoldableWithIndex = PS["Data.FoldableWithIndex"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_TraversableWithIndex = PS["Data.TraversableWithIndex"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];                 
  var Left = (function () {
      function Left(value0) {
          this.value0 = value0;
      };
      Left.create = function (value0) {
          return new Left(value0);
      };
      return Left;
  })();
  var Right = (function () {
      function Right(value0) {
          this.value0 = value0;
      };
      Right.create = function (value0) {
          return new Right(value0);
      };
      return Right;
  })();
  var functorEither = new Data_Functor.Functor(function (f) {
      return function (m) {
          if (m instanceof Left) {
              return new Left(m.value0);
          };
          if (m instanceof Right) {
              return new Right(f(m.value0));
          };
          throw new Error("Failed pattern match at Data.Either line 38, column 8 - line 38, column 52: " + [ m.constructor.name ]);
      };
  });
  var either = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return v(v2.value0);
              };
              if (v2 instanceof Right) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Either line 238, column 1 - line 238, column 64: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var bifunctorEither = new Data_Bifunctor.Bifunctor(function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return new Left(v(v2.value0));
              };
              if (v2 instanceof Right) {
                  return new Right(v1(v2.value0));
              };
              throw new Error("Failed pattern match at Data.Either line 46, column 1 - line 46, column 45: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  });
  var applyEither = new Control_Apply.Apply(function () {
      return functorEither;
  }, function (v) {
      return function (v1) {
          if (v instanceof Left) {
              return new Left(v.value0);
          };
          if (v instanceof Right) {
              return Data_Functor.map(functorEither)(v.value0)(v1);
          };
          throw new Error("Failed pattern match at Data.Either line 82, column 1 - line 82, column 41: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindEither = new Control_Bind.Bind(function () {
      return applyEither;
  }, either(function (e) {
      return function (v) {
          return new Left(e);
      };
  })(function (a) {
      return function (f) {
          return f(a);
      };
  }));
  var applicativeEither = new Control_Applicative.Applicative(function () {
      return applyEither;
  }, Right.create);
  var altEither = new Control_Alt.Alt(function () {
      return functorEither;
  }, function (v) {
      return function (v1) {
          if (v instanceof Left) {
              return v1;
          };
          return v;
      };
  });
  exports["Left"] = Left;
  exports["Right"] = Right;
  exports["either"] = either;
  exports["functorEither"] = functorEither;
  exports["bifunctorEither"] = bifunctorEither;
  exports["applyEither"] = applyEither;
  exports["applicativeEither"] = applicativeEither;
  exports["altEither"] = altEither;
  exports["bindEither"] = bindEither;
})(PS["Data.Either"] = PS["Data.Either"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad = PS["Control.Monad"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_FoldableWithIndex = PS["Data.FoldableWithIndex"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semigroup_Foldable = PS["Data.Semigroup.Foldable"];
  var Data_Semigroup_Traversable = PS["Data.Semigroup.Traversable"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_TraversableWithIndex = PS["Data.TraversableWithIndex"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];                 
  var Identity = function (x) {
      return x;
  };
  var newtypeIdentity = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Identity);
  var functorIdentity = new Data_Functor.Functor(function (f) {
      return function (m) {
          return f(m);
      };
  });
  var applyIdentity = new Control_Apply.Apply(function () {
      return functorIdentity;
  }, function (v) {
      return function (v1) {
          return v(v1);
      };
  });
  var bindIdentity = new Control_Bind.Bind(function () {
      return applyIdentity;
  }, function (v) {
      return function (f) {
          return f(v);
      };
  });
  var applicativeIdentity = new Control_Applicative.Applicative(function () {
      return applyIdentity;
  }, Identity);
  var monadIdentity = new Control_Monad.Monad(function () {
      return applicativeIdentity;
  }, function () {
      return bindIdentity;
  });
  exports["Identity"] = Identity;
  exports["newtypeIdentity"] = newtypeIdentity;
  exports["functorIdentity"] = functorIdentity;
  exports["applyIdentity"] = applyIdentity;
  exports["applicativeIdentity"] = applicativeIdentity;
  exports["bindIdentity"] = bindIdentity;
  exports["monadIdentity"] = monadIdentity;
})(PS["Data.Identity"] = PS["Data.Identity"] || {});
(function(exports) {
    "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Effect"] = PS["Effect"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Effect"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Prelude = PS["Prelude"];                 
  var monadEffect = new Control_Monad.Monad(function () {
      return applicativeEffect;
  }, function () {
      return bindEffect;
  });
  var bindEffect = new Control_Bind.Bind(function () {
      return applyEffect;
  }, $foreign.bindE);
  var applyEffect = new Control_Apply.Apply(function () {
      return functorEffect;
  }, Control_Monad.ap(monadEffect));
  var applicativeEffect = new Control_Applicative.Applicative(function () {
      return applyEffect;
  }, $foreign.pureE);
  var functorEffect = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEffect));
  exports["functorEffect"] = functorEffect;
  exports["applyEffect"] = applyEffect;
  exports["applicativeEffect"] = applicativeEffect;
  exports["bindEffect"] = bindEffect;
  exports["monadEffect"] = monadEffect;
})(PS["Effect"] = PS["Effect"] || {});
(function(exports) {
    "use strict";

  exports.new = function (val) {
    return function () {
      return { value: val };
    };
  };

  exports.read = function (ref) {
    return function () {
      return ref.value;
    };
  };

  exports["modify'"] = function (f) {
    return function (ref) {
      return function () {
        var t = f(ref.value);
        ref.value = t.state;
        return t.value;
      };
    };
  };

  exports.write = function (val) {
    return function (ref) {
      return function () {
        ref.value = val;
        return {};
      };
    };
  };
})(PS["Effect.Ref"] = PS["Effect.Ref"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Effect.Ref"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Effect = PS["Effect"];
  var Prelude = PS["Prelude"];                 
  var modify = function (f) {
      return $foreign["modify'"](function (s) {
          var s$prime = f(s);
          return {
              state: s$prime,
              value: s$prime
          };
      });
  };
  exports["modify"] = modify;
  exports["new"] = $foreign["new"];
  exports["read"] = $foreign.read;
  exports["write"] = $foreign.write;
})(PS["Effect.Ref"] = PS["Effect.Ref"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Either = PS["Data.Either"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Unit = PS["Data.Unit"];
  var Effect = PS["Effect"];
  var Effect_Ref = PS["Effect.Ref"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];                 
  var Loop = (function () {
      function Loop(value0) {
          this.value0 = value0;
      };
      Loop.create = function (value0) {
          return new Loop(value0);
      };
      return Loop;
  })();
  var Done = (function () {
      function Done(value0) {
          this.value0 = value0;
      };
      Done.create = function (value0) {
          return new Done(value0);
      };
      return Done;
  })();
  var MonadRec = function (Monad0, tailRecM) {
      this.Monad0 = Monad0;
      this.tailRecM = tailRecM;
  };
  var tailRecM = function (dict) {
      return dict.tailRecM;
  };
  var tailRec = function (f) {
      var go = function ($copy_v) {
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(v) {
              if (v instanceof Loop) {
                  $copy_v = f(v.value0);
                  return;
              };
              if (v instanceof Done) {
                  $tco_done = true;
                  return v.value0;
              };
              throw new Error("Failed pattern match at Control.Monad.Rec.Class line 91, column 3 - line 91, column 25: " + [ v.constructor.name ]);
          };
          while (!$tco_done) {
              $tco_result = $tco_loop($copy_v);
          };
          return $tco_result;
      };
      return function ($53) {
          return go(f($53));
      };
  }; 
  var monadRecIdentity = new MonadRec(function () {
      return Data_Identity.monadIdentity;
  }, function (f) {
      var runIdentity = function (v) {
          return v;
      };
      return function ($54) {
          return Data_Identity.Identity(tailRec(function ($55) {
              return runIdentity(f($55));
          })($54));
      };
  });
  exports["Loop"] = Loop;
  exports["Done"] = Done;
  exports["MonadRec"] = MonadRec;
  exports["tailRec"] = tailRec;
  exports["tailRecM"] = tailRecM;
  exports["monadRecIdentity"] = monadRecIdentity;
})(PS["Control.Monad.Rec.Class"] = PS["Control.Monad.Rec.Class"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Distributive = PS["Data.Distributive"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_FoldableWithIndex = PS["Data.FoldableWithIndex"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semigroup_Foldable = PS["Data.Semigroup.Foldable"];
  var Data_Semigroup_Traversable = PS["Data.Semigroup.Traversable"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_TraversableWithIndex = PS["Data.TraversableWithIndex"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  var Type_Equality = PS["Type.Equality"];                 
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  var uncurry = function (f) {
      return function (v) {
          return f(v.value0)(v.value1);
      };
  };
  var snd = function (v) {
      return v.value1;
  };
  var showTuple = function (dictShow) {
      return function (dictShow1) {
          return new Data_Show.Show(function (v) {
              return "(Tuple " + (Data_Show.show(dictShow)(v.value0) + (" " + (Data_Show.show(dictShow1)(v.value1) + ")")));
          });
      };
  };
  var functorTuple = new Data_Functor.Functor(function (f) {
      return function (m) {
          return new Tuple(m.value0, f(m.value1));
      };
  });                                                                                                   
  var fst = function (v) {
      return v.value0;
  };
  exports["Tuple"] = Tuple;
  exports["fst"] = fst;
  exports["snd"] = snd;
  exports["uncurry"] = uncurry;
  exports["showTuple"] = showTuple;
  exports["functorTuple"] = functorTuple;
})(PS["Data.Tuple"] = PS["Data.Tuple"] || {});
(function(exports) {
    "use strict";

  exports.unfoldrArrayImpl = function (isNothing) {
    return function (fromJust) {
      return function (fst) {
        return function (snd) {
          return function (f) {
            return function (b) {
              var result = [];
              var value = b;
              while (true) { // eslint-disable-line no-constant-condition
                var maybe = f(value);
                if (isNothing(maybe)) return result;
                var tuple = fromJust(maybe);
                result.push(fst(tuple));
                value = snd(tuple);
              }
            };
          };
        };
      };
    };
  };
})(PS["Data.Unfoldable"] = PS["Data.Unfoldable"] || {});
(function(exports) {
    "use strict";

  exports.unfoldr1ArrayImpl = function (isNothing) {
    return function (fromJust) {
      return function (fst) {
        return function (snd) {
          return function (f) {
            return function (b) {
              var result = [];
              var value = b;
              while (true) { // eslint-disable-line no-constant-condition
                var tuple = f(value);
                result.push(fst(tuple));
                var maybe = snd(tuple);
                if (isNothing(maybe)) return result;
                value = fromJust(maybe);
              }
            };
          };
        };
      };
    };
  };
})(PS["Data.Unfoldable1"] = PS["Data.Unfoldable1"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Unfoldable1"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup_Traversable = PS["Data.Semigroup.Traversable"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Tuple = PS["Data.Tuple"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];                 
  var Unfoldable1 = function (unfoldr1) {
      this.unfoldr1 = unfoldr1;
  };
  var unfoldr1 = function (dict) {
      return dict.unfoldr1;
  };
  var unfoldable1Array = new Unfoldable1($foreign.unfoldr1ArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd));
  exports["Unfoldable1"] = Unfoldable1;
  exports["unfoldr1"] = unfoldr1;
  exports["unfoldable1Array"] = unfoldable1Array;
})(PS["Data.Unfoldable1"] = PS["Data.Unfoldable1"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Unfoldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable1 = PS["Data.Unfoldable1"];
  var Data_Unit = PS["Data.Unit"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];                 
  var Unfoldable = function (Unfoldable10, unfoldr) {
      this.Unfoldable10 = Unfoldable10;
      this.unfoldr = unfoldr;
  };
  var unfoldr = function (dict) {
      return dict.unfoldr;
  };
  var unfoldableArray = new Unfoldable(function () {
      return Data_Unfoldable1.unfoldable1Array;
  }, $foreign.unfoldrArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd));
  exports["Unfoldable"] = Unfoldable;
  exports["unfoldr"] = unfoldr;
  exports["unfoldableArray"] = unfoldableArray;
})(PS["Data.Unfoldable"] = PS["Data.Unfoldable"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_FoldableWithIndex = PS["Data.FoldableWithIndex"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semigroup_Foldable = PS["Data.Semigroup.Foldable"];
  var Data_Semigroup_Traversable = PS["Data.Semigroup.Traversable"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_TraversableWithIndex = PS["Data.TraversableWithIndex"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Unfoldable1 = PS["Data.Unfoldable1"];
  var Prelude = PS["Prelude"];                 
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldl(foldableList)(function (acc) {
              return function ($174) {
                  return Data_Semigroup.append(dictMonoid.Semigroup0())(acc)(f($174));
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  }, function (f) {
      var go = function ($copy_b) {
          return function ($copy_v) {
              var $tco_var_b = $copy_b;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(b, v) {
                  if (v instanceof Nil) {
                      $tco_done = true;
                      return b;
                  };
                  if (v instanceof Cons) {
                      $tco_var_b = f(b)(v.value0);
                      $copy_v = v.value1;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List.Types line 81, column 12 - line 83, column 30: " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_b, $copy_v);
              };
              return $tco_result;
          };
      };
      return go;
  }, function (f) {
      return function (b) {
          var rev = Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value);
          return function ($175) {
              return Data_Foldable.foldl(foldableList)(Data_Function.flip(f))(b)(rev($175));
          };
      };
  });
  var functorList = new Data_Functor.Functor(function (f) {
      return Data_Foldable.foldr(foldableList)(function (x) {
          return function (acc) {
              return new Cons(f(x), acc);
          };
      })(Nil.value);
  });
  var semigroupList = new Data_Semigroup.Semigroup(function (xs) {
      return function (ys) {
          return Data_Foldable.foldr(foldableList)(Cons.create)(ys)(xs);
      };
  });
  var showList = function (dictShow) {
      return new Data_Show.Show(function (v) {
          if (v instanceof Nil) {
              return "Nil";
          };
          return "(" + (Data_Foldable.intercalate(foldableList)(Data_Monoid.monoidString)(" : ")(Data_Functor.map(functorList)(Data_Show.show(dictShow))(v)) + " : Nil)");
      });
  }; 
  var unfoldable1List = new Data_Unfoldable1.Unfoldable1(function (f) {
      return function (b) {
          var go = function ($copy_source) {
              return function ($copy_memo) {
                  var $tco_var_source = $copy_source;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(source, memo) {
                      var v = f(source);
                      if (v.value1 instanceof Data_Maybe.Just) {
                          $tco_var_source = v.value1.value0;
                          $copy_memo = new Cons(v.value0, memo);
                          return;
                      };
                      if (v.value1 instanceof Data_Maybe.Nothing) {
                          $tco_done = true;
                          return Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value)(new Cons(v.value0, memo));
                      };
                      throw new Error("Failed pattern match at Data.List.Types line 105, column 22 - line 107, column 61: " + [ v.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_source, $copy_memo);
                  };
                  return $tco_result;
              };
          };
          return go(b)(Nil.value);
      };
  });
  var unfoldableList = new Data_Unfoldable.Unfoldable(function () {
      return unfoldable1List;
  }, function (f) {
      return function (b) {
          var go = function ($copy_source) {
              return function ($copy_memo) {
                  var $tco_var_source = $copy_source;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(source, memo) {
                      var v = f(source);
                      if (v instanceof Data_Maybe.Nothing) {
                          $tco_done = true;
                          return Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value)(memo);
                      };
                      if (v instanceof Data_Maybe.Just) {
                          $tco_var_source = v.value0.value1;
                          $copy_memo = new Cons(v.value0.value0, memo);
                          return;
                      };
                      throw new Error("Failed pattern match at Data.List.Types line 112, column 22 - line 114, column 52: " + [ v.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_source, $copy_memo);
                  };
                  return $tco_result;
              };
          };
          return go(b)(Nil.value);
      };
  });
  var applyList = new Control_Apply.Apply(function () {
      return functorList;
  }, function (v) {
      return function (v1) {
          if (v instanceof Nil) {
              return Nil.value;
          };
          if (v instanceof Cons) {
              return Data_Semigroup.append(semigroupList)(Data_Functor.map(functorList)(v.value0)(v1))(Control_Apply.apply(applyList)(v.value1)(v1));
          };
          throw new Error("Failed pattern match at Data.List.Types line 127, column 1 - line 127, column 33: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var applicativeList = new Control_Applicative.Applicative(function () {
      return applyList;
  }, function (a) {
      return new Cons(a, Nil.value);
  });
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["showList"] = showList;
  exports["semigroupList"] = semigroupList;
  exports["functorList"] = functorList;
  exports["foldableList"] = foldableList;
  exports["unfoldable1List"] = unfoldable1List;
  exports["unfoldableList"] = unfoldableList;
  exports["applyList"] = applyList;
  exports["applicativeList"] = applicativeList;
})(PS["Data.List.Types"] = PS["Data.List.Types"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];                                                   
  var uncons = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Data_List_Types.Cons) {
          return new Data_Maybe.Just({
              head: v.value0,
              tail: v.value1
          });
      };
      throw new Error("Failed pattern match at Data.List line 259, column 1 - line 259, column 66: " + [ v.constructor.name ]);
  };
  var toUnfoldable = function (dictUnfoldable) {
      return Data_Unfoldable.unfoldr(dictUnfoldable)(function (xs) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(function (rec) {
              return new Data_Tuple.Tuple(rec.head, rec.tail);
          })(uncons(xs));
      });
  };
  var tail = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Data_List_Types.Cons) {
          return new Data_Maybe.Just(v.value1);
      };
      throw new Error("Failed pattern match at Data.List line 245, column 1 - line 245, column 43: " + [ v.constructor.name ]);
  };
  var reverse = (function () {
      var go = function ($copy_acc) {
          return function ($copy_v) {
              var $tco_var_acc = $copy_acc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(acc, v) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return acc;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      $tco_var_acc = new Data_List_Types.Cons(v.value0, acc);
                      $copy_v = v.value1;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List line 368, column 3 - line 368, column 19: " + [ acc.constructor.name, v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_acc, $copy_v);
              };
              return $tco_result;
          };
      };
      return go(Data_List_Types.Nil.value);
  })();
  var length = Data_Foldable.foldl(Data_List_Types.foldableList)(function (acc) {
      return function (v) {
          return acc + 1 | 0;
      };
  })(0);
  var head = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Data_List_Types.Cons) {
          return new Data_Maybe.Just(v.value0);
      };
      throw new Error("Failed pattern match at Data.List line 230, column 1 - line 230, column 22: " + [ v.constructor.name ]);
  };
  var filter = function (p) {
      var go = function ($copy_acc) {
          return function ($copy_v) {
              var $tco_var_acc = $copy_acc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(acc, v) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return reverse(acc);
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      if (p(v.value0)) {
                          $tco_var_acc = new Data_List_Types.Cons(v.value0, acc);
                          $copy_v = v.value1;
                          return;
                      };
                      if (Data_Boolean.otherwise) {
                          $tco_var_acc = acc;
                          $copy_v = v.value1;
                          return;
                      };
                  };
                  throw new Error("Failed pattern match at Data.List line 390, column 3 - line 390, column 27: " + [ acc.constructor.name, v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_acc, $copy_v);
              };
              return $tco_result;
          };
      };
      return go(Data_List_Types.Nil.value);
  };
  exports["toUnfoldable"] = toUnfoldable;
  exports["length"] = length;
  exports["head"] = head;
  exports["tail"] = tail;
  exports["uncons"] = uncons;
  exports["reverse"] = reverse;
  exports["filter"] = filter;
})(PS["Data.List"] = PS["Data.List"] || {});
(function(exports) {
    "use strict";

  exports.defer = function (thunk) {
    var v = null;
    return function() {
      if (thunk === undefined) return v;

      v = thunk();
      thunk = undefined; // eslint-disable-line no-param-reassign
      return v;
    };
  };

  exports.force = function (l) {
    return l();
  };
})(PS["Data.Lazy"] = PS["Data.Lazy"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Lazy"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_FoldableWithIndex = PS["Data.FoldableWithIndex"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semigroup_Foldable = PS["Data.Semigroup.Foldable"];
  var Data_Semigroup_Traversable = PS["Data.Semigroup.Traversable"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_TraversableWithIndex = PS["Data.TraversableWithIndex"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  var functorLazy = new Data_Functor.Functor(function (f) {
      return function (l) {
          return $foreign.defer(function (v) {
              return f($foreign.force(l));
          });
      };
  });
  var applyLazy = new Control_Apply.Apply(function () {
      return functorLazy;
  }, function (f) {
      return function (x) {
          return $foreign.defer(function (v) {
              return $foreign.force(f)($foreign.force(x));
          });
      };
  });
  exports["functorLazy"] = functorLazy;
  exports["applyLazy"] = applyLazy;
  exports["defer"] = $foreign.defer;
  exports["force"] = $foreign.force;
})(PS["Data.Lazy"] = PS["Data.Lazy"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad = PS["Control.Monad"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_FoldableWithIndex = PS["Data.FoldableWithIndex"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_Lazy = PS["Data.Lazy"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_TraversableWithIndex = PS["Data.TraversableWithIndex"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Unfoldable1 = PS["Data.Unfoldable1"];
  var Prelude = PS["Prelude"];                 
  var List = function (x) {
      return x;
  };
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var nil = List(Data_Lazy.defer(function (v) {
      return Nil.value;
  }));             
  var newtypeList = new Data_Newtype.Newtype(function (n) {
      return n;
  }, List);
  var step = function ($215) {
      return Data_Lazy.force(Data_Newtype.unwrap(newtypeList)($215));
  };      
  var lazyList = new Control_Lazy.Lazy(function (f) {
      return List(Data_Lazy.defer(function ($216) {
          return step(f($216));
      }));
  });
  var functorList = new Data_Functor.Functor(function (f) {
      return function (xs) {
          var go = function (v) {
              if (v instanceof Nil) {
                  return Nil.value;
              };
              if (v instanceof Cons) {
                  return new Cons(f(v.value0), Data_Functor.map(functorList)(f)(v.value1));
              };
              throw new Error("Failed pattern match at Data.List.Lazy.Types line 107, column 5 - line 107, column 17: " + [ v.constructor.name ]);
          };
          return Data_Functor.map(Data_Lazy.functorLazy)(go)(Data_Newtype.unwrap(newtypeList)(xs));
      };
  });
  var cons = function (x) {
      return function (xs) {
          return List(Data_Lazy.defer(function (v) {
              return new Cons(x, xs);
          }));
      };
  };
  var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldl(foldableList)(function (b) {
              return function (a) {
                  return Data_Semigroup.append(dictMonoid.Semigroup0())(b)(f(a));
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  }, function (op) {
      var go = function ($copy_b) {
          return function ($copy_xs) {
              var $tco_var_b = $copy_b;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(b, xs) {
                  var v = step(xs);
                  if (v instanceof Nil) {
                      $tco_done = true;
                      return b;
                  };
                  if (v instanceof Cons) {
                      $tco_var_b = op(b)(v.value0);
                      $copy_xs = v.value1;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy.Types line 122, column 7 - line 124, column 40: " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_b, $copy_xs);
              };
              return $tco_result;
          };
      };
      return go;
  }, function (op) {
      return function (z) {
          return function (xs) {
              var rev = Data_Foldable.foldl(foldableList)(Data_Function.flip(cons))(nil);
              return Data_Foldable.foldl(foldableList)(Data_Function.flip(op))(z)(rev(xs));
          };
      };
  });
  var traversableList = new Data_Traversable.Traversable(function () {
      return foldableList;
  }, function () {
      return functorList;
  }, function (dictApplicative) {
      return Data_Traversable.traverse(traversableList)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
  }, function (dictApplicative) {
      return function (f) {
          return Data_Foldable.foldr(foldableList)(function (a) {
              return function (b) {
                  return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(cons)(f(a)))(b);
              };
          })(Control_Applicative.pure(dictApplicative)(nil));
      };
  });
  exports["List"] = List;
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["step"] = step;
  exports["nil"] = nil;
  exports["cons"] = cons;
  exports["newtypeList"] = newtypeList;
  exports["lazyList"] = lazyList;
  exports["functorList"] = functorList;
  exports["foldableList"] = foldableList;
  exports["traversableList"] = traversableList;
})(PS["Data.List.Lazy.Types"] = PS["Data.List.Lazy.Types"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Lazy = PS["Data.Lazy"];
  var Data_List_Lazy_Types = PS["Data.List.Lazy.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Prelude = PS["Prelude"];
  var zipWith = function (f) {
      return function (xs) {
          return function (ys) {
              var go = function (v) {
                  return function (v1) {
                      if (v instanceof Data_List_Lazy_Types.Nil) {
                          return Data_List_Lazy_Types.Nil.value;
                      };
                      if (v1 instanceof Data_List_Lazy_Types.Nil) {
                          return Data_List_Lazy_Types.Nil.value;
                      };
                      if (v instanceof Data_List_Lazy_Types.Cons && v1 instanceof Data_List_Lazy_Types.Cons) {
                          return new Data_List_Lazy_Types.Cons(f(v.value0)(v1.value0), zipWith(f)(v.value1)(v1.value1));
                      };
                      throw new Error("Failed pattern match at Data.List.Lazy line 692, column 3 - line 692, column 35: " + [ v.constructor.name, v1.constructor.name ]);
                  };
              };
              return Control_Apply.apply(Data_Lazy.applyLazy)(Data_Functor.map(Data_Lazy.functorLazy)(go)(Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList)(xs)))(Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList)(ys));
          };
      };
  };                                                                           
  var uncons = function (xs) {
      var v = Data_List_Lazy_Types.step(xs);
      if (v instanceof Data_List_Lazy_Types.Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Data_List_Lazy_Types.Cons) {
          return new Data_Maybe.Just({
              head: v.value0,
              tail: v.value1
          });
      };
      throw new Error("Failed pattern match at Data.List.Lazy line 284, column 13 - line 286, column 44: " + [ v.constructor.name ]);
  };
  var toUnfoldable = function (dictUnfoldable) {
      return Data_Unfoldable.unfoldr(dictUnfoldable)(function (xs) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(function (rec) {
              return new Data_Tuple.Tuple(rec.head, rec.tail);
          })(uncons(xs));
      });
  };
  var tail = function (xs) {
      return Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
          return v.tail;
      })(uncons(xs));
  };
  var repeat = function (x) {
      return Control_Lazy.fix(Data_List_Lazy_Types.lazyList)(function (xs) {
          return Data_List_Lazy_Types.cons(x)(xs);
      });
  };
  var head = function (xs) {
      return Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
          return v.head;
      })(uncons(xs));
  };
  var fromFoldable = function (dictFoldable) {
      return Data_Foldable.foldr(dictFoldable)(Data_List_Lazy_Types.cons)(Data_List_Lazy_Types.nil);
  };
  exports["toUnfoldable"] = toUnfoldable;
  exports["fromFoldable"] = fromFoldable;
  exports["repeat"] = repeat;
  exports["head"] = head;
  exports["tail"] = tail;
  exports["uncons"] = uncons;
  exports["zipWith"] = zipWith;
})(PS["Data.List.Lazy"] = PS["Data.List.Lazy"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_FoldableWithIndex = PS["Data.FoldableWithIndex"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_List = PS["Data.List"];
  var Data_List_Lazy = PS["Data.List.Lazy"];
  var Data_List_Lazy_Types = PS["Data.List.Lazy.Types"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_TraversableWithIndex = PS["Data.TraversableWithIndex"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];                 
  var Leaf = (function () {
      function Leaf() {

      };
      Leaf.value = new Leaf();
      return Leaf;
  })();
  var Two = (function () {
      function Two(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Two.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Two(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Two;
  })();
  var Three = (function () {
      function Three(value0, value1, value2, value3, value4, value5, value6) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
          this.value6 = value6;
      };
      Three.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return function (value6) {
                                  return new Three(value0, value1, value2, value3, value4, value5, value6);
                              };
                          };
                      };
                  };
              };
          };
      };
      return Three;
  })();
  var TwoLeft = (function () {
      function TwoLeft(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoLeft(value0, value1, value2);
              };
          };
      };
      return TwoLeft;
  })();
  var TwoRight = (function () {
      function TwoRight(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoRight(value0, value1, value2);
              };
          };
      };
      return TwoRight;
  })();
  var ThreeLeft = (function () {
      function ThreeLeft(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeLeft(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeLeft;
  })();
  var ThreeMiddle = (function () {
      function ThreeMiddle(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeMiddle.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeMiddle(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeMiddle;
  })();
  var ThreeRight = (function () {
      function ThreeRight(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeRight(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeRight;
  })();
  var KickUp = (function () {
      function KickUp(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      KickUp.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new KickUp(value0, value1, value2, value3);
                  };
              };
          };
      };
      return KickUp;
  })();
  var values = function (v) {
      if (v instanceof Leaf) {
          return Data_List_Types.Nil.value;
      };
      if (v instanceof Two) {
          return Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value2))(values(v.value3)));
      };
      if (v instanceof Three) {
          return Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value2))(Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value3))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value5))(values(v.value6)))));
      };
      throw new Error("Failed pattern match at Data.Map.Internal line 602, column 1 - line 602, column 40: " + [ v.constructor.name ]);
  };
  var singleton = function (k) {
      return function (v) {
          return new Two(Leaf.value, k, v, Leaf.value);
      };
  };
  var toUnfoldable = function (dictUnfoldable) {
      return function (m) {
          var go = function ($copy_v) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      if (v.value0 instanceof Leaf) {
                          $copy_v = v.value1;
                          return;
                      };
                      if (v.value0 instanceof Two && (v.value0.value0 instanceof Leaf && v.value0.value3 instanceof Leaf)) {
                          $tco_done = true;
                          return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value1, v.value0.value2), v.value1));
                      };
                      if (v.value0 instanceof Two && v.value0.value0 instanceof Leaf) {
                          $tco_done = true;
                          return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value1, v.value0.value2), new Data_List_Types.Cons(v.value0.value3, v.value1)));
                      };
                      if (v.value0 instanceof Two) {
                          $copy_v = new Data_List_Types.Cons(v.value0.value0, new Data_List_Types.Cons(singleton(v.value0.value1)(v.value0.value2), new Data_List_Types.Cons(v.value0.value3, v.value1)));
                          return;
                      };
                      if (v.value0 instanceof Three) {
                          $copy_v = new Data_List_Types.Cons(v.value0.value0, new Data_List_Types.Cons(singleton(v.value0.value1)(v.value0.value2), new Data_List_Types.Cons(v.value0.value3, new Data_List_Types.Cons(singleton(v.value0.value4)(v.value0.value5), new Data_List_Types.Cons(v.value0.value6, v.value1)))));
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal line 567, column 18 - line 576, column 71: " + [ v.value0.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal line 566, column 3 - line 566, column 19: " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_v);
              };
              return $tco_result;
          };
          return Data_Unfoldable.unfoldr(dictUnfoldable)(go)(new Data_List_Types.Cons(m, Data_List_Types.Nil.value));
      };
  };
  var lookup = function (dictOrd) {
      return function (k) {
          var comp = Data_Ord.compare(dictOrd);
          var go = function ($copy_v) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v) {
                  if (v instanceof Leaf) {
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  if (v instanceof Two) {
                      var v2 = comp(k)(v.value1);
                      if (v2 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value2);
                      };
                      if (v2 instanceof Data_Ordering.LT) {
                          $copy_v = v.value0;
                          return;
                      };
                      $copy_v = v.value3;
                      return;
                  };
                  if (v instanceof Three) {
                      var v3 = comp(k)(v.value1);
                      if (v3 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value2);
                      };
                      var v4 = comp(k)(v.value4);
                      if (v4 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value5);
                      };
                      if (v3 instanceof Data_Ordering.LT) {
                          $copy_v = v.value0;
                          return;
                      };
                      if (v4 instanceof Data_Ordering.GT) {
                          $copy_v = v.value6;
                          return;
                      };
                      $copy_v = v.value3;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal line 197, column 5 - line 197, column 22: " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_v);
              };
              return $tco_result;
          };
          return go;
      };
  };
  var keys = function (v) {
      if (v instanceof Leaf) {
          return Data_List_Types.Nil.value;
      };
      if (v instanceof Two) {
          return Data_Semigroup.append(Data_List_Types.semigroupList)(keys(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value1))(keys(v.value3)));
      };
      if (v instanceof Three) {
          return Data_Semigroup.append(Data_List_Types.semigroupList)(keys(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value1))(Data_Semigroup.append(Data_List_Types.semigroupList)(keys(v.value3))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value4))(keys(v.value6)))));
      };
      throw new Error("Failed pattern match at Data.Map.Internal line 596, column 1 - line 596, column 38: " + [ v.constructor.name ]);
  };
  var isEmpty = function (v) {
      if (v instanceof Leaf) {
          return true;
      };
      return false;
  };
  var functorMap = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Leaf) {
              return Leaf.value;
          };
          if (v1 instanceof Two) {
              return new Two(Data_Functor.map(functorMap)(v)(v1.value0), v1.value1, v(v1.value2), Data_Functor.map(functorMap)(v)(v1.value3));
          };
          if (v1 instanceof Three) {
              return new Three(Data_Functor.map(functorMap)(v)(v1.value0), v1.value1, v(v1.value2), Data_Functor.map(functorMap)(v)(v1.value3), v1.value4, v(v1.value5), Data_Functor.map(functorMap)(v)(v1.value6));
          };
          throw new Error("Failed pattern match at Data.Map.Internal line 93, column 1 - line 93, column 39: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var fromZipper = function ($copy_dictOrd) {
      return function ($copy_v) {
          return function ($copy_tree) {
              var $tco_var_dictOrd = $copy_dictOrd;
              var $tco_var_v = $copy_v;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(dictOrd, v, tree) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return tree;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      if (v.value0 instanceof TwoLeft) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Two(tree, v.value0.value0, v.value0.value1, v.value0.value2);
                          return;
                      };
                      if (v.value0 instanceof TwoRight) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Two(v.value0.value0, v.value0.value1, v.value0.value2, tree);
                          return;
                      };
                      if (v.value0 instanceof ThreeLeft) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(tree, v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5);
                          return;
                      };
                      if (v.value0 instanceof ThreeMiddle) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, tree, v.value0.value3, v.value0.value4, v.value0.value5);
                          return;
                      };
                      if (v.value0 instanceof ThreeRight) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5, tree);
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal line 415, column 3 - line 420, column 88: " + [ v.value0.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal line 412, column 1 - line 412, column 80: " + [ v.constructor.name, tree.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_dictOrd, $tco_var_v, $copy_tree);
              };
              return $tco_result;
          };
      };
  };
  var insert = function (dictOrd) {
      return function (k) {
          return function (v) {
              var up = function ($copy_v1) {
                  return function ($copy_v2) {
                      var $tco_var_v1 = $copy_v1;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(v1, v2) {
                          if (v1 instanceof Data_List_Types.Nil) {
                              $tco_done = true;
                              return new Two(v2.value0, v2.value1, v2.value2, v2.value3);
                          };
                          if (v1 instanceof Data_List_Types.Cons) {
                              if (v1.value0 instanceof TwoLeft) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(v1.value1)(new Three(v2.value0, v2.value1, v2.value2, v2.value3, v1.value0.value0, v1.value0.value1, v1.value0.value2));
                              };
                              if (v1.value0 instanceof TwoRight) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(v1.value1)(new Three(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0, v2.value1, v2.value2, v2.value3));
                              };
                              if (v1.value0 instanceof ThreeLeft) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v2.value0, v2.value1, v2.value2, v2.value3), v1.value0.value0, v1.value0.value1, new Two(v1.value0.value2, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                                  return;
                              };
                              if (v1.value0 instanceof ThreeMiddle) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0), v2.value1, v2.value2, new Two(v2.value3, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                                  return;
                              };
                              if (v1.value0 instanceof ThreeRight) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v1.value0.value3), v1.value0.value4, v1.value0.value5, new Two(v2.value0, v2.value1, v2.value2, v2.value3));
                                  return;
                              };
                              throw new Error("Failed pattern match at Data.Map.Internal line 451, column 5 - line 456, column 108: " + [ v1.value0.constructor.name, v2.constructor.name ]);
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal line 448, column 3 - line 448, column 56: " + [ v1.constructor.name, v2.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_v1, $copy_v2);
                      };
                      return $tco_result;
                  };
              };
              var comp = Data_Ord.compare(dictOrd);
              var down = function ($copy_ctx) {
                  return function ($copy_v1) {
                      var $tco_var_ctx = $copy_ctx;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(ctx, v1) {
                          if (v1 instanceof Leaf) {
                              $tco_done = true;
                              return up(ctx)(new KickUp(Leaf.value, k, v, Leaf.value));
                          };
                          if (v1 instanceof Two) {
                              var v2 = comp(k)(v1.value1);
                              if (v2 instanceof Data_Ordering.EQ) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(ctx)(new Two(v1.value0, k, v, v1.value3));
                              };
                              if (v2 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new TwoLeft(v1.value1, v1.value2, v1.value3), ctx);
                                  $copy_v1 = v1.value0;
                                  return;
                              };
                              $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(v1.value0, v1.value1, v1.value2), ctx);
                              $copy_v1 = v1.value3;
                              return;
                          };
                          if (v1 instanceof Three) {
                              var v3 = comp(k)(v1.value1);
                              if (v3 instanceof Data_Ordering.EQ) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(ctx)(new Three(v1.value0, k, v, v1.value3, v1.value4, v1.value5, v1.value6));
                              };
                              var v4 = comp(k)(v1.value4);
                              if (v4 instanceof Data_Ordering.EQ) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(ctx)(new Three(v1.value0, v1.value1, v1.value2, v1.value3, k, v, v1.value6));
                              };
                              if (v3 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new ThreeLeft(v1.value1, v1.value2, v1.value3, v1.value4, v1.value5, v1.value6), ctx);
                                  $copy_v1 = v1.value0;
                                  return;
                              };
                              if (v3 instanceof Data_Ordering.GT && v4 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new ThreeMiddle(v1.value0, v1.value1, v1.value2, v1.value4, v1.value5, v1.value6), ctx);
                                  $copy_v1 = v1.value3;
                                  return;
                              };
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(v1.value0, v1.value1, v1.value2, v1.value3, v1.value4, v1.value5), ctx);
                              $copy_v1 = v1.value6;
                              return;
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal line 431, column 3 - line 431, column 55: " + [ ctx.constructor.name, v1.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_ctx, $copy_v1);
                      };
                      return $tco_result;
                  };
              };
              return down(Data_List_Types.Nil.value);
          };
      };
  };
  var pop = function (dictOrd) {
      return function (k) {
          var up = function (ctxs) {
              return function (tree) {
                  if (ctxs instanceof Data_List_Types.Nil) {
                      return tree;
                  };
                  if (ctxs instanceof Data_List_Types.Cons) {
                      var $__unused = function (dictPartial1) {
                          return function ($dollar55) {
                              return $dollar55;
                          };
                      };
                      return $__unused()((function () {
                          if (ctxs.value0 instanceof TwoLeft && (ctxs.value0.value2 instanceof Leaf && tree instanceof Leaf)) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(Leaf.value, ctxs.value0.value0, ctxs.value0.value1, Leaf.value));
                          };
                          if (ctxs.value0 instanceof TwoRight && (ctxs.value0.value0 instanceof Leaf && tree instanceof Leaf)) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value));
                          };
                          if (ctxs.value0 instanceof TwoLeft && ctxs.value0.value2 instanceof Two) {
                              return up(ctxs.value1)(new Three(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0, ctxs.value0.value2.value1, ctxs.value0.value2.value2, ctxs.value0.value2.value3));
                          };
                          if (ctxs.value0 instanceof TwoRight && ctxs.value0.value0 instanceof Two) {
                              return up(ctxs.value1)(new Three(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3, ctxs.value0.value1, ctxs.value0.value2, tree));
                          };
                          if (ctxs.value0 instanceof TwoLeft && ctxs.value0.value2 instanceof Three) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Two(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0), ctxs.value0.value2.value1, ctxs.value0.value2.value2, new Two(ctxs.value0.value2.value3, ctxs.value0.value2.value4, ctxs.value0.value2.value5, ctxs.value0.value2.value6)));
                          };
                          if (ctxs.value0 instanceof TwoRight && ctxs.value0.value0 instanceof Three) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Two(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3), ctxs.value0.value0.value4, ctxs.value0.value0.value5, new Two(ctxs.value0.value0.value6, ctxs.value0.value1, ctxs.value0.value2, tree)));
                          };
                          if (ctxs.value0 instanceof ThreeLeft && (ctxs.value0.value2 instanceof Leaf && (ctxs.value0.value5 instanceof Leaf && tree instanceof Leaf))) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value0, ctxs.value0.value1, Leaf.value, ctxs.value0.value3, ctxs.value0.value4, Leaf.value));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && (ctxs.value0.value0 instanceof Leaf && (ctxs.value0.value5 instanceof Leaf && tree instanceof Leaf))) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value, ctxs.value0.value3, ctxs.value0.value4, Leaf.value));
                          };
                          if (ctxs.value0 instanceof ThreeRight && (ctxs.value0.value0 instanceof Leaf && (ctxs.value0.value3 instanceof Leaf && tree instanceof Leaf))) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value, ctxs.value0.value4, ctxs.value0.value5, Leaf.value));
                          };
                          if (ctxs.value0 instanceof ThreeLeft && ctxs.value0.value2 instanceof Two) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Three(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0, ctxs.value0.value2.value1, ctxs.value0.value2.value2, ctxs.value0.value2.value3), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value0 instanceof Two) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Three(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3, ctxs.value0.value1, ctxs.value0.value2, tree), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value5 instanceof Two) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Three(tree, ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5.value0, ctxs.value0.value5.value1, ctxs.value0.value5.value2, ctxs.value0.value5.value3)));
                          };
                          if (ctxs.value0 instanceof ThreeRight && ctxs.value0.value3 instanceof Two) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Three(ctxs.value0.value3.value0, ctxs.value0.value3.value1, ctxs.value0.value3.value2, ctxs.value0.value3.value3, ctxs.value0.value4, ctxs.value0.value5, tree)));
                          };
                          if (ctxs.value0 instanceof ThreeLeft && ctxs.value0.value2 instanceof Three) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(new Two(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0), ctxs.value0.value2.value1, ctxs.value0.value2.value2, new Two(ctxs.value0.value2.value3, ctxs.value0.value2.value4, ctxs.value0.value2.value5, ctxs.value0.value2.value6), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value0 instanceof Three) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(new Two(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3), ctxs.value0.value0.value4, ctxs.value0.value0.value5, new Two(ctxs.value0.value0.value6, ctxs.value0.value1, ctxs.value0.value2, tree), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value5 instanceof Three) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Two(tree, ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5.value0), ctxs.value0.value5.value1, ctxs.value0.value5.value2, new Two(ctxs.value0.value5.value3, ctxs.value0.value5.value4, ctxs.value0.value5.value5, ctxs.value0.value5.value6)));
                          };
                          if (ctxs.value0 instanceof ThreeRight && ctxs.value0.value3 instanceof Three) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Two(ctxs.value0.value3.value0, ctxs.value0.value3.value1, ctxs.value0.value3.value2, ctxs.value0.value3.value3), ctxs.value0.value3.value4, ctxs.value0.value3.value5, new Two(ctxs.value0.value3.value6, ctxs.value0.value4, ctxs.value0.value5, tree)));
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal line 501, column 9 - line 518, column 136: " + [ ctxs.value0.constructor.name, tree.constructor.name ]);
                      })());
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal line 498, column 5 - line 518, column 136: " + [ ctxs.constructor.name ]);
              };
          };
          var removeMaxNode = function (ctx) {
              return function (m) {
                  var $__unused = function (dictPartial1) {
                      return function ($dollar57) {
                          return $dollar57;
                      };
                  };
                  return $__unused()((function () {
                      if (m instanceof Two && (m.value0 instanceof Leaf && m.value3 instanceof Leaf)) {
                          return up(ctx)(Leaf.value);
                      };
                      if (m instanceof Two) {
                          return removeMaxNode(new Data_List_Types.Cons(new TwoRight(m.value0, m.value1, m.value2), ctx))(m.value3);
                      };
                      if (m instanceof Three && (m.value0 instanceof Leaf && (m.value3 instanceof Leaf && m.value6 instanceof Leaf))) {
                          return up(new Data_List_Types.Cons(new TwoRight(Leaf.value, m.value1, m.value2), ctx))(Leaf.value);
                      };
                      if (m instanceof Three) {
                          return removeMaxNode(new Data_List_Types.Cons(new ThreeRight(m.value0, m.value1, m.value2, m.value3, m.value4, m.value5), ctx))(m.value6);
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal line 530, column 5 - line 534, column 107: " + [ m.constructor.name ]);
                  })());
              };
          };
          var maxNode = function (m) {
              var $__unused = function (dictPartial1) {
                  return function ($dollar59) {
                      return $dollar59;
                  };
              };
              return $__unused()((function () {
                  if (m instanceof Two && m.value3 instanceof Leaf) {
                      return {
                          key: m.value1,
                          value: m.value2
                      };
                  };
                  if (m instanceof Two) {
                      return maxNode(m.value3);
                  };
                  if (m instanceof Three && m.value6 instanceof Leaf) {
                      return {
                          key: m.value4,
                          value: m.value5
                      };
                  };
                  if (m instanceof Three) {
                      return maxNode(m.value6);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal line 521, column 33 - line 525, column 45: " + [ m.constructor.name ]);
              })());
          };
          var comp = Data_Ord.compare(dictOrd);
          var down = function ($copy_ctx) {
              return function ($copy_m) {
                  var $tco_var_ctx = $copy_ctx;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(ctx, m) {
                      if (m instanceof Leaf) {
                          $tco_done = true;
                          return Data_Maybe.Nothing.value;
                      };
                      if (m instanceof Two) {
                          var v = comp(k)(m.value1);
                          if (m.value3 instanceof Leaf && v instanceof Data_Ordering.EQ) {
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, up(ctx)(Leaf.value)));
                          };
                          if (v instanceof Data_Ordering.EQ) {
                              var max = maxNode(m.value0);
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, removeMaxNode(new Data_List_Types.Cons(new TwoLeft(max.key, max.value, m.value3), ctx))(m.value0)));
                          };
                          if (v instanceof Data_Ordering.LT) {
                              $tco_var_ctx = new Data_List_Types.Cons(new TwoLeft(m.value1, m.value2, m.value3), ctx);
                              $copy_m = m.value0;
                              return;
                          };
                          $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(m.value0, m.value1, m.value2), ctx);
                          $copy_m = m.value3;
                          return;
                      };
                      if (m instanceof Three) {
                          var leaves = (function () {
                              if (m.value0 instanceof Leaf && (m.value3 instanceof Leaf && m.value6 instanceof Leaf)) {
                                  return true;
                              };
                              return false;
                          })();
                          var v = comp(k)(m.value4);
                          var v3 = comp(k)(m.value1);
                          if (leaves && v3 instanceof Data_Ordering.EQ) {
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, fromZipper(dictOrd)(ctx)(new Two(Leaf.value, m.value4, m.value5, Leaf.value))));
                          };
                          if (leaves && v instanceof Data_Ordering.EQ) {
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value5, fromZipper(dictOrd)(ctx)(new Two(Leaf.value, m.value1, m.value2, Leaf.value))));
                          };
                          if (v3 instanceof Data_Ordering.EQ) {
                              var max = maxNode(m.value0);
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, removeMaxNode(new Data_List_Types.Cons(new ThreeLeft(max.key, max.value, m.value3, m.value4, m.value5, m.value6), ctx))(m.value0)));
                          };
                          if (v instanceof Data_Ordering.EQ) {
                              var max = maxNode(m.value3);
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value5, removeMaxNode(new Data_List_Types.Cons(new ThreeMiddle(m.value0, m.value1, m.value2, max.key, max.value, m.value6), ctx))(m.value3)));
                          };
                          if (v3 instanceof Data_Ordering.LT) {
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeLeft(m.value1, m.value2, m.value3, m.value4, m.value5, m.value6), ctx);
                              $copy_m = m.value0;
                              return;
                          };
                          if (v3 instanceof Data_Ordering.GT && v instanceof Data_Ordering.LT) {
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeMiddle(m.value0, m.value1, m.value2, m.value4, m.value5, m.value6), ctx);
                              $copy_m = m.value3;
                              return;
                          };
                          $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(m.value0, m.value1, m.value2, m.value3, m.value4, m.value5), ctx);
                          $copy_m = m.value6;
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal line 471, column 34 - line 494, column 80: " + [ m.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_ctx, $copy_m);
                  };
                  return $tco_result;
              };
          };
          return down(Data_List_Types.Nil.value);
      };
  };
  var empty = Leaf.value;
  var fromFoldable = function (dictOrd) {
      return function (dictFoldable) {
          return Data_Foldable.foldl(dictFoldable)(function (m) {
              return function (v) {
                  return insert(dictOrd)(v.value0)(v.value1)(m);
              };
          })(empty);
      };
  };
  var $$delete = function (dictOrd) {
      return function (k) {
          return function (m) {
              return Data_Maybe.maybe(m)(Data_Tuple.snd)(pop(dictOrd)(k)(m));
          };
      };
  }; 
  var alter = function (dictOrd) {
      return function (f) {
          return function (k) {
              return function (m) {
                  var v = f(lookup(dictOrd)(k)(m));
                  if (v instanceof Data_Maybe.Nothing) {
                      return $$delete(dictOrd)(k)(m);
                  };
                  if (v instanceof Data_Maybe.Just) {
                      return insert(dictOrd)(k)(v.value0)(m);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal line 539, column 15 - line 541, column 25: " + [ v.constructor.name ]);
              };
          };
      };
  };
  var unionWith = function (dictOrd) {
      return function (f) {
          return function (m1) {
              return function (m2) {
                  var go = function (m) {
                      return function (v) {
                          return alter(dictOrd)(function ($744) {
                              return Data_Maybe.Just.create(Data_Maybe.maybe(v.value1)(f(v.value1))($744));
                          })(v.value0)(m);
                      };
                  };
                  return Data_Foldable.foldl(Data_List_Types.foldableList)(go)(m2)(toUnfoldable(Data_List_Types.unfoldableList)(m1));
              };
          };
      };
  };
  exports["empty"] = empty;
  exports["isEmpty"] = isEmpty;
  exports["singleton"] = singleton;
  exports["insert"] = insert;
  exports["lookup"] = lookup;
  exports["fromFoldable"] = fromFoldable;
  exports["toUnfoldable"] = toUnfoldable;
  exports["delete"] = $$delete;
  exports["pop"] = pop;
  exports["alter"] = alter;
  exports["keys"] = keys;
  exports["values"] = values;
  exports["unionWith"] = unionWith;
  exports["functorMap"] = functorMap;
})(PS["Data.Map.Internal"] = PS["Data.Map.Internal"] || {});
(function(exports) {
    "use strict";

  exports.map_ = function (f) {
    return function (a) {
      return function () {
        return f(a());
      };
    };
  };

  exports.pure_ = function (a) {
    return function () {
      return a;
    };
  };

  exports.bind_ = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Control.Monad.ST.Internal"] = PS["Control.Monad.ST.Internal"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Control.Monad.ST.Internal"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var functorST = new Data_Functor.Functor($foreign.map_);
  var monadST = new Control_Monad.Monad(function () {
      return applicativeST;
  }, function () {
      return bindST;
  });
  var bindST = new Control_Bind.Bind(function () {
      return applyST;
  }, $foreign.bind_);
  var applyST = new Control_Apply.Apply(function () {
      return functorST;
  }, Control_Monad.ap(monadST));
  var applicativeST = new Control_Applicative.Applicative(function () {
      return applyST;
  }, $foreign.pure_);
  exports["functorST"] = functorST;
  exports["applyST"] = applyST;
  exports["applicativeST"] = applicativeST;
  exports["bindST"] = bindST;
  exports["monadST"] = monadST;
})(PS["Control.Monad.ST.Internal"] = PS["Control.Monad.ST.Internal"] || {});
(function(exports) {
    "use strict";

  //------------------------------------------------------------------------------
  // Array creation --------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.range = function (start) {
    return function (end) {
      var step = start > end ? -1 : 1;
      var result = new Array(step * (end - start) + 1);
      var i = start, n = 0;
      while (i !== end) {
        result[n++] = i;
        i += step;
      }
      result[n] = i;
      return result;
    };
  };

  var replicate = function (count) {
    return function (value) {
      if (count < 1) {
        return [];
      }
      var result = new Array(count);
      return result.fill(value);
    };
  };

  // In browsers that have Array.prototype.fill we use it, as it's faster.
  exports.replicate = typeof Array.prototype.fill === "function" ? replicate : replicatePolyfill;

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  //------------------------------------------------------------------------------
  // Non-indexed reads -----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports["uncons'"] = function (empty) {
    return function (next) {
      return function (xs) {
        return xs.length === 0 ? empty({}) : next(xs[0])(xs.slice(1));
      };
    };
  };

  //------------------------------------------------------------------------------
  // Indexed operations ----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.indexImpl = function (just) {
    return function (nothing) {
      return function (xs) {
        return function (i) {
          return i < 0 || i >= xs.length ? nothing :  just(xs[i]);
        };
      };
    };
  };

  exports.findIndexImpl = function (just) {
    return function (nothing) {
      return function (f) {
        return function (xs) {
          for (var i = 0, l = xs.length; i < l; i++) {
            if (f(xs[i])) return just(i);
          }
          return nothing;
        };
      };
    };
  };

  exports._deleteAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (l) {
          if (i < 0 || i >= l.length) return nothing;
          var l1 = l.slice();
          l1.splice(i, 1);
          return just(l1);
        };
      };
    };
  };

  //------------------------------------------------------------------------------
  // Transformations -------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.reverse = function (l) {
    return l.slice().reverse();
  };

  exports.concat = function (xss) {
    if (xss.length <= 10000) {
      // This method is faster, but it crashes on big arrays.
      // So we use it when can and fallback to simple variant otherwise.
      return Array.prototype.concat.apply([], xss);
    }

    var result = [];
    for (var i = 0, l = xss.length; i < l; i++) {
      var xs = xss[i];
      for (var j = 0, m = xs.length; j < m; j++) {
        result.push(xs[j]);
      }
    }
    return result;
  };

  exports.filter = function (f) {
    return function (xs) {
      return xs.filter(f);
    };
  };

  //------------------------------------------------------------------------------
  // Subarrays -------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.slice = function (s) {
    return function (e) {
      return function (l) {
        return l.slice(s, e);
      };
    };
  };

  //------------------------------------------------------------------------------
  // Zipping ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.zipWith = function (f) {
    return function (xs) {
      return function (ys) {
        var l = xs.length < ys.length ? xs.length : ys.length;
        var result = new Array(l);
        for (var i = 0; i < l; i++) {
          result[i] = f(xs[i])(ys[i]);
        }
        return result;
      };
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
    "use strict";

  // module Unsafe.Coerce

  exports.unsafeCoerce = function (x) {
    return x;
  };
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Unsafe.Coerce"];
  exports["unsafeCoerce"] = $foreign.unsafeCoerce;
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Array"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Control_Monad_ST_Internal = PS["Control.Monad.ST.Internal"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array_NonEmpty_Internal = PS["Data.Array.NonEmpty.Internal"];
  var Data_Array_ST = PS["Data.Array.ST"];
  var Data_Array_ST_Iterator = PS["Data.Array.ST.Iterator"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var zip = $foreign.zipWith(Data_Tuple.Tuple.create);
  var uncons = $foreign["uncons'"](Data_Function["const"](Data_Maybe.Nothing.value))(function (x) {
      return function (xs) {
          return new Data_Maybe.Just({
              head: x,
              tail: xs
          });
      };
  });
  var singleton = function (a) {
      return [ a ];
  };
  var $$null = function (xs) {
      return $foreign.length(xs) === 0;
  };
  var index = $foreign.indexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var head = function (xs) {
      return index(xs)(0);
  };
  var findIndex = $foreign.findIndexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var deleteAt = $foreign._deleteAt(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var deleteBy = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2.length === 0) {
                  return [  ];
              };
              return Data_Maybe.maybe(v2)(function (i) {
                  return Data_Maybe.fromJust()(deleteAt(i)(v2));
              })(findIndex(v(v1))(v2));
          };
      };
  };
  var $$delete = function (dictEq) {
      return deleteBy(Data_Eq.eq(dictEq));
  };
  var difference = function (dictEq) {
      return Data_Foldable.foldr(Data_Foldable.foldableArray)($$delete(dictEq));
  };
  exports["singleton"] = singleton;
  exports["null"] = $$null;
  exports["head"] = head;
  exports["uncons"] = uncons;
  exports["index"] = index;
  exports["findIndex"] = findIndex;
  exports["deleteAt"] = deleteAt;
  exports["deleteBy"] = deleteBy;
  exports["difference"] = difference;
  exports["zip"] = zip;
  exports["range"] = $foreign.range;
  exports["replicate"] = $foreign.replicate;
  exports["length"] = $foreign.length;
  exports["reverse"] = $foreign.reverse;
  exports["concat"] = $foreign.concat;
  exports["filter"] = $foreign.filter;
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Control_Monad_ST_Internal = PS["Control.Monad.ST.Internal"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array = PS["Data.Array"];
  var Data_Array_ST = PS["Data.Array.ST"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Map_Internal = PS["Data.Map.Internal"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Unit = PS["Data.Unit"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var toList = function (v) {
      return Data_Map_Internal.keys(v);
  };
  var foldableSet = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return function ($65) {
              return Data_Foldable.foldMap(Data_List_Types.foldableList)(dictMonoid)(f)(toList($65));
          };
      };
  }, function (f) {
      return function (x) {
          return function ($66) {
              return Data_Foldable.foldl(Data_List_Types.foldableList)(f)(x)(toList($66));
          };
      };
  }, function (f) {
      return function (x) {
          return function ($67) {
              return Data_Foldable.foldr(Data_List_Types.foldableList)(f)(x)(toList($67));
          };
      };
  });
  exports["foldableSet"] = foldableSet;
})(PS["Data.Set"] = PS["Data.Set"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Map_Internal = PS["Data.Map.Internal"];
  var Data_Set = PS["Data.Set"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];                 
  var keys = function ($0) {
      return Data_Functor["void"](Data_Map_Internal.functorMap)($0);
  };
  exports["keys"] = keys;
})(PS["Data.Map"] = PS["Data.Map"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];                 
  var MonadState = function (Monad0, state) {
      this.Monad0 = Monad0;
      this.state = state;
  };
  var state = function (dict) {
      return dict.state;
  };
  var put = function (dictMonadState) {
      return function (s) {
          return state(dictMonadState)(function (v) {
              return new Data_Tuple.Tuple(Data_Unit.unit, s);
          });
      };
  };
  var modify = function (dictMonadState) {
      return function (f) {
          return state(dictMonadState)(function (s) {
              var s$prime = f(s);
              return new Data_Tuple.Tuple(s$prime, s$prime);
          });
      };
  };
  var gets = function (dictMonadState) {
      return function (f) {
          return state(dictMonadState)(function (s) {
              return new Data_Tuple.Tuple(f(s), s);
          });
      };
  };
  var get = function (dictMonadState) {
      return state(dictMonadState)(function (s) {
          return new Data_Tuple.Tuple(s, s);
      });
  };
  exports["state"] = state;
  exports["MonadState"] = MonadState;
  exports["get"] = get;
  exports["gets"] = gets;
  exports["put"] = put;
  exports["modify"] = modify;
})(PS["Control.Monad.State.Class"] = PS["Control.Monad.State.Class"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Functor = PS["Data.Functor"];
  var Prelude = PS["Prelude"];                 
  var MonadAsk = function (Monad0, ask) {
      this.Monad0 = Monad0;
      this.ask = ask;
  };
  var MonadReader = function (MonadAsk0, local) {
      this.MonadAsk0 = MonadAsk0;
      this.local = local;
  };                                                                           
  var local = function (dict) {
      return dict.local;
  };
  var ask = function (dict) {
      return dict.ask;
  };
  exports["ask"] = ask;
  exports["local"] = local;
  exports["MonadAsk"] = MonadAsk;
  exports["MonadReader"] = MonadReader;
})(PS["Control.Monad.Reader.Class"] = PS["Control.Monad.Reader.Class"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Prelude = PS["Prelude"];                 
  var MonadTrans = function (lift) {
      this.lift = lift;
  };
  var lift = function (dict) {
      return dict.lift;
  };
  exports["lift"] = lift;
  exports["MonadTrans"] = MonadTrans;
})(PS["Control.Monad.Trans.Class"] = PS["Control.Monad.Trans.Class"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Function = PS["Data.Function"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];                 
  var MonadTell = function (Monad0, tell) {
      this.Monad0 = Monad0;
      this.tell = tell;
  };
  var MonadWriter = function (MonadTell0, listen, pass) {
      this.MonadTell0 = MonadTell0;
      this.listen = listen;
      this.pass = pass;
  };
  var tell = function (dict) {
      return dict.tell;
  };
  var pass = function (dict) {
      return dict.pass;
  };
  var listen = function (dict) {
      return dict.listen;
  };
  exports["listen"] = listen;
  exports["pass"] = pass;
  exports["tell"] = tell;
  exports["MonadTell"] = MonadTell;
  exports["MonadWriter"] = MonadWriter;
})(PS["Control.Monad.Writer.Class"] = PS["Control.Monad.Writer.Class"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Cont_Class = PS["Control.Monad.Cont.Class"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Effect_Class = PS["Effect.Class"];
  var Prelude = PS["Prelude"];                 
  var StateT = function (x) {
      return x;
  }; 
  var functorStateT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return function (v) {
              return function (s) {
                  return Data_Functor.map(dictFunctor)(function (v1) {
                      return new Data_Tuple.Tuple(f(v1.value0), v1.value1);
                  })(v(s));
              };
          };
      });
  };
  var monadStateT = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeStateT(dictMonad);
      }, function () {
          return bindStateT(dictMonad);
      });
  };
  var bindStateT = function (dictMonad) {
      return new Control_Bind.Bind(function () {
          return applyStateT(dictMonad);
      }, function (v) {
          return function (f) {
              return function (s) {
                  return Control_Bind.bind(dictMonad.Bind1())(v(s))(function (v1) {
                      var v3 = f(v1.value0);
                      return v3(v1.value1);
                  });
              };
          };
      });
  };
  var applyStateT = function (dictMonad) {
      return new Control_Apply.Apply(function () {
          return functorStateT(((dictMonad.Bind1()).Apply0()).Functor0());
      }, Control_Monad.ap(monadStateT(dictMonad)));
  };
  var applicativeStateT = function (dictMonad) {
      return new Control_Applicative.Applicative(function () {
          return applyStateT(dictMonad);
      }, function (a) {
          return function (s) {
              return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(a, s));
          };
      });
  };
  var monadRecStateT = function (dictMonadRec) {
      return new Control_Monad_Rec_Class.MonadRec(function () {
          return monadStateT(dictMonadRec.Monad0());
      }, function (f) {
          return function (a) {
              var f$prime = function (v) {
                  return Control_Bind.bind((dictMonadRec.Monad0()).Bind1())((function () {
                      var v1 = f(v.value0);
                      return v1;
                  })()(v.value1))(function (v1) {
                      return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())((function () {
                          if (v1.value0 instanceof Control_Monad_Rec_Class.Loop) {
                              return new Control_Monad_Rec_Class.Loop(new Data_Tuple.Tuple(v1.value0.value0, v1.value1));
                          };
                          if (v1.value0 instanceof Control_Monad_Rec_Class.Done) {
                              return new Control_Monad_Rec_Class.Done(new Data_Tuple.Tuple(v1.value0.value0, v1.value1));
                          };
                          throw new Error("Failed pattern match at Control.Monad.State.Trans line 87, column 16 - line 89, column 40: " + [ v1.value0.constructor.name ]);
                      })());
                  });
              };
              return function (s) {
                  return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(f$prime)(new Data_Tuple.Tuple(a, s));
              };
          };
      });
  };
  var monadStateStateT = function (dictMonad) {
      return new Control_Monad_State_Class.MonadState(function () {
          return monadStateT(dictMonad);
      }, function (f) {
          return StateT(function ($111) {
              return Control_Applicative.pure(dictMonad.Applicative0())(f($111));
          });
      });
  };
  exports["StateT"] = StateT;
  exports["functorStateT"] = functorStateT;
  exports["applyStateT"] = applyStateT;
  exports["applicativeStateT"] = applicativeStateT;
  exports["bindStateT"] = bindStateT;
  exports["monadStateT"] = monadStateT;
  exports["monadRecStateT"] = monadRecStateT;
  exports["monadStateStateT"] = monadStateStateT;
})(PS["Control.Monad.State.Trans"] = PS["Control.Monad.State.Trans"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_State_Trans = PS["Control.Monad.State.Trans"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];                         
  var runState = function (v) {
      return function ($16) {
          return Data_Newtype.unwrap(Data_Identity.newtypeIdentity)(v($16));
      };
  };
  var execState = function (v) {
      return function (s) {
          var v1 = v(s);
          return v1.value1;
      };
  };
  var evalState = function (v) {
      return function (s) {
          var v1 = v(s);
          return v1.value0;
      };
  };
  exports["runState"] = runState;
  exports["evalState"] = evalState;
  exports["execState"] = execState;
})(PS["Control.Monad.State"] = PS["Control.Monad.State"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Cont_Class = PS["Control.Monad.Cont.Class"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Effect_Class = PS["Effect.Class"];
  var Prelude = PS["Prelude"];                 
  var WriterT = function (x) {
      return x;
  };
  var runWriterT = function (v) {
      return v;
  };          
  var monadTransWriterT = function (dictMonoid) {
      return new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
          return function (m) {
              return Control_Bind.bind(dictMonad.Bind1())(m)(function (v) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(v, Data_Monoid.mempty(dictMonoid)));
              });
          };
      });
  };
  var mapWriterT = function (f) {
      return function (v) {
          return f(v);
      };
  };
  var functorWriterT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return mapWriterT(Data_Functor.map(dictFunctor)(function (v) {
              return new Data_Tuple.Tuple(f(v.value0), v.value1);
          }));
      });
  };
  var applyWriterT = function (dictSemigroup) {
      return function (dictApply) {
          return new Control_Apply.Apply(function () {
              return functorWriterT(dictApply.Functor0());
          }, function (v) {
              return function (v1) {
                  var k = function (v3) {
                      return function (v4) {
                          return new Data_Tuple.Tuple(v3.value0(v4.value0), Data_Semigroup.append(dictSemigroup)(v3.value1)(v4.value1));
                      };
                  };
                  return Control_Apply.apply(dictApply)(Data_Functor.map(dictApply.Functor0())(k)(v))(v1);
              };
          });
      };
  };
  var bindWriterT = function (dictSemigroup) {
      return function (dictBind) {
          return new Control_Bind.Bind(function () {
              return applyWriterT(dictSemigroup)(dictBind.Apply0());
          }, function (v) {
              return function (k) {
                  return WriterT(Control_Bind.bind(dictBind)(v)(function (v1) {
                      var v2 = k(v1.value0);
                      return Data_Functor.map((dictBind.Apply0()).Functor0())(function (v3) {
                          return new Data_Tuple.Tuple(v3.value0, Data_Semigroup.append(dictSemigroup)(v1.value1)(v3.value1));
                      })(v2);
                  }));
              };
          });
      };
  };
  var applicativeWriterT = function (dictMonoid) {
      return function (dictApplicative) {
          return new Control_Applicative.Applicative(function () {
              return applyWriterT(dictMonoid.Semigroup0())(dictApplicative.Apply0());
          }, function (a) {
              return WriterT(Control_Applicative.pure(dictApplicative)(new Data_Tuple.Tuple(a, Data_Monoid.mempty(dictMonoid))));
          });
      };
  };
  var monadWriterT = function (dictMonoid) {
      return function (dictMonad) {
          return new Control_Monad.Monad(function () {
              return applicativeWriterT(dictMonoid)(dictMonad.Applicative0());
          }, function () {
              return bindWriterT(dictMonoid.Semigroup0())(dictMonad.Bind1());
          });
      };
  };
  var monadStateWriterT = function (dictMonoid) {
      return function (dictMonadState) {
          return new Control_Monad_State_Class.MonadState(function () {
              return monadWriterT(dictMonoid)(dictMonadState.Monad0());
          }, function (f) {
              return Control_Monad_Trans_Class.lift(monadTransWriterT(dictMonoid))(dictMonadState.Monad0())(Control_Monad_State_Class.state(dictMonadState)(f));
          });
      };
  };
  var monadTellWriterT = function (dictMonoid) {
      return function (dictMonad) {
          return new Control_Monad_Writer_Class.MonadTell(function () {
              return monadWriterT(dictMonoid)(dictMonad);
          }, function ($124) {
              return WriterT(Control_Applicative.pure(dictMonad.Applicative0())(Data_Tuple.Tuple.create(Data_Unit.unit)($124)));
          });
      };
  };
  exports["WriterT"] = WriterT;
  exports["runWriterT"] = runWriterT;
  exports["mapWriterT"] = mapWriterT;
  exports["functorWriterT"] = functorWriterT;
  exports["applyWriterT"] = applyWriterT;
  exports["applicativeWriterT"] = applicativeWriterT;
  exports["bindWriterT"] = bindWriterT;
  exports["monadWriterT"] = monadWriterT;
  exports["monadTransWriterT"] = monadTransWriterT;
  exports["monadStateWriterT"] = monadStateWriterT;
  exports["monadTellWriterT"] = monadTellWriterT;
})(PS["Control.Monad.Writer.Trans"] = PS["Control.Monad.Writer.Trans"] || {});
(function(exports) {
    "use strict";

  function id(x) {
    return x;
  }                        
  exports.fromNumber = id;
  exports.fromString = id;
  exports.fromArray = id;
  exports.fromObject = id;

  exports.jsonNull = null;

  exports.stringify = function (j) {
    return JSON.stringify(j);
  };

  var objToString = Object.prototype.toString;
  var objKeys = Object.keys;

  function isArray(a) {
    return objToString.call(a) === "[object Array]";
  }

  exports._caseJson = function (isNull, isBool, isNum, isStr, isArr, isObj, j) {
    if (j == null) return isNull();
    else if (typeof j === "boolean") return isBool(j);
    else if (typeof j === "number") return isNum(j);
    else if (typeof j === "string") return isStr(j);
    else if (objToString.call(j) === "[object Array]")
      return isArr(j);
    else return isObj(j);
  };

  exports._compare = function _compare (EQ, GT, LT, a, b) {
    if (a == null) {
      if (b == null) return EQ;
      else return LT;
    } else if (typeof a === "boolean") {
      if (typeof b === "boolean") {
        // boolean / boolean
        if (a === b) return EQ;
        else if (a === false) return LT;
        else return GT;
      } else if (b == null) return GT;
      else return LT;
    } else if (typeof a === "number") {
      if (typeof b === "number") {
        if (a === b) return EQ;
        else if (a < b) return LT;
        else return GT;
      } else if (b == null) return GT;
      else if (typeof b === "boolean") return GT;
      else return LT;
    } else if (typeof a === "string") {
      if (typeof b === "string") {
        if (a === b) return EQ;
        else if (a < b) return LT;
        else return GT;
      } else if (b == null) return GT;
      else if (typeof b === "boolean") return GT;
      else if (typeof b === "number") return GT;
      else return LT;
    } else if (isArray(a)) {
      if (isArray(b)) {
        for (var i = 0; i < Math.min(a.length, b.length); i++) {
          var ca = _compare(EQ, GT, LT, a[i], b[i]);
          if (ca !== EQ) return ca;
        }
        if (a.length === b.length) return EQ;
        else if (a.length < b.length) return LT;
        else return GT;
      } else if (b == null) return GT;
      else if (typeof b === "boolean") return GT;
      else if (typeof b === "number") return GT;
      else if (typeof b === "string") return GT;
      else return LT;
    } else {
      if (b == null) return GT;
      else if (typeof b === "boolean") return GT;
      else if (typeof b === "number") return GT;
      else if (typeof b === "string") return GT;
      else if (isArray(b)) return GT;
      else {
        var akeys = objKeys(a);
        var bkeys = objKeys(b);
        if (akeys.length < bkeys.length) return LT;
        else if (akeys.length > bkeys.length) return GT;
        var keys = akeys.concat(bkeys).sort();
        for (var j = 0; j < keys.length; j++) {
          var k = keys[j];
          if (a[k] === undefined) return LT;
          else if (b[k] === undefined) return GT;
          var ck = _compare(EQ, GT, LT, a[k], b[k]);
          if (ck !== EQ) return ck;
        }
        return EQ;
      }
    }
  };
})(PS["Data.Argonaut.Core"] = PS["Data.Argonaut.Core"] || {});
(function(exports) {
    "use strict";

  exports.runFn4 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return fn(a, b, c, d);
          };
        };
      };
    };
  };
})(PS["Data.Function.Uncurried"] = PS["Data.Function.Uncurried"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Function.Uncurried"];
  var Data_Unit = PS["Data.Unit"];
  exports["runFn4"] = $foreign.runFn4;
})(PS["Data.Function.Uncurried"] = PS["Data.Function.Uncurried"] || {});
(function(exports) {
    "use strict";

  exports._copyST = function (m) {
    return function () {
      var r = {};
      for (var k in m) {
        if (hasOwnProperty.call(m, k)) {
          r[k] = m[k];
        }
      }
      return r;
    };
  };

  exports.empty = {};

  exports.runST = function (f) {
    return f();
  };

  exports._lookup = function (no, yes, k, m) {
    return k in m ? yes(m[k]) : no;
  };

  function toArrayWithKey(f) {
    return function (m) {
      var r = [];
      for (var k in m) {
        if (hasOwnProperty.call(m, k)) {
          r.push(f(k)(m[k]));
        }
      }
      return r;
    };
  }
})(PS["Foreign.Object"] = PS["Foreign.Object"] || {});
(function(exports) {
    "use strict";

  exports.poke = function (k) {
    return function (v) {
      return function (m) {
        return function () {
          m[k] = v;
          return m;
        };
      };
    };
  };
})(PS["Foreign.Object.ST"] = PS["Foreign.Object.ST"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Foreign.Object.ST"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Data_Maybe = PS["Data.Maybe"];
  exports["poke"] = $foreign.poke;
})(PS["Foreign.Object.ST"] = PS["Foreign.Object.ST"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Foreign.Object"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Control_Monad_ST_Internal = PS["Control.Monad.ST.Internal"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array = PS["Data.Array"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_FoldableWithIndex = PS["Data.FoldableWithIndex"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Functor = PS["Data.Functor"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_TraversableWithIndex = PS["Data.TraversableWithIndex"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Foreign_Object_ST = PS["Foreign.Object.ST"];
  var Prelude = PS["Prelude"];
  var Type_Row_Homogeneous = PS["Type.Row.Homogeneous"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];                       
  var thawST = $foreign._copyST;
  var mutate = function (f) {
      return function (m) {
          return $foreign.runST(Control_Bind.bind(Control_Monad_ST_Internal.bindST)(thawST(m))(function (v) {
              return Control_Bind.bind(Control_Monad_ST_Internal.bindST)(f(v))(function (v1) {
                  return Control_Applicative.pure(Control_Monad_ST_Internal.applicativeST)(v);
              });
          }));
      };
  };
  var lookup = Data_Function_Uncurried.runFn4($foreign._lookup)(Data_Maybe.Nothing.value)(Data_Maybe.Just.create);
  var insert = function (k) {
      return function (v) {
          return mutate(Foreign_Object_ST.poke(k)(v));
      };
  };
  exports["insert"] = insert;
  exports["lookup"] = lookup;
  exports["thawST"] = thawST;
  exports["empty"] = $foreign.empty;
})(PS["Foreign.Object"] = PS["Foreign.Object"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Argonaut.Core"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Foreign_Object = PS["Foreign.Object"];
  var Prelude = PS["Prelude"];                 
  var verbJsonType = function (def) {
      return function (f) {
          return function (g) {
              return g(def)(f);
          };
      };
  };
  var toJsonType = verbJsonType(Data_Maybe.Nothing.value)(Data_Maybe.Just.create);
  var ordJson = new Data_Ord.Ord(function () {
      return eqJson;
  }, function (a) {
      return function (b) {
          return $foreign._compare(Data_Ordering.EQ.value, Data_Ordering.GT.value, Data_Ordering.LT.value, a, b);
      };
  });
  var eqJson = new Data_Eq.Eq(function (j1) {
      return function (j2) {
          return Data_Eq.eq(Data_Ordering.eqOrdering)(Data_Ord.compare(ordJson)(j1)(j2))(Data_Ordering.EQ.value);
      };
  });
  var caseJsonString = function (d) {
      return function (f) {
          return function (j) {
              return $foreign._caseJson(Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), f, Data_Function["const"](d), Data_Function["const"](d), j);
          };
      };
  };                                        
  var toString = toJsonType(caseJsonString);
  var caseJsonObject = function (d) {
      return function (f) {
          return function (j) {
              return $foreign._caseJson(Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), f, j);
          };
      };
  };                                        
  var toObject = toJsonType(caseJsonObject);  
  var caseJsonArray = function (d) {
      return function (f) {
          return function (j) {
              return $foreign._caseJson(Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), f, Data_Function["const"](d), j);
          };
      };
  };                                      
  var toArray = toJsonType(caseJsonArray);
  exports["caseJsonString"] = caseJsonString;
  exports["caseJsonArray"] = caseJsonArray;
  exports["caseJsonObject"] = caseJsonObject;
  exports["toString"] = toString;
  exports["toArray"] = toArray;
  exports["toObject"] = toObject;
  exports["eqJson"] = eqJson;
  exports["ordJson"] = ordJson;
  exports["fromNumber"] = $foreign.fromNumber;
  exports["fromString"] = $foreign.fromString;
  exports["fromArray"] = $foreign.fromArray;
  exports["fromObject"] = $foreign.fromObject;
  exports["jsonNull"] = $foreign.jsonNull;
  exports["stringify"] = $foreign.stringify;
})(PS["Data.Argonaut.Core"] = PS["Data.Argonaut.Core"] || {});
(function(exports) {
    "use strict";

  exports.fromNumberImpl = function (just) {
    return function (nothing) {
      return function (n) {
        /* jshint bitwise: false */
        return (n | 0) === n ? just(n) : nothing;
      };
    };
  };

  exports.toNumber = function (n) {
    return n;
  };

  exports.fromStringAsImpl = function (just) {
    return function (nothing) {
      return function (radix) {
        var digits;
        if (radix < 11) {
          digits = "[0-" + (radix - 1).toString() + "]";
        } else if (radix === 11) {
          digits = "[0-9a]";
        } else {
          digits = "[0-9a-" + String.fromCharCode(86 + radix) + "]";
        }
        var pattern = new RegExp("^[\\+\\-]?" + digits + "+$", "i");

        return function (s) {
          /* jshint bitwise: false */
          if (pattern.test(s)) {
            var i = parseInt(s, radix);
            return (i | 0) === i ? just(i) : nothing;
          } else {
            return nothing;
          }
        };
      };
    };
  };
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  /* globals exports */
  "use strict";         

  exports.infinity = Infinity;
})(PS["Global"] = PS["Global"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Global"];
  exports["infinity"] = $foreign.infinity;
})(PS["Global"] = PS["Global"] || {});
(function(exports) {
    "use strict";        

  exports.floor = Math.floor;

  exports.pow = function (n) {
    return function (p) {
      return Math.pow(n, p);
    };
  };
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Math"];
  exports["floor"] = $foreign.floor;
  exports["pow"] = $foreign.pow;
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Int"];
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_DivisionRing = PS["Data.DivisionRing"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Int_Bits = PS["Data.Int.Bits"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Global = PS["Global"];
  var $$Math = PS["Math"];
  var Prelude = PS["Prelude"];
  var fromStringAs = $foreign.fromStringAsImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var fromString = fromStringAs(10);
  var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var unsafeClamp = function (x) {
      if (x === Global.infinity) {
          return 0;
      };
      if (x === -Global.infinity) {
          return 0;
      };
      if (x >= $foreign.toNumber(Data_Bounded.top(Data_Bounded.boundedInt))) {
          return Data_Bounded.top(Data_Bounded.boundedInt);
      };
      if (x <= $foreign.toNumber(Data_Bounded.bottom(Data_Bounded.boundedInt))) {
          return Data_Bounded.bottom(Data_Bounded.boundedInt);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.fromMaybe(0)(fromNumber(x));
      };
      throw new Error("Failed pattern match at Data.Int line 66, column 1 - line 66, column 29: " + [ x.constructor.name ]);
  };
  var floor = function ($24) {
      return unsafeClamp($$Math.floor($24));
  };
  exports["fromNumber"] = fromNumber;
  exports["floor"] = floor;
  exports["fromString"] = fromString;
  exports["fromStringAs"] = fromStringAs;
  exports["toNumber"] = $foreign.toNumber;
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
    "use strict";
  /* global Symbol */

  var hasArrayFrom = typeof Array.from === "function";
  var hasStringIterator =
    typeof Symbol !== "undefined" &&
    Symbol != null &&
    typeof Symbol.iterator !== "undefined" &&
    typeof String.prototype[Symbol.iterator] === "function";
  var hasFromCodePoint = typeof String.prototype.fromCodePoint === "function";
  var hasCodePointAt = typeof String.prototype.codePointAt === "function";

  exports._unsafeCodePointAt0 = function (fallback) {
    return hasCodePointAt
      ? function (str) { return str.codePointAt(0); }
      : fallback;
  };

  exports._singleton = function (fallback) {
    return hasFromCodePoint ? String.fromCodePoint : fallback;
  };

  exports._take = function (fallback) {
    return function (n) {
      if (hasStringIterator) {
        return function (str) {
          var accum = "";
          var iter = str[Symbol.iterator]();
          for (var i = 0; i < n; ++i) {
            var o = iter.next();
            if (o.done) return accum;
            accum += o.value;
          }
          return accum;
        };
      }
      return fallback(n);
    };
  };

  exports._toCodePointArray = function (fallback) {
    return function (unsafeCodePointAt0) {
      if (hasArrayFrom) {
        return function (str) {
          return Array.from(str, unsafeCodePointAt0);
        };
      }
      return fallback;
    };
  };
})(PS["Data.String.CodePoints"] = PS["Data.String.CodePoints"] || {});
(function(exports) {
    "use strict";

  exports.toCharCode = function (c) {
    return c.charCodeAt(0);
  };

  exports.fromCharCode = function (c) {
    return String.fromCharCode(c);
  };
})(PS["Data.Enum"] = PS["Data.Enum"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Enum"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Unfoldable1 = PS["Data.Unfoldable1"];
  var Data_Unit = PS["Data.Unit"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var Enum = function (Ord0, pred, succ) {
      this.Ord0 = Ord0;
      this.pred = pred;
      this.succ = succ;
  };
  var BoundedEnum = function (Bounded0, Enum1, cardinality, fromEnum, toEnum) {
      this.Bounded0 = Bounded0;
      this.Enum1 = Enum1;
      this.cardinality = cardinality;
      this.fromEnum = fromEnum;
      this.toEnum = toEnum;
  };
  var toEnum = function (dict) {
      return dict.toEnum;
  };
  var succ = function (dict) {
      return dict.succ;
  }; 
  var pred = function (dict) {
      return dict.pred;
  };              
  var fromEnum = function (dict) {
      return dict.fromEnum;
  };
  var toEnumWithDefaults = function (dictBoundedEnum) {
      return function (low) {
          return function (high) {
              return function (x) {
                  var v = toEnum(dictBoundedEnum)(x);
                  if (v instanceof Data_Maybe.Just) {
                      return v.value0;
                  };
                  if (v instanceof Data_Maybe.Nothing) {
                      var $51 = x < fromEnum(dictBoundedEnum)(Data_Bounded.bottom(dictBoundedEnum.Bounded0()));
                      if ($51) {
                          return low;
                      };
                      return high;
                  };
                  throw new Error("Failed pattern match at Data.Enum line 158, column 33 - line 160, column 62: " + [ v.constructor.name ]);
              };
          };
      };
  };
  var defaultSucc = function (toEnum$prime) {
      return function (fromEnum$prime) {
          return function (a) {
              return toEnum$prime(fromEnum$prime(a) + 1 | 0);
          };
      };
  };
  var defaultPred = function (toEnum$prime) {
      return function (fromEnum$prime) {
          return function (a) {
              return toEnum$prime(fromEnum$prime(a) - 1 | 0);
          };
      };
  };
  var charToEnum = function (v) {
      if (v >= Data_Bounded.bottom(Data_Bounded.boundedInt) && v <= Data_Bounded.top(Data_Bounded.boundedInt)) {
          return new Data_Maybe.Just($foreign.fromCharCode(v));
      };
      return Data_Maybe.Nothing.value;
  };
  var enumChar = new Enum(function () {
      return Data_Ord.ordChar;
  }, defaultPred(charToEnum)($foreign.toCharCode), defaultSucc(charToEnum)($foreign.toCharCode));
  var cardinality = function (dict) {
      return dict.cardinality;
  }; 
  var boundedEnumChar = new BoundedEnum(function () {
      return Data_Bounded.boundedChar;
  }, function () {
      return enumChar;
  }, $foreign.toCharCode(Data_Bounded.top(Data_Bounded.boundedChar)) - $foreign.toCharCode(Data_Bounded.bottom(Data_Bounded.boundedChar)) | 0, $foreign.toCharCode, charToEnum);
  exports["Enum"] = Enum;
  exports["succ"] = succ;
  exports["pred"] = pred;
  exports["BoundedEnum"] = BoundedEnum;
  exports["cardinality"] = cardinality;
  exports["toEnum"] = toEnum;
  exports["fromEnum"] = fromEnum;
  exports["toEnumWithDefaults"] = toEnumWithDefaults;
  exports["defaultSucc"] = defaultSucc;
  exports["defaultPred"] = defaultPred;
  exports["enumChar"] = enumChar;
  exports["boundedEnumChar"] = boundedEnumChar;
})(PS["Data.Enum"] = PS["Data.Enum"] || {});
(function(exports) {
    "use strict";

  exports.fromCharArray = function (a) {
    return a.join("");
  };

  exports.toCharArray = function (s) {
    return s.split("");
  };

  exports.singleton = function (c) {
    return c;
  };

  exports.length = function (s) {
    return s.length;
  };

  exports.drop = function (n) {
    return function (s) {
      return s.substring(n);
    };
  };
})(PS["Data.String.CodeUnits"] = PS["Data.String.CodeUnits"] || {});
(function(exports) {
    "use strict";

  exports.charAt = function (i) {
    return function (s) {
      if (i >= 0 && i < s.length) return s.charAt(i);
      throw new Error("Data.String.Unsafe.charAt: Invalid index.");
    };
  };
})(PS["Data.String.Unsafe"] = PS["Data.String.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.String.Unsafe"];
  exports["charAt"] = $foreign.charAt;
})(PS["Data.String.Unsafe"] = PS["Data.String.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.String.CodeUnits"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_String_Pattern = PS["Data.String.Pattern"];
  var Data_String_Unsafe = PS["Data.String.Unsafe"];
  var Prelude = PS["Prelude"];
  exports["singleton"] = $foreign.singleton;
  exports["fromCharArray"] = $foreign.fromCharArray;
  exports["toCharArray"] = $foreign.toCharArray;
  exports["length"] = $foreign.length;
  exports["drop"] = $foreign.drop;
})(PS["Data.String.CodeUnits"] = PS["Data.String.CodeUnits"] || {});
(function(exports) {
    "use strict";

  exports.replace = function (s1) {
    return function (s2) {
      return function (s3) {
        return s3.replace(s1, s2);
      };
    };
  };

  exports.split = function (sep) {
    return function (s) {
      return s.split(sep);
    };
  };

  exports.trim = function (s) {
    return s.trim();
  };

  exports.joinWith = function (s) {
    return function (xs) {
      return xs.join(s);
    };
  };
})(PS["Data.String.Common"] = PS["Data.String.Common"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.String.Common"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_String_Pattern = PS["Data.String.Pattern"];
  var Prelude = PS["Prelude"];                 
  var $$null = function (s) {
      return s === "";
  };
  exports["null"] = $$null;
  exports["replace"] = $foreign.replace;
  exports["split"] = $foreign.split;
  exports["trim"] = $foreign.trim;
  exports["joinWith"] = $foreign.joinWith;
})(PS["Data.String.Common"] = PS["Data.String.Common"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.String.CodePoints"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array = PS["Data.Array"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Enum = PS["Data.Enum"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Int = PS["Data.Int"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_String_CodeUnits = PS["Data.String.CodeUnits"];
  var Data_String_Common = PS["Data.String.Common"];
  var Data_String_Pattern = PS["Data.String.Pattern"];
  var Data_String_Unsafe = PS["Data.String.Unsafe"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Prelude = PS["Prelude"];
  var unsurrogate = function (lead) {
      return function (trail) {
          return (((lead - 55296 | 0) * 1024 | 0) + (trail - 56320 | 0) | 0) + 65536 | 0;
      };
  }; 
  var isTrail = function (cu) {
      return 56320 <= cu && cu <= 57343;
  };
  var isLead = function (cu) {
      return 55296 <= cu && cu <= 56319;
  };
  var uncons = function (s) {
      var v = Data_String_CodeUnits.length(s);
      if (v === 0) {
          return Data_Maybe.Nothing.value;
      };
      if (v === 1) {
          return new Data_Maybe.Just({
              head: Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s)),
              tail: ""
          });
      };
      var cu1 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(1)(s));
      var cu0 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s));
      var $21 = isLead(cu0) && isTrail(cu1);
      if ($21) {
          return new Data_Maybe.Just({
              head: unsurrogate(cu0)(cu1),
              tail: Data_String_CodeUnits.drop(2)(s)
          });
      };
      return new Data_Maybe.Just({
          head: cu0,
          tail: Data_String_CodeUnits.drop(1)(s)
      });
  };
  var unconsButWithTuple = function (s) {
      return Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
          return new Data_Tuple.Tuple(v.head, v.tail);
      })(uncons(s));
  };
  var toCodePointArrayFallback = function (s) {
      return Data_Unfoldable.unfoldr(Data_Unfoldable.unfoldableArray)(unconsButWithTuple)(s);
  };
  var unsafeCodePointAt0Fallback = function (s) {
      var cu0 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s));
      var $25 = isLead(cu0) && Data_String_CodeUnits.length(s) > 1;
      if ($25) {
          var cu1 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(1)(s));
          var $26 = isTrail(cu1);
          if ($26) {
              return unsurrogate(cu0)(cu1);
          };
          return cu0;
      };
      return cu0;
  };
  var unsafeCodePointAt0 = $foreign._unsafeCodePointAt0(unsafeCodePointAt0Fallback);
  var toCodePointArray = $foreign._toCodePointArray(toCodePointArrayFallback)(unsafeCodePointAt0);
  var length = function ($52) {
      return Data_Array.length(toCodePointArray($52));
  };
  var fromCharCode = function ($53) {
      return Data_String_CodeUnits.singleton(Data_Enum.toEnumWithDefaults(Data_Enum.boundedEnumChar)(Data_Bounded.bottom(Data_Bounded.boundedChar))(Data_Bounded.top(Data_Bounded.boundedChar))($53));
  };
  var singletonFallback = function (v) {
      if (v <= 65535) {
          return fromCharCode(v);
      };
      var lead = Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(v - 65536 | 0)(1024) + 55296 | 0;
      var trail = Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(v - 65536 | 0)(1024) + 56320 | 0;
      return fromCharCode(lead) + fromCharCode(trail);
  };                                                                       
  var singleton = $foreign._singleton(singletonFallback);
  var takeFallback = function (n) {
      return function (v) {
          if (n < 1) {
              return "";
          };
          var v1 = uncons(v);
          if (v1 instanceof Data_Maybe.Just) {
              return singleton(v1.value0.head) + takeFallback(n - 1 | 0)(v1.value0.tail);
          };
          return v;
      };
  };
  var take = $foreign._take(takeFallback);
  var drop = function (n) {
      return function (s) {
          return Data_String_CodeUnits.drop(Data_String_CodeUnits.length(take(n)(s)))(s);
      };
  };
  exports["singleton"] = singleton;
  exports["toCodePointArray"] = toCodePointArray;
  exports["uncons"] = uncons;
  exports["length"] = length;
  exports["take"] = take;
  exports["drop"] = drop;
})(PS["Data.String.CodePoints"] = PS["Data.String.CodePoints"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Eq = PS["Data.Eq"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Symbol = PS["Data.Symbol"];
  var Prelude = PS["Prelude"];
  var Record_Unsafe = PS["Record.Unsafe"];
  var Record_Unsafe_Union = PS["Record.Unsafe.Union"];
  var Type_Row = PS["Type.Row"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var get = function (dictIsSymbol) {
      return function (dictCons) {
          return function (l) {
              return function (r) {
                  return Record_Unsafe.unsafeGet(Data_Symbol.reflectSymbol(dictIsSymbol)(l))(r);
              };
          };
      };
  };
  exports["get"] = get;
})(PS["Record"] = PS["Record"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Argonaut_Core = PS["Data.Argonaut.Core"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Either = PS["Data.Either"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Int = PS["Data.Int"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Map = PS["Data.Map"];
  var Data_Map_Internal = PS["Data.Map.Internal"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_String = PS["Data.String"];
  var Data_String_CodePoints = PS["Data.String.CodePoints"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_TraversableWithIndex = PS["Data.TraversableWithIndex"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Foreign_Object = PS["Foreign.Object"];
  var Prelude = PS["Prelude"];
  var Record = PS["Record"];
  var Type_Data_RowList = PS["Type.Data.RowList"];                 
  var DecodeJson = function (decodeJson) {
      this.decodeJson = decodeJson;
  };                                                                                                                                                   
  var decodeJson = function (dict) {
      return dict.decodeJson;
  };
  exports["decodeJson"] = decodeJson;
  exports["DecodeJson"] = DecodeJson;
})(PS["Data.Argonaut.Decode.Class"] = PS["Data.Argonaut.Decode.Class"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var defaultEncoding = {
      tagKey: "tag",
      valuesKey: "values"
  };
  exports["defaultEncoding"] = defaultEncoding;
})(PS["Data.Argonaut.Types.Generic.Rep"] = PS["Data.Argonaut.Types.Generic.Rep"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Argonaut_Core = PS["Data.Argonaut.Core"];
  var Data_Argonaut_Decode_Class = PS["Data.Argonaut.Decode.Class"];
  var Data_Argonaut_Types_Generic_Rep = PS["Data.Argonaut.Types.Generic.Rep"];
  var Data_Array = PS["Data.Array"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Generic_Rep = PS["Data.Generic.Rep"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Symbol = PS["Data.Symbol"];
  var Foreign_Object = PS["Foreign.Object"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];                 
  var DecodeRep = function (decodeRepWith) {
      this.decodeRepWith = decodeRepWith;
  };
  var DecodeRepArgs = function (decodeRepArgs) {
      this.decodeRepArgs = decodeRepArgs;
  };
  var mFail = function (msg) {
      return Data_Maybe.maybe(new Data_Either.Left(msg))(Data_Either.Right.create);
  };
  var decodeRepWith = function (dict) {
      return dict.decodeRepWith;
  };
  var genericDecodeJsonWith = function (dictGeneric) {
      return function (dictDecodeRep) {
          return function (e) {
              return function ($52) {
                  return Data_Functor.map(Data_Either.functorEither)(Data_Generic_Rep.to(dictGeneric))(decodeRepWith(dictDecodeRep)(e)($52));
              };
          };
      };
  };
  var genericDecodeJson = function (dictGeneric) {
      return function (dictDecodeRep) {
          return genericDecodeJsonWith(dictGeneric)(dictDecodeRep)(Data_Argonaut_Types_Generic_Rep.defaultEncoding);
      };
  };
  var decodeRepSum = function (dictDecodeRep) {
      return function (dictDecodeRep1) {
          return new DecodeRep(function (e) {
              return function (j) {
                  return Control_Alt.alt(Data_Either.altEither)(Data_Functor.map(Data_Either.functorEither)(Data_Generic_Rep.Inl.create)(decodeRepWith(dictDecodeRep)(e)(j)))(Data_Functor.map(Data_Either.functorEither)(Data_Generic_Rep.Inr.create)(decodeRepWith(dictDecodeRep1)(e)(j)));
              };
          });
      };
  }; 
  var decodeRepArgsNoArguments = new DecodeRepArgs(function (js) {
      return new Data_Either.Right({
          init: Data_Generic_Rep.NoArguments.value,
          rest: js
      });
  });
  var decodeRepArgsArgument = function (dictDecodeJson) {
      return new DecodeRepArgs(function (js) {
          return Control_Bind.bind(Data_Either.bindEither)(mFail("too few values were present")(Data_Array.uncons(js)))(function (v) {
              return Data_Functor.map(Data_Either.functorEither)(function ($53) {
                  return (function (v1) {
                      return {
                          init: v1,
                          rest: v.tail
                      };
                  })(Data_Generic_Rep.Argument($53));
              })(Data_Argonaut_Decode_Class.decodeJson(dictDecodeJson)(v.head));
          });
      });
  };
  var decodeRepArgs = function (dict) {
      return dict.decodeRepArgs;
  };
  var decodeRepConstructor = function (dictIsSymbol) {
      return function (dictDecodeRepArgs) {
          return new DecodeRep(function (e) {
              return function (j) {
                  var name = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                  var decodingErr = function (msg) {
                      return "When decoding a " + (name + (": " + msg));
                  };
                  return Control_Bind.bind(Data_Either.bindEither)(mFail(decodingErr("expected an object"))(Data_Argonaut_Core.toObject(j)))(function (v) {
                      return Control_Bind.bind(Data_Either.bindEither)(mFail(decodingErr("'" + (e.tagKey + "' property is missing")))(Foreign_Object.lookup(e.tagKey)(v)))(function (v1) {
                          return Control_Bind.bind(Data_Either.bindEither)(mFail(decodingErr("'" + (e.tagKey + "' property is not a string")))(Data_Argonaut_Core.toString(v1)))(function (v2) {
                              return Control_Bind.discard(Control_Bind.discardUnit)(Data_Either.bindEither)(Control_Applicative.when(Data_Either.applicativeEither)(v2 !== name)(Data_Either.Left.create(decodingErr("'" + (e.tagKey + "' property has an incorrect value")))))(function () {
                                  return Control_Bind.bind(Data_Either.bindEither)(mFail(decodingErr("'" + (e.valuesKey + "' property is missing")))(Foreign_Object.lookup(e.valuesKey)(v)))(function (v3) {
                                      return Control_Bind.bind(Data_Either.bindEither)(mFail(decodingErr("'" + (e.valuesKey + "' property is not an array")))(Data_Argonaut_Core.toArray(v3)))(function (v4) {
                                          return Control_Bind.bind(Data_Either.bindEither)(Data_Bifunctor.lmap(Data_Either.bifunctorEither)(decodingErr)(decodeRepArgs(dictDecodeRepArgs)(v4)))(function (v5) {
                                              return Control_Bind.discard(Control_Bind.discardUnit)(Data_Either.bindEither)(Control_Applicative.when(Data_Either.applicativeEither)(Data_Eq.notEq(Data_Eq.eqArray(Data_Argonaut_Core.eqJson))(v5.rest)([  ]))(Data_Either.Left.create(decodingErr("'" + (e.valuesKey + "' property had too many values")))))(function () {
                                                  return Control_Applicative.pure(Data_Either.applicativeEither)(v5.init);
                                              });
                                          });
                                      });
                                  });
                              });
                          });
                      });
                  });
              };
          });
      };
  };
  exports["DecodeRep"] = DecodeRep;
  exports["DecodeRepArgs"] = DecodeRepArgs;
  exports["decodeRepWith"] = decodeRepWith;
  exports["decodeRepArgs"] = decodeRepArgs;
  exports["genericDecodeJson"] = genericDecodeJson;
  exports["genericDecodeJsonWith"] = genericDecodeJsonWith;
  exports["decodeRepSum"] = decodeRepSum;
  exports["decodeRepConstructor"] = decodeRepConstructor;
  exports["decodeRepArgsNoArguments"] = decodeRepArgsNoArguments;
  exports["decodeRepArgsArgument"] = decodeRepArgsArgument;
})(PS["Data.Argonaut.Decode.Generic.Rep"] = PS["Data.Argonaut.Decode.Generic.Rep"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Argonaut_Core = PS["Data.Argonaut.Core"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Int = PS["Data.Int"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Map = PS["Data.Map"];
  var Data_Map_Internal = PS["Data.Map.Internal"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_String = PS["Data.String"];
  var Data_String_CodePoints = PS["Data.String.CodePoints"];
  var Data_String_CodeUnits = PS["Data.String.CodeUnits"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Void = PS["Data.Void"];
  var Foreign_Object = PS["Foreign.Object"];
  var Prelude = PS["Prelude"];
  var Record = PS["Record"];
  var Type_Data_RowList = PS["Type.Data.RowList"];                 
  var EncodeJson = function (encodeJson) {
      this.encodeJson = encodeJson;
  };
  var GEncodeJson = function (gEncodeJson) {
      this.gEncodeJson = gEncodeJson;
  };
  var gEncodeJsonNil = new GEncodeJson(function (v) {
      return function (v1) {
          return Foreign_Object.empty;
      };
  });
  var gEncodeJson = function (dict) {
      return dict.gEncodeJson;
  };                                                
  var encodeRecord = function (dictGEncodeJson) {
      return function (dictRowToList) {
          return new EncodeJson(function (rec) {
              return Data_Argonaut_Core.fromObject(gEncodeJson(dictGEncodeJson)(rec)(Type_Data_RowList.RLProxy.value));
          });
      };
  };                                                                                       
  var encodeJsonJson = new EncodeJson(Control_Category.identity(Control_Category.categoryFn));
  var encodeJsonJString = new EncodeJson(Data_Argonaut_Core.fromString);
  var encodeJsonJNumber = new EncodeJson(Data_Argonaut_Core.fromNumber);  
  var encodeJsonInt = new EncodeJson(function ($28) {
      return Data_Argonaut_Core.fromNumber(Data_Int.toNumber($28));
  });
  var encodeJson = function (dict) {
      return dict.encodeJson;
  };
  var encodeJsonArray = function (dictEncodeJson) {
      return new EncodeJson(function (json) {
          return Data_Argonaut_Core.fromArray(Data_Functor.map(Data_Functor.functorArray)(encodeJson(dictEncodeJson))(json));
      });
  };
  var encodeJsonList = function (dictEncodeJson) {
      return new EncodeJson(function ($31) {
          return Data_Argonaut_Core.fromArray(Data_Functor.map(Data_Functor.functorArray)(encodeJson(dictEncodeJson))(Data_List.toUnfoldable(Data_Unfoldable.unfoldableArray)($31)));
      });
  };
  var encodeJsonMaybe = function (dictEncodeJson) {
      return new EncodeJson(function (v) {
          if (v instanceof Data_Maybe.Nothing) {
              return Data_Argonaut_Core.jsonNull;
          };
          if (v instanceof Data_Maybe.Just) {
              return encodeJson(dictEncodeJson)(v.value0);
          };
          throw new Error("Failed pattern match at Data.Argonaut.Encode.Class line 25, column 1 - line 25, column 65: " + [ v.constructor.name ]);
      });
  };
  var encodeJsonTuple = function (dictEncodeJson) {
      return function (dictEncodeJson1) {
          return new EncodeJson(function (v) {
              return encodeJson(encodeJsonArray(encodeJsonJson))([ encodeJson(dictEncodeJson)(v.value0), encodeJson(dictEncodeJson1)(v.value1) ]);
          });
      };
  };
  var encodeMap = function (dictOrd) {
      return function (dictEncodeJson) {
          return function (dictEncodeJson1) {
              return new EncodeJson(function ($32) {
                  return encodeJson(encodeJsonList(encodeJsonTuple(dictEncodeJson)(dictEncodeJson1)))(Data_Map_Internal.toUnfoldable(Data_List_Types.unfoldableList)($32));
              });
          };
      };
  };
  var gEncodeJsonCons = function (dictEncodeJson) {
      return function (dictGEncodeJson) {
          return function (dictIsSymbol) {
              return function (dictCons) {
                  return new GEncodeJson(function (row) {
                      return function (v) {
                          return Foreign_Object.insert(Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value))(encodeJson(dictEncodeJson)(Record.get(dictIsSymbol)(dictCons)(Data_Symbol.SProxy.value)(row)))(gEncodeJson(dictGEncodeJson)(row)(Type_Data_RowList.RLProxy.value));
                      };
                  });
              };
          };
      };
  };
  exports["encodeJson"] = encodeJson;
  exports["gEncodeJson"] = gEncodeJson;
  exports["EncodeJson"] = EncodeJson;
  exports["GEncodeJson"] = GEncodeJson;
  exports["encodeJsonMaybe"] = encodeJsonMaybe;
  exports["encodeJsonTuple"] = encodeJsonTuple;
  exports["encodeJsonJNumber"] = encodeJsonJNumber;
  exports["encodeJsonInt"] = encodeJsonInt;
  exports["encodeJsonJString"] = encodeJsonJString;
  exports["encodeJsonJson"] = encodeJsonJson;
  exports["encodeJsonArray"] = encodeJsonArray;
  exports["encodeJsonList"] = encodeJsonList;
  exports["encodeMap"] = encodeMap;
  exports["encodeRecord"] = encodeRecord;
  exports["gEncodeJsonNil"] = gEncodeJsonNil;
  exports["gEncodeJsonCons"] = gEncodeJsonCons;
})(PS["Data.Argonaut.Encode.Class"] = PS["Data.Argonaut.Encode.Class"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Argonaut_Core = PS["Data.Argonaut.Core"];
  var Data_Argonaut_Encode_Class = PS["Data.Argonaut.Encode.Class"];
  var Data_Argonaut_Types_Generic_Rep = PS["Data.Argonaut.Types.Generic.Rep"];
  var Data_Function = PS["Data.Function"];
  var Data_Generic_Rep = PS["Data.Generic.Rep"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Symbol = PS["Data.Symbol"];
  var Foreign_Object = PS["Foreign.Object"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];                 
  var EncodeRep = function (encodeRepWith) {
      this.encodeRepWith = encodeRepWith;
  };
  var EncodeRepArgs = function (encodeRepArgs) {
      this.encodeRepArgs = encodeRepArgs;
  };
  var encodeRepWith = function (dict) {
      return dict.encodeRepWith;
  };
  var genericEncodeJsonWith = function (dictGeneric) {
      return function (dictEncodeRep) {
          return function (e) {
              return function ($50) {
                  return encodeRepWith(dictEncodeRep)(e)(Data_Generic_Rep.from(dictGeneric)($50));
              };
          };
      };
  };
  var genericEncodeJson = function (dictGeneric) {
      return function (dictEncodeRep) {
          return genericEncodeJsonWith(dictGeneric)(dictEncodeRep)(Data_Argonaut_Types_Generic_Rep.defaultEncoding);
      };
  };
  var encodeRepSum = function (dictEncodeRep) {
      return function (dictEncodeRep1) {
          return new EncodeRep(function (e) {
              return function (v) {
                  if (v instanceof Data_Generic_Rep.Inl) {
                      return encodeRepWith(dictEncodeRep)(e)(v.value0);
                  };
                  if (v instanceof Data_Generic_Rep.Inr) {
                      return encodeRepWith(dictEncodeRep1)(e)(v.value0);
                  };
                  throw new Error("Failed pattern match at Data.Argonaut.Encode.Generic.Rep line 37, column 1 - line 37, column 79: " + [ e.constructor.name, v.constructor.name ]);
              };
          });
      };
  };
  var encodeRepArgsNoArguments = new EncodeRepArgs(function (v) {
      return [  ];
  });
  var encodeRepArgsArgument = function (dictEncodeJson) {
      return new EncodeRepArgs(function (v) {
          return [ Data_Argonaut_Encode_Class.encodeJson(dictEncodeJson)(v) ];
      });
  };
  var encodeRepArgs = function (dict) {
      return dict.encodeRepArgs;
  };
  var encodeRepArgsProduct = function (dictEncodeRepArgs) {
      return function (dictEncodeRepArgs1) {
          return new EncodeRepArgs(function (v) {
              return Data_Semigroup.append(Data_Semigroup.semigroupArray)(encodeRepArgs(dictEncodeRepArgs)(v.value0))(encodeRepArgs(dictEncodeRepArgs1)(v.value1));
          });
      };
  };
  var encodeRepConstructor = function (dictIsSymbol) {
      return function (dictEncodeRepArgs) {
          return new EncodeRep(function (e) {
              return function (v) {
                  return Data_Argonaut_Core.fromObject(Foreign_Object.insert(e.tagKey)(Data_Argonaut_Core.fromString(Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value)))(Foreign_Object.insert(e.valuesKey)(Data_Argonaut_Core.fromArray(encodeRepArgs(dictEncodeRepArgs)(v)))(Foreign_Object.empty)));
              };
          });
      };
  };
  exports["EncodeRep"] = EncodeRep;
  exports["EncodeRepArgs"] = EncodeRepArgs;
  exports["encodeRepWith"] = encodeRepWith;
  exports["encodeRepArgs"] = encodeRepArgs;
  exports["genericEncodeJson"] = genericEncodeJson;
  exports["genericEncodeJsonWith"] = genericEncodeJsonWith;
  exports["encodeRepSum"] = encodeRepSum;
  exports["encodeRepConstructor"] = encodeRepConstructor;
  exports["encodeRepArgsNoArguments"] = encodeRepArgsNoArguments;
  exports["encodeRepArgsProduct"] = encodeRepArgsProduct;
  exports["encodeRepArgsArgument"] = encodeRepArgsArgument;
})(PS["Data.Argonaut.Encode.Generic.Rep"] = PS["Data.Argonaut.Encode.Generic.Rep"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Generic_Rep = PS["Data.Generic.Rep"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Symbol = PS["Data.Symbol"];
  var Prelude = PS["Prelude"];                 
  var GenericShow = function (genericShow$prime) {
      this["genericShow'"] = genericShow$prime;
  };
  var GenericShowArgs = function (genericShowArgs) {
      this.genericShowArgs = genericShowArgs;
  };
  var genericShowArgsNoArguments = new GenericShowArgs(function (v) {
      return [  ];
  });
  var genericShowArgsArgument = function (dictShow) {
      return new GenericShowArgs(function (v) {
          return [ Data_Show.show(dictShow)(v) ];
      });
  };
  var genericShowArgs = function (dict) {
      return dict.genericShowArgs;
  };
  var genericShowConstructor = function (dictGenericShowArgs) {
      return function (dictIsSymbol) {
          return new GenericShow(function (v) {
              var ctor = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
              var v1 = genericShowArgs(dictGenericShowArgs)(v);
              if (v1.length === 0) {
                  return ctor;
              };
              return "(" + (Data_Foldable.intercalate(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(" ")(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ ctor ])(v1)) + ")");
          });
      };
  };
  var genericShow$prime = function (dict) {
      return dict["genericShow'"];
  }; 
  var genericShowSum = function (dictGenericShow) {
      return function (dictGenericShow1) {
          return new GenericShow(function (v) {
              if (v instanceof Data_Generic_Rep.Inl) {
                  return genericShow$prime(dictGenericShow)(v.value0);
              };
              if (v instanceof Data_Generic_Rep.Inr) {
                  return genericShow$prime(dictGenericShow1)(v.value0);
              };
              throw new Error("Failed pattern match at Data.Generic.Rep.Show line 26, column 1 - line 26, column 83: " + [ v.constructor.name ]);
          });
      };
  };
  var genericShow = function (dictGeneric) {
      return function (dictGenericShow) {
          return function (x) {
              return genericShow$prime(dictGenericShow)(Data_Generic_Rep.from(dictGeneric)(x));
          };
      };
  };
  exports["GenericShow"] = GenericShow;
  exports["genericShow"] = genericShow;
  exports["GenericShowArgs"] = GenericShowArgs;
  exports["genericShowArgs"] = genericShowArgs;
  exports["genericShowArgsNoArguments"] = genericShowArgsNoArguments;
  exports["genericShowSum"] = genericShowSum;
  exports["genericShowConstructor"] = genericShowConstructor;
  exports["genericShowArgsArgument"] = genericShowArgsArgument;
})(PS["Data.Generic.Rep.Show"] = PS["Data.Generic.Rep.Show"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Prelude = PS["Prelude"];                 
  var Profunctor = function (dimap) {
      this.dimap = dimap;
  };
  var profunctorFn = new Profunctor(function (a2b) {
      return function (c2d) {
          return function (b2c) {
              return function ($9) {
                  return c2d(b2c(a2b($9)));
              };
          };
      };
  });
  var dimap = function (dict) {
      return dict.dimap;
  };
  var rmap = function (dictProfunctor) {
      return function (b2c) {
          return dimap(dictProfunctor)(Control_Category.identity(Control_Category.categoryFn))(b2c);
      };
  };
  exports["dimap"] = dimap;
  exports["Profunctor"] = Profunctor;
  exports["rmap"] = rmap;
  exports["profunctorFn"] = profunctorFn;
})(PS["Data.Profunctor"] = PS["Data.Profunctor"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Profunctor = PS["Data.Profunctor"];
  var Prelude = PS["Prelude"];                 
  var Choice = function (Profunctor0, left, right) {
      this.Profunctor0 = Profunctor0;
      this.left = left;
      this.right = right;
  };
  var right = function (dict) {
      return dict.right;
  };
  var left = function (dict) {
      return dict.left;
  };
  var choiceFn = new Choice(function () {
      return Data_Profunctor.profunctorFn;
  }, function (v) {
      return function (v1) {
          if (v1 instanceof Data_Either.Left) {
              return Data_Either.Left.create(v(v1.value0));
          };
          if (v1 instanceof Data_Either.Right) {
              return new Data_Either.Right(v1.value0);
          };
          throw new Error("Failed pattern match at Data.Profunctor.Choice line 32, column 1 - line 32, column 33: " + [ v.constructor.name, v1.constructor.name ]);
      };
  }, Data_Functor.map(Data_Either.functorEither));
  exports["left"] = left;
  exports["right"] = right;
  exports["Choice"] = Choice;
  exports["choiceFn"] = choiceFn;
})(PS["Data.Profunctor.Choice"] = PS["Data.Profunctor.Choice"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Profunctor = PS["Data.Profunctor"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];                 
  var Strong = function (Profunctor0, first, second) {
      this.Profunctor0 = Profunctor0;
      this.first = first;
      this.second = second;
  };
  var strongFn = new Strong(function () {
      return Data_Profunctor.profunctorFn;
  }, function (a2b) {
      return function (v) {
          return new Data_Tuple.Tuple(a2b(v.value0), v.value1);
      };
  }, Data_Functor.map(Data_Tuple.functorTuple));
  var second = function (dict) {
      return dict.second;
  };
  var first = function (dict) {
      return dict.first;
  };
  var splitStrong = function (dictCategory) {
      return function (dictStrong) {
          return function (l) {
              return function (r) {
                  return Control_Semigroupoid.composeFlipped(dictCategory.Semigroupoid0())(first(dictStrong)(l))(second(dictStrong)(r));
              };
          };
      };
  };
  var fanout = function (dictCategory) {
      return function (dictStrong) {
          return function (l) {
              return function (r) {
                  var split = Data_Profunctor.dimap(dictStrong.Profunctor0())(Control_Category.identity(Control_Category.categoryFn))(function (a) {
                      return new Data_Tuple.Tuple(a, a);
                  })(Control_Category.identity(dictCategory));
                  return Control_Semigroupoid.composeFlipped(dictCategory.Semigroupoid0())(split)(splitStrong(dictCategory)(dictStrong)(l)(r));
              };
          };
      };
  };
  exports["first"] = first;
  exports["second"] = second;
  exports["Strong"] = Strong;
  exports["splitStrong"] = splitStrong;
  exports["fanout"] = fanout;
  exports["strongFn"] = strongFn;
})(PS["Data.Profunctor.Strong"] = PS["Data.Profunctor.Strong"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Functor = PS["Data.Functor"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Profunctor_Choice = PS["Data.Profunctor.Choice"];
  var Data_Profunctor_Star = PS["Data.Profunctor.Star"];
  var Data_Profunctor_Strong = PS["Data.Profunctor.Strong"];
  var Prelude = PS["Prelude"];                 
  var Wander = function (Choice1, Strong0, wander) {
      this.Choice1 = Choice1;
      this.Strong0 = Strong0;
      this.wander = wander;
  };
  var wanderFunction = new Wander(function () {
      return Data_Profunctor_Choice.choiceFn;
  }, function () {
      return Data_Profunctor_Strong.strongFn;
  }, function (t) {
      return Data_Newtype.alaF(Data_Functor.functorFn)(Data_Functor.functorFn)(Data_Identity.newtypeIdentity)(Data_Identity.newtypeIdentity)(Data_Identity.Identity)(t(Data_Identity.applicativeIdentity));
  });
  var wander = function (dict) {
      return dict.wander;
  };
  exports["wander"] = wander;
  exports["Wander"] = Wander;
  exports["wanderFunction"] = wanderFunction;
})(PS["Data.Lens.Internal.Wander"] = PS["Data.Lens.Internal.Wander"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Const = PS["Data.Const"];
  var Data_Either = PS["Data.Either"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Lens_Internal_Wander = PS["Data.Lens.Internal.Wander"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Profunctor = PS["Data.Profunctor"];
  var Data_Profunctor_Choice = PS["Data.Profunctor.Choice"];
  var Data_Profunctor_Cochoice = PS["Data.Profunctor.Cochoice"];
  var Data_Profunctor_Strong = PS["Data.Profunctor.Strong"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];                 
  var Forget = function (x) {
      return x;
  };
  var profunctorForget = new Data_Profunctor.Profunctor(function (f) {
      return function (v) {
          return function (v1) {
              return function ($27) {
                  return v1(f($27));
              };
          };
      };
  });
  var strongForget = new Data_Profunctor_Strong.Strong(function () {
      return profunctorForget;
  }, function (v) {
      return function ($28) {
          return v(Data_Tuple.fst($28));
      };
  }, function (v) {
      return function ($29) {
          return v(Data_Tuple.snd($29));
      };
  });
  var newtypeForget = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Forget);
  exports["Forget"] = Forget;
  exports["newtypeForget"] = newtypeForget;
  exports["profunctorForget"] = profunctorForget;
  exports["strongForget"] = strongForget;
})(PS["Data.Lens.Internal.Forget"] = PS["Data.Lens.Internal.Forget"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Lens_Internal_Forget = PS["Data.Lens.Internal.Forget"];
  var Data_Lens_Internal_Indexed = PS["Data.Lens.Internal.Indexed"];
  var Data_Lens_Types = PS["Data.Lens.Types"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Profunctor_Strong = PS["Data.Profunctor.Strong"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];                 
  var view = function (l) {
      return Data_Newtype.unwrap(Data_Lens_Internal_Forget.newtypeForget)(l(Control_Category.identity(Control_Category.categoryFn)));
  };
  var viewOn = function (s) {
      return function (l) {
          return view(l)(s);
      };
  };
  exports["viewOn"] = viewOn;
  exports["view"] = view;
})(PS["Data.Lens.Getter"] = PS["Data.Lens.Getter"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Data_Lens_Internal_Indexed = PS["Data.Lens.Internal.Indexed"];
  var Data_Lens_Internal_Shop = PS["Data.Lens.Internal.Shop"];
  var Data_Lens_Types = PS["Data.Lens.Types"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Profunctor = PS["Data.Profunctor"];
  var Data_Profunctor_Strong = PS["Data.Profunctor.Strong"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];
  var lens$prime = function (to) {
      return function (dictStrong) {
          return function (pab) {
              return Data_Profunctor.dimap(dictStrong.Profunctor0())(to)(function (v) {
                  return v.value1(v.value0);
              })(Data_Profunctor_Strong.first(dictStrong)(pab));
          };
      };
  };
  var lens = function (get) {
      return function (set) {
          return function (dictStrong) {
              return lens$prime(function (s) {
                  return new Data_Tuple.Tuple(get(s), function (b) {
                      return set(s)(b);
                  });
              })(dictStrong);
          };
      };
  };
  exports["lens"] = lens;
})(PS["Data.Lens.Lens"] = PS["Data.Lens.Lens"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Lens_Internal_Indexed = PS["Data.Lens.Internal.Indexed"];
  var Data_Lens_Types = PS["Data.Lens.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];                 
  var over = function (l) {
      return l;
  };
  var set = function (l) {
      return function (b) {
          return over(l)(Data_Function["const"](b));
      };
  };
  exports["over"] = over;
  exports["set"] = set;
})(PS["Data.Lens.Setter"] = PS["Data.Lens.Setter"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports.setInterval = function (ms) {
    return function (fn) {
      return function () {
        return setInterval(fn, ms);
      };
    };
  };
})(PS["Effect.Timer"] = PS["Effect.Timer"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Effect.Timer"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  var Effect = PS["Effect"];
  var Prelude = PS["Prelude"];
  exports["setInterval"] = $foreign.setInterval;
})(PS["Effect.Timer"] = PS["Effect.Timer"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_State = PS["Control.Monad.State"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_State_Trans = PS["Control.Monad.State.Trans"];
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];
  var Control_Monad_Writer_Trans = PS["Control.Monad.Writer.Trans"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Argonaut_Decode_Class = PS["Data.Argonaut.Decode.Class"];
  var Data_Argonaut_Decode_Generic_Rep = PS["Data.Argonaut.Decode.Generic.Rep"];
  var Data_Argonaut_Encode_Class = PS["Data.Argonaut.Encode.Class"];
  var Data_Argonaut_Encode_Generic_Rep = PS["Data.Argonaut.Encode.Generic.Rep"];
  var Data_Array = PS["Data.Array"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Generic_Rep = PS["Data.Generic.Rep"];
  var Data_Generic_Rep_Show = PS["Data.Generic.Rep.Show"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Lens = PS["Data.Lens"];
  var Data_Lens_Getter = PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = PS["Data.Lens.Internal.Forget"];
  var Data_Lens_Lens = PS["Data.Lens.Lens"];
  var Data_Lens_Setter = PS["Data.Lens.Setter"];
  var Data_Lens_Types = PS["Data.Lens.Types"];
  var Data_Map = PS["Data.Map"];
  var Data_Map_Internal = PS["Data.Map.Internal"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Profunctor_Strong = PS["Data.Profunctor.Strong"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_String = PS["Data.String"];
  var Data_String_Common = PS["Data.String.Common"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Unit = PS["Data.Unit"];
  var Effect = PS["Effect"];
  var Effect_Ref = PS["Effect.Ref"];
  var Effect_Timer = PS["Effect.Timer"];
  var Graphics_Canvas = PS["Graphics.Canvas"];
  var $$Math = PS["Math"];
  var Prelude = PS["Prelude"];                 
  var Intersection = (function () {
      function Intersection() {

      };
      Intersection.value = new Intersection();
      return Intersection;
  })();
  var TeeJunctionUp = (function () {
      function TeeJunctionUp() {

      };
      TeeJunctionUp.value = new TeeJunctionUp();
      return TeeJunctionUp;
  })();
  var TeeJunctionRight = (function () {
      function TeeJunctionRight() {

      };
      TeeJunctionRight.value = new TeeJunctionRight();
      return TeeJunctionRight;
  })();
  var TeeJunctionDown = (function () {
      function TeeJunctionDown() {

      };
      TeeJunctionDown.value = new TeeJunctionDown();
      return TeeJunctionDown;
  })();
  var TeeJunctionLeft = (function () {
      function TeeJunctionLeft() {

      };
      TeeJunctionLeft.value = new TeeJunctionLeft();
      return TeeJunctionLeft;
  })();
  var CornerUpRight = (function () {
      function CornerUpRight() {

      };
      CornerUpRight.value = new CornerUpRight();
      return CornerUpRight;
  })();
  var CornerRightDown = (function () {
      function CornerRightDown() {

      };
      CornerRightDown.value = new CornerRightDown();
      return CornerRightDown;
  })();
  var CornerDownLeft = (function () {
      function CornerDownLeft() {

      };
      CornerDownLeft.value = new CornerDownLeft();
      return CornerDownLeft;
  })();
  var CornerLeftUp = (function () {
      function CornerLeftUp() {

      };
      CornerLeftUp.value = new CornerLeftUp();
      return CornerLeftUp;
  })();
  var StraightHorizontal = (function () {
      function StraightHorizontal() {

      };
      StraightHorizontal.value = new StraightHorizontal();
      return StraightHorizontal;
  })();
  var StraightVertical = (function () {
      function StraightVertical() {

      };
      StraightVertical.value = new StraightVertical();
      return StraightVertical;
  })();
  var Inaccessible = (function () {
      function Inaccessible() {

      };
      Inaccessible.value = new Inaccessible();
      return Inaccessible;
  })();
  var Ready = (function () {
      function Ready() {

      };
      Ready.value = new Ready();
      return Ready;
  })();
  var NotReady = (function () {
      function NotReady() {

      };
      NotReady.value = new NotReady();
      return NotReady;
  })();
  var P1 = (function () {
      function P1() {

      };
      P1.value = new P1();
      return P1;
  })();
  var P2 = (function () {
      function P2() {

      };
      P2.value = new P2();
      return P2;
  })();
  var P3 = (function () {
      function P3() {

      };
      P3.value = new P3();
      return P3;
  })();
  var P4 = (function () {
      function P4() {

      };
      P4.value = new P4();
      return P4;
  })();
  var Rampaging = (function () {
      function Rampaging(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Rampaging.create = function (value0) {
          return function (value1) {
              return new Rampaging(value0, value1);
          };
      };
      return Rampaging;
  })();
  var Cooldown = (function () {
      function Cooldown(value0) {
          this.value0 = value0;
      };
      Cooldown.create = function (value0) {
          return new Cooldown(value0);
      };
      return Cooldown;
  })();
  var Eaten = (function () {
      function Eaten() {

      };
      Eaten.value = new Eaten();
      return Eaten;
  })();
  var LittleDot = (function () {
      function LittleDot() {

      };
      LittleDot.value = new LittleDot();
      return LittleDot;
  })();
  var BigDot = (function () {
      function BigDot() {

      };
      BigDot.value = new BigDot();
      return BigDot;
  })();
  var Item = function (x) {
      return x;
  };
  var Completed = (function () {
      function Completed() {

      };
      Completed.value = new Completed();
      return Completed;
  })();
  var TooManyPlayersDisconnected = (function () {
      function TooManyPlayersDisconnected() {

      };
      TooManyPlayersDisconnected.value = new TooManyPlayersDisconnected();
      return TooManyPlayersDisconnected;
  })();
  var Up = (function () {
      function Up() {

      };
      Up.value = new Up();
      return Up;
  })();
  var Down = (function () {
      function Down() {

      };
      Down.value = new Down();
      return Down;
  })();
  var Left = (function () {
      function Left() {

      };
      Left.value = new Left();
      return Left;
  })();
  var Right = (function () {
      function Right() {

      };
      Right.value = new Right();
      return Right;
  })();
  var Player = function (x) {
      return x;
  };   
  var ChangedDirection = (function () {
      function ChangedDirection(value0) {
          this.value0 = value0;
      };
      ChangedDirection.create = function (value0) {
          return new ChangedDirection(value0);
      };
      return ChangedDirection;
  })();
  var ChangedIntendedDirection = (function () {
      function ChangedIntendedDirection(value0) {
          this.value0 = value0;
      };
      ChangedIntendedDirection.create = function (value0) {
          return new ChangedIntendedDirection(value0);
      };
      return ChangedIntendedDirection;
  })();
  var ChangedPosition = (function () {
      function ChangedPosition(value0) {
          this.value0 = value0;
      };
      ChangedPosition.create = function (value0) {
          return new ChangedPosition(value0);
      };
      return ChangedPosition;
  })();
  var ChangedScore = (function () {
      function ChangedScore(value0) {
          this.value0 = value0;
      };
      ChangedScore.create = function (value0) {
          return new ChangedScore(value0);
      };
      return ChangedScore;
  })();
  var ChangedNomIndex = (function () {
      function ChangedNomIndex(value0) {
          this.value0 = value0;
      };
      ChangedNomIndex.create = function (value0) {
          return new ChangedNomIndex(value0);
      };
      return ChangedNomIndex;
  })();
  var ChangedRespawnCounter = (function () {
      function ChangedRespawnCounter(value0) {
          this.value0 = value0;
      };
      ChangedRespawnCounter.create = function (value0) {
          return new ChangedRespawnCounter(value0);
      };
      return ChangedRespawnCounter;
  })();
  var PlayerLeft = (function () {
      function PlayerLeft() {

      };
      PlayerLeft.value = new PlayerLeft();
      return PlayerLeft;
  })();
  var GUPU = (function () {
      function GUPU(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      GUPU.create = function (value0) {
          return function (value1) {
              return new GUPU(value0, value1);
          };
      };
      return GUPU;
  })();
  var GUIU = (function () {
      function GUIU(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      GUIU.create = function (value0) {
          return function (value1) {
              return new GUIU(value0, value1);
          };
      };
      return GUIU;
  })();
  var ChangedCountdown = (function () {
      function ChangedCountdown(value0) {
          this.value0 = value0;
      };
      ChangedCountdown.create = function (value0) {
          return new ChangedCountdown(value0);
      };
      return ChangedCountdown;
  })();
  var GameEnded = (function () {
      function GameEnded(value0) {
          this.value0 = value0;
      };
      GameEnded.create = function (value0) {
          return new GameEnded(value0);
      };
      return GameEnded;
  })();
  var ChangedRampage = (function () {
      function ChangedRampage(value0) {
          this.value0 = value0;
      };
      ChangedRampage.create = function (value0) {
          return new ChangedRampage(value0);
      };
      return ChangedRampage;
  })();
  var SIToggleReadyState = (function () {
      function SIToggleReadyState() {

      };
      SIToggleReadyState.value = new SIToggleReadyState();
      return SIToggleReadyState;
  })();
  var SIInProgress = (function () {
      function SIInProgress(value0) {
          this.value0 = value0;
      };
      SIInProgress.create = function (value0) {
          return new SIInProgress(value0);
      };
      return SIInProgress;
  })();
  var Wall = (function () {
      function Wall() {

      };
      Wall.value = new Wall();
      return Wall;
  })();
  var Empty = (function () {
      function Empty() {

      };
      Empty.value = new Empty();
      return Empty;
  })();
  var WaitingForPlayers = (function () {
      function WaitingForPlayers(value0) {
          this.value0 = value0;
      };
      WaitingForPlayers.create = function (value0) {
          return new WaitingForPlayers(value0);
      };
      return WaitingForPlayers;
  })();
  var InProgress = (function () {
      function InProgress(value0) {
          this.value0 = value0;
      };
      InProgress.create = function (value0) {
          return new InProgress(value0);
      };
      return InProgress;
  })();
  var WrappedGame = function (x) {
      return x;
  };
  var GameStarting = (function () {
      function GameStarting(value0) {
          this.value0 = value0;
      };
      GameStarting.create = function (value0) {
          return new GameStarting(value0);
      };
      return GameStarting;
  })();
  var NewReadyStates = (function () {
      function NewReadyStates(value0) {
          this.value0 = value0;
      };
      NewReadyStates.create = function (value0) {
          return new NewReadyStates(value0);
      };
      return NewReadyStates;
  })();
  var SOWaiting = (function () {
      function SOWaiting(value0) {
          this.value0 = value0;
      };
      SOWaiting.create = function (value0) {
          return new SOWaiting(value0);
      };
      return SOWaiting;
  })();
  var SOInProgress = (function () {
      function SOInProgress(value0) {
          this.value0 = value0;
      };
      SOInProgress.create = function (value0) {
          return new SOInProgress(value0);
      };
      return SOInProgress;
  })();
  var tellGameUpdate = function ($543) {
      return Control_Monad_Writer_Class.tell(Control_Monad_Writer_Trans.monadTellWriterT(Data_Monoid.monoidArray)(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity)))(Data_Array.singleton($543));
  };
  var showRecord = function (name) {
      return function (props) {
          return "(" + (name + (" {" + (Data_String_Common.joinWith(", ")(props) + "})")));
      };
  };
  var runGameUpdateM = function (game) {
      return function (action) {
          var rearrange = function (v) {
              return new Data_Tuple.Tuple(v.value0.value0, new Data_Tuple.Tuple(v.value1, v.value0.value1));
          };
          var a0 = Control_Monad_Writer_Trans.runWriterT(action);
          var a1 = Control_Monad_State.runState(a0)(game);
          return rearrange(a1);
      };
  }; 
  var quadrance = function (v) {
      return function (v1) {
          return $$Math.pow(v.x - v1.x)(2.0) + $$Math.pow(v.y - v1.y)(2.0);
      };
  };
  var players = function (dictStrong) {
      return Data_Lens_Lens.lens(function (v) {
          return v.players;
      })(function (o) {
          return function (x) {
              return {
                  players: x,
                  countdown: o.countdown,
                  items: o.items,
                  map: o.map,
                  rampage: o.rampage,
                  safeZone: o.safeZone
              };
          };
      })(dictStrong);
  };
  var pScore = function (dictStrong) {
      return Data_Lens_Lens.lens(function (v) {
          return v.score;
      })(function (v) {
          return function (s) {
              return Player({
                  position: v.position,
                  direction: v.direction,
                  intendedDirection: v.intendedDirection,
                  score: s,
                  nomIndex: v.nomIndex,
                  respawnCounter: v.respawnCounter
              });
          };
      })(dictStrong);
  };
  var pRespawnCounter = function (dictStrong) {
      return Data_Lens_Lens.lens(function (v) {
          return v.respawnCounter;
      })(function (v) {
          return function (s) {
              return Player({
                  position: v.position,
                  direction: v.direction,
                  intendedDirection: v.intendedDirection,
                  score: v.score,
                  nomIndex: v.nomIndex,
                  respawnCounter: s
              });
          };
      })(dictStrong);
  };
  var pPosition = function (dictStrong) {
      return Data_Lens_Lens.lens(function (v) {
          return v.position;
      })(function (v) {
          return function (pos) {
              return Player({
                  position: pos,
                  direction: v.direction,
                  intendedDirection: v.intendedDirection,
                  score: v.score,
                  nomIndex: v.nomIndex,
                  respawnCounter: v.respawnCounter
              });
          };
      })(dictStrong);
  };
  var pNomIndex = function (dictStrong) {
      return Data_Lens_Lens.lens(function (v) {
          return v.nomIndex;
      })(function (v) {
          return function (s) {
              return Player({
                  position: v.position,
                  direction: v.direction,
                  intendedDirection: v.intendedDirection,
                  score: v.score,
                  nomIndex: s,
                  respawnCounter: v.respawnCounter
              });
          };
      })(dictStrong);
  };
  var pIntendedDirection = function (dictStrong) {
      return Data_Lens_Lens.lens(function (v) {
          return v.intendedDirection;
      })(function (v) {
          return function (dir) {
              return Player({
                  position: v.position,
                  direction: v.direction,
                  intendedDirection: dir,
                  score: v.score,
                  nomIndex: v.nomIndex,
                  respawnCounter: v.respawnCounter
              });
          };
      })(dictStrong);
  };
  var pDirection = function (dictStrong) {
      return Data_Lens_Lens.lens(function (v) {
          return v.direction;
      })(function (v) {
          return function (dir) {
              return Player({
                  position: v.position,
                  direction: dir,
                  intendedDirection: v.intendedDirection,
                  score: v.score,
                  nomIndex: v.nomIndex,
                  respawnCounter: v.respawnCounter
              });
          };
      })(dictStrong);
  };
  var nomIndexMax = 10;
  var mkPlayer = function (pos) {
      return {
          position: pos,
          direction: Data_Maybe.Nothing.value,
          intendedDirection: Data_Maybe.Nothing.value,
          score: 0,
          nomIndex: Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(nomIndexMax)(2),
          respawnCounter: Data_Maybe.Nothing.value
      };
  };
  var matchMessage = function (dictMonad) {
      return function (f) {
          return function (msg) {
              return function (action) {
                  return Data_Maybe.maybe(Control_Applicative.pure(dictMonad.Applicative0())(Data_Unit.unit))(action)(f(msg));
              };
          };
      };
  };
  var items = function (dictStrong) {
      return Data_Lens_Lens.lens(function (v) {
          return v.items;
      })(function (o) {
          return function (x) {
              return {
                  items: x,
                  countdown: o.countdown,
                  map: o.map,
                  players: o.players,
                  rampage: o.rampage,
                  safeZone: o.safeZone
              };
          };
      })(dictStrong);
  };
  var isWall = function (v) {
      if (v instanceof Wall) {
          return true;
      };
      return false;
  };
  var invertReadyState = function (v) {
      if (v instanceof Ready) {
          return NotReady.value;
      };
      if (v instanceof NotReady) {
          return Ready.value;
      };
      throw new Error("Failed pattern match at Types line 483, column 1 - line 483, column 45: " + [ v.constructor.name ]);
  };
  var input_ = Data_Lens_Lens.lens(function (s) {
      return s.input;
  })(function (s) {
      return function (x) {
          var $235 = {};
          for (var $236 in s) {
              if ({}.hasOwnProperty.call(s, $236)) {
                  $235[$236] = s[$236];
              };
          };
          $235.input = x;
          return $235;
      };
  });
  var innerGame = function (dictStrong) {
      return Data_Lens_Lens.lens(function (v) {
          return v;
      })(Data_Function["const"](WrappedGame))(dictStrong);
  };
  var modifyGame = function ($544) {
      return Data_Functor["void"](Control_Monad_Writer_Trans.functorWriterT(Control_Monad_State_Trans.functorStateT(Data_Identity.functorIdentity)))(Control_Monad_State_Class.modify(Control_Monad_Writer_Trans.monadStateWriterT(Data_Monoid.monoidArray)(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity)))(Data_Lens_Setter.over(innerGame(Data_Profunctor_Strong.strongFn))($544)));
  };
  var iType = function (dictStrong) {
      return Data_Lens_Lens.lens(function (v) {
          return v.itemType;
      })(function (v) {
          return function (typ) {
              return Item({
                  position: v.position,
                  itemType: typ
              });
          };
      })(dictStrong);
  };
  var iPosition = function (dictStrong) {
      return Data_Lens_Lens.lens(function (v) {
          return v.position;
      })(function (v) {
          return function (pos) {
              return Item({
                  position: pos,
                  itemType: v.itemType
              });
          };
      })(dictStrong);
  };
  var getGame = Control_Monad_State_Class.gets(Control_Monad_Writer_Trans.monadStateWriterT(Data_Monoid.monoidArray)(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity)))(function (x) {
      return Data_Lens_Getter.viewOn(x)(innerGame(Data_Lens_Internal_Forget.strongForget));
  });
  var genericWrappedGame = new Data_Generic_Rep.Generic(function (x) {
      return x;
  }, function (x) {
      return x;
  });
  var genericWaitingUpdate = new Data_Generic_Rep.Generic(function (x) {
      if (x instanceof GameStarting) {
          return new Data_Generic_Rep.Inl(x.value0);
      };
      if (x instanceof NewReadyStates) {
          return new Data_Generic_Rep.Inr(x.value0);
      };
      throw new Error("Failed pattern match at Types line 506, column 8 - line 506, column 64: " + [ x.constructor.name ]);
  }, function (x) {
      if (x instanceof Data_Generic_Rep.Inl) {
          return new GameStarting(x.value0);
      };
      if (x instanceof Data_Generic_Rep.Inr) {
          return new NewReadyStates(x.value0);
      };
      throw new Error("Failed pattern match at Types line 506, column 8 - line 506, column 64: " + [ x.constructor.name ]);
  });
  var genericTile = new Data_Generic_Rep.Generic(function (x) {
      if (x instanceof Intersection) {
          return new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value);
      };
      if (x instanceof TeeJunctionUp) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value));
      };
      if (x instanceof TeeJunctionRight) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value)));
      };
      if (x instanceof TeeJunctionDown) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value))));
      };
      if (x instanceof TeeJunctionLeft) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value)))));
      };
      if (x instanceof CornerUpRight) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value))))));
      };
      if (x instanceof CornerRightDown) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value)))))));
      };
      if (x instanceof CornerDownLeft) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value))))))));
      };
      if (x instanceof CornerLeftUp) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value)))))))));
      };
      if (x instanceof StraightHorizontal) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value))))))))));
      };
      if (x instanceof StraightVertical) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value)))))))))));
      };
      if (x instanceof Inaccessible) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(Data_Generic_Rep.NoArguments.value)))))))))));
      };
      throw new Error("Failed pattern match at Types line 169, column 8 - line 169, column 46: " + [ x.constructor.name ]);
  }, function (x) {
      if (x instanceof Data_Generic_Rep.Inl) {
          return Intersection.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
          return TeeJunctionUp.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inl)) {
          return TeeJunctionRight.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0 instanceof Data_Generic_Rep.Inl))) {
          return TeeJunctionDown.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))) {
          return TeeJunctionLeft.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl))))) {
          return CornerUpRight.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))))) {
          return CornerRightDown.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl))))))) {
          return CornerDownLeft.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))))))) {
          return CornerLeftUp.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl))))))))) {
          return StraightHorizontal.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))))))))) {
          return StraightVertical.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr)))))))))) {
          return Inaccessible.value;
      };
      throw new Error("Failed pattern match at Types line 169, column 8 - line 169, column 46: " + [ x.constructor.name ]);
  });              
  var genericServerOutgoingMessage = new Data_Generic_Rep.Generic(function (x) {
      if (x instanceof SOWaiting) {
          return new Data_Generic_Rep.Inl(x.value0);
      };
      if (x instanceof SOInProgress) {
          return new Data_Generic_Rep.Inr(x.value0);
      };
      throw new Error("Failed pattern match at Types line 556, column 8 - line 556, column 80: " + [ x.constructor.name ]);
  }, function (x) {
      if (x instanceof Data_Generic_Rep.Inl) {
          return new SOWaiting(x.value0);
      };
      if (x instanceof Data_Generic_Rep.Inr) {
          return new SOInProgress(x.value0);
      };
      throw new Error("Failed pattern match at Types line 556, column 8 - line 556, column 80: " + [ x.constructor.name ]);
  });
  var genericServerIncomingMessage = new Data_Generic_Rep.Generic(function (x) {
      if (x instanceof SIToggleReadyState) {
          return new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value);
      };
      if (x instanceof SIInProgress) {
          return new Data_Generic_Rep.Inr(x.value0);
      };
      throw new Error("Failed pattern match at Types line 570, column 8 - line 570, column 80: " + [ x.constructor.name ]);
  }, function (x) {
      if (x instanceof Data_Generic_Rep.Inl) {
          return SIToggleReadyState.value;
      };
      if (x instanceof Data_Generic_Rep.Inr) {
          return new SIInProgress(x.value0);
      };
      throw new Error("Failed pattern match at Types line 570, column 8 - line 570, column 80: " + [ x.constructor.name ]);
  });
  var genericReadyState = new Data_Generic_Rep.Generic(function (x) {
      if (x instanceof Ready) {
          return new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value);
      };
      if (x instanceof NotReady) {
          return new Data_Generic_Rep.Inr(Data_Generic_Rep.NoArguments.value);
      };
      throw new Error("Failed pattern match at Types line 489, column 8 - line 489, column 58: " + [ x.constructor.name ]);
  }, function (x) {
      if (x instanceof Data_Generic_Rep.Inl) {
          return Ready.value;
      };
      if (x instanceof Data_Generic_Rep.Inr) {
          return NotReady.value;
      };
      throw new Error("Failed pattern match at Types line 489, column 8 - line 489, column 58: " + [ x.constructor.name ]);
  });    
  var genericRampage = new Data_Generic_Rep.Generic(function (x) {
      if (x instanceof Rampaging) {
          return new Data_Generic_Rep.Inl(new Data_Generic_Rep.Product(x.value0, x.value1));
      };
      if (x instanceof Cooldown) {
          return new Data_Generic_Rep.Inr(x.value0);
      };
      throw new Error("Failed pattern match at Types line 456, column 8 - line 456, column 52: " + [ x.constructor.name ]);
  }, function (x) {
      if (x instanceof Data_Generic_Rep.Inl) {
          return new Rampaging(x.value0.value0, x.value0.value1);
      };
      if (x instanceof Data_Generic_Rep.Inr) {
          return new Cooldown(x.value0);
      };
      throw new Error("Failed pattern match at Types line 456, column 8 - line 456, column 52: " + [ x.constructor.name ]);
  });
  var genericPosition = new Data_Generic_Rep.Generic(function (x) {
      return x;
  }, function (x) {
      return x;
  });
  var showPosition = new Data_Show.Show(Data_Generic_Rep_Show.genericShow(genericPosition)(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "x";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "y";
  }))(Data_Show.showRecordFieldsNil)(Data_Show.showNumber))(Data_Show.showNumber))))(new Data_Symbol.IsSymbol(function () {
      return "Position";
  }))));
  var genericPlayerUpdate = new Data_Generic_Rep.Generic(function (x) {
      if (x instanceof ChangedDirection) {
          return new Data_Generic_Rep.Inl(x.value0);
      };
      if (x instanceof ChangedIntendedDirection) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0));
      };
      if (x instanceof ChangedPosition) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0)));
      };
      if (x instanceof ChangedScore) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0))));
      };
      if (x instanceof ChangedNomIndex) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0)))));
      };
      if (x instanceof ChangedRespawnCounter) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0))))));
      };
      if (x instanceof PlayerLeft) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(Data_Generic_Rep.NoArguments.value))))));
      };
      throw new Error("Failed pattern match at Types line 409, column 8 - line 409, column 62: " + [ x.constructor.name ]);
  }, function (x) {
      if (x instanceof Data_Generic_Rep.Inl) {
          return new ChangedDirection(x.value0);
      };
      if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
          return new ChangedIntendedDirection(x.value0.value0);
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inl)) {
          return new ChangedPosition(x.value0.value0.value0);
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0 instanceof Data_Generic_Rep.Inl))) {
          return new ChangedScore(x.value0.value0.value0.value0);
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl)))) {
          return new ChangedNomIndex(x.value0.value0.value0.value0.value0);
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inl))))) {
          return new ChangedRespawnCounter(x.value0.value0.value0.value0.value0.value0);
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0.value0.value0 instanceof Data_Generic_Rep.Inr))))) {
          return PlayerLeft.value;
      };
      throw new Error("Failed pattern match at Types line 409, column 8 - line 409, column 62: " + [ x.constructor.name ]);
  });
  var genericPlayerId = new Data_Generic_Rep.Generic(function (x) {
      if (x instanceof P1) {
          return new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value);
      };
      if (x instanceof P2) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value));
      };
      if (x instanceof P3) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value)));
      };
      if (x instanceof P4) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(Data_Generic_Rep.NoArguments.value)));
      };
      throw new Error("Failed pattern match at Types line 72, column 8 - line 72, column 54: " + [ x.constructor.name ]);
  }, function (x) {
      if (x instanceof Data_Generic_Rep.Inl) {
          return P1.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
          return P2.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inl)) {
          return P3.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inr)) {
          return P4.value;
      };
      throw new Error("Failed pattern match at Types line 72, column 8 - line 72, column 54: " + [ x.constructor.name ]);
  });
  var showPlayerId = new Data_Show.Show(Data_Generic_Rep_Show.genericShow(genericPlayerId)(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
      return "P1";
  })))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
      return "P2";
  })))(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
      return "P3";
  })))(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
      return "P4";
  })))))));
  var genericPlayer = new Data_Generic_Rep.Generic(function (x) {
      return x;
  }, function (x) {
      return x;
  });
  var genericLevelMap = new Data_Generic_Rep.Generic(function (x) {
      return x;
  }, function (x) {
      return x;
  });
  var genericItemUpdate = new Data_Generic_Rep.Generic(function (x) {
      return Data_Generic_Rep.NoArguments.value;
  }, function (x) {
      return Eaten.value;
  });   
  var genericItemType = new Data_Generic_Rep.Generic(function (x) {
      if (x instanceof LittleDot) {
          return new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value);
      };
      if (x instanceof BigDot) {
          return new Data_Generic_Rep.Inr(Data_Generic_Rep.NoArguments.value);
      };
      throw new Error("Failed pattern match at Types line 365, column 8 - line 365, column 54: " + [ x.constructor.name ]);
  }, function (x) {
      if (x instanceof Data_Generic_Rep.Inl) {
          return LittleDot.value;
      };
      if (x instanceof Data_Generic_Rep.Inr) {
          return BigDot.value;
      };
      throw new Error("Failed pattern match at Types line 365, column 8 - line 365, column 54: " + [ x.constructor.name ]);
  });
  var showItemType = new Data_Show.Show(Data_Generic_Rep_Show.genericShow(genericItemType)(Data_Generic_Rep_Show.genericShowSum(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
      return "LittleDot";
  })))(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsNoArguments)(new Data_Symbol.IsSymbol(function () {
      return "BigDot";
  })))));
  var genericItem = new Data_Generic_Rep.Generic(function (x) {
      return x;
  }, function (x) {
      return x;
  });
  var showItem = new Data_Show.Show(Data_Generic_Rep_Show.genericShow(genericItem)(Data_Generic_Rep_Show.genericShowConstructor(Data_Generic_Rep_Show.genericShowArgsArgument(Data_Show.showRecord()(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "itemType";
  }))(Data_Show.showRecordFieldsCons(new Data_Symbol.IsSymbol(function () {
      return "position";
  }))(Data_Show.showRecordFieldsNil)(showPosition))(showItemType))))(new Data_Symbol.IsSymbol(function () {
      return "Item";
  }))));
  var genericGameUpdate = new Data_Generic_Rep.Generic(function (x) {
      if (x instanceof GUPU) {
          return new Data_Generic_Rep.Inl(new Data_Generic_Rep.Product(x.value0, x.value1));
      };
      if (x instanceof GUIU) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(new Data_Generic_Rep.Product(x.value0, x.value1)));
      };
      if (x instanceof ChangedCountdown) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0)));
      };
      if (x instanceof GameEnded) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(x.value0))));
      };
      if (x instanceof ChangedRampage) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(x.value0))));
      };
      throw new Error("Failed pattern match at Types line 471, column 8 - line 471, column 58: " + [ x.constructor.name ]);
  }, function (x) {
      if (x instanceof Data_Generic_Rep.Inl) {
          return new GUPU(x.value0.value0, x.value0.value1);
      };
      if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
          return new GUIU(x.value0.value0.value0, x.value0.value0.value1);
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inl)) {
          return new ChangedCountdown(x.value0.value0.value0);
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0 instanceof Data_Generic_Rep.Inl))) {
          return new GameEnded(x.value0.value0.value0.value0);
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && (x.value0.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0.value0 instanceof Data_Generic_Rep.Inr))) {
          return new ChangedRampage(x.value0.value0.value0.value0);
      };
      throw new Error("Failed pattern match at Types line 471, column 8 - line 471, column 58: " + [ x.constructor.name ]);
  });
  var genericGameEndReason = new Data_Generic_Rep.Generic(function (x) {
      if (x instanceof Completed) {
          return new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value);
      };
      if (x instanceof TooManyPlayersDisconnected) {
          return new Data_Generic_Rep.Inr(Data_Generic_Rep.NoArguments.value);
      };
      throw new Error("Failed pattern match at Types line 440, column 8 - line 440, column 64: " + [ x.constructor.name ]);
  }, function (x) {
      if (x instanceof Data_Generic_Rep.Inl) {
          return Completed.value;
      };
      if (x instanceof Data_Generic_Rep.Inr) {
          return TooManyPlayersDisconnected.value;
      };
      throw new Error("Failed pattern match at Types line 440, column 8 - line 440, column 64: " + [ x.constructor.name ]);
  });    
  var genericDirection = new Data_Generic_Rep.Generic(function (x) {
      if (x instanceof Up) {
          return new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value);
      };
      if (x instanceof Down) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value));
      };
      if (x instanceof Left) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value)));
      };
      if (x instanceof Right) {
          return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(Data_Generic_Rep.NoArguments.value)));
      };
      throw new Error("Failed pattern match at Types line 350, column 8 - line 350, column 56: " + [ x.constructor.name ]);
  }, function (x) {
      if (x instanceof Data_Generic_Rep.Inl) {
          return Up.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
          return Down.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inl)) {
          return Left.value;
      };
      if (x instanceof Data_Generic_Rep.Inr && (x.value0 instanceof Data_Generic_Rep.Inr && x.value0.value0 instanceof Data_Generic_Rep.Inr)) {
          return Right.value;
      };
      throw new Error("Failed pattern match at Types line 350, column 8 - line 350, column 56: " + [ x.constructor.name ]);
  });         
  var genericBlock = new Data_Generic_Rep.Generic(function (x) {
      if (x instanceof Wall) {
          return new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value);
      };
      if (x instanceof Empty) {
          return new Data_Generic_Rep.Inr(Data_Generic_Rep.NoArguments.value);
      };
      throw new Error("Failed pattern match at Types line 140, column 8 - line 140, column 48: " + [ x.constructor.name ]);
  }, function (x) {
      if (x instanceof Data_Generic_Rep.Inl) {
          return Wall.value;
      };
      if (x instanceof Data_Generic_Rep.Inr) {
          return Empty.value;
      };
      throw new Error("Failed pattern match at Types line 140, column 8 - line 140, column 48: " + [ x.constructor.name ]);
  });    
  var game_ = Data_Lens_Lens.lens(function (s) {
      return s.game;
  })(function (s) {
      return function (x) {
          var $466 = {};
          for (var $467 in s) {
              if ({}.hasOwnProperty.call(s, $467)) {
                  $466[$467] = s[$467];
              };
          };
          $466.game = x;
          return $466;
      };
  });
  var execGameUpdateM = function (game) {
      return function (action) {
          return Data_Tuple.snd(runGameUpdateM(game)(action));
      };
  }; 
  var eqReadyState = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Ready && y instanceof Ready) {
              return true;
          };
          if (x instanceof NotReady && y instanceof NotReady) {
              return true;
          };
          return false;
      };
  });
  var eqPosition = new Data_Eq.Eq(function (x) {
      return function (y) {
          return x.x === y.x && x.y === y.y;
      };
  });
  var eqPlayerId = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof P1 && y instanceof P1) {
              return true;
          };
          if (x instanceof P2 && y instanceof P2) {
              return true;
          };
          if (x instanceof P3 && y instanceof P3) {
              return true;
          };
          if (x instanceof P4 && y instanceof P4) {
              return true;
          };
          return false;
      };
  });
  var ordPlayerId = new Data_Ord.Ord(function () {
      return eqPlayerId;
  }, function (x) {
      return function (y) {
          if (x instanceof P1 && y instanceof P1) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof P1) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof P1) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof P2 && y instanceof P2) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof P2) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof P2) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof P3 && y instanceof P3) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof P3) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof P3) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof P4 && y instanceof P4) {
              return Data_Ordering.EQ.value;
          };
          throw new Error("Failed pattern match at Types line 71, column 8 - line 71, column 44: " + [ x.constructor.name, y.constructor.name ]);
      };
  });
  var encodeJsonTile = new Data_Argonaut_Encode_Class.EncodeJson(Data_Argonaut_Encode_Generic_Rep.genericEncodeJson(genericTile)(Data_Argonaut_Encode_Generic_Rep.encodeRepSum(Data_Argonaut_Encode_Generic_Rep.encodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "Intersection";
  }))(Data_Argonaut_Encode_Generic_Rep.encodeRepArgsNoArguments))(Data_Argonaut_Encode_Generic_Rep.encodeRepSum(Data_Argonaut_Encode_Generic_Rep.encodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "TeeJunctionUp";
  }))(Data_Argonaut_Encode_Generic_Rep.encodeRepArgsNoArguments))(Data_Argonaut_Encode_Generic_Rep.encodeRepSum(Data_Argonaut_Encode_Generic_Rep.encodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "TeeJunctionRight";
  }))(Data_Argonaut_Encode_Generic_Rep.encodeRepArgsNoArguments))(Data_Argonaut_Encode_Generic_Rep.encodeRepSum(Data_Argonaut_Encode_Generic_Rep.encodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "TeeJunctionDown";
  }))(Data_Argonaut_Encode_Generic_Rep.encodeRepArgsNoArguments))(Data_Argonaut_Encode_Generic_Rep.encodeRepSum(Data_Argonaut_Encode_Generic_Rep.encodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "TeeJunctionLeft";
  }))(Data_Argonaut_Encode_Generic_Rep.encodeRepArgsNoArguments))(Data_Argonaut_Encode_Generic_Rep.encodeRepSum(Data_Argonaut_Encode_Generic_Rep.encodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "CornerUpRight";
  }))(Data_Argonaut_Encode_Generic_Rep.encodeRepArgsNoArguments))(Data_Argonaut_Encode_Generic_Rep.encodeRepSum(Data_Argonaut_Encode_Generic_Rep.encodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "CornerRightDown";
  }))(Data_Argonaut_Encode_Generic_Rep.encodeRepArgsNoArguments))(Data_Argonaut_Encode_Generic_Rep.encodeRepSum(Data_Argonaut_Encode_Generic_Rep.encodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "CornerDownLeft";
  }))(Data_Argonaut_Encode_Generic_Rep.encodeRepArgsNoArguments))(Data_Argonaut_Encode_Generic_Rep.encodeRepSum(Data_Argonaut_Encode_Generic_Rep.encodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "CornerLeftUp";
  }))(Data_Argonaut_Encode_Generic_Rep.encodeRepArgsNoArguments))(Data_Argonaut_Encode_Generic_Rep.encodeRepSum(Data_Argonaut_Encode_Generic_Rep.encodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "StraightHorizontal";
  }))(Data_Argonaut_Encode_Generic_Rep.encodeRepArgsNoArguments))(Data_Argonaut_Encode_Generic_Rep.encodeRepSum(Data_Argonaut_Encode_Generic_Rep.encodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "StraightVertical";
  }))(Data_Argonaut_Encode_Generic_Rep.encodeRepArgsNoArguments))(Data_Argonaut_Encode_Generic_Rep.encodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "Inaccessible";
  }))(Data_Argonaut_Encode_Generic_Rep.encodeRepArgsNoArguments))))))))))))));
  var encodeJsonReadyState = new Data_Argonaut_Encode_Class.EncodeJson(Data_Argonaut_Encode_Generic_Rep.genericEncodeJson(genericReadyState)(Data_Argonaut_Encode_Generic_Rep.encodeRepSum(Data_Argonaut_Encode_Generic_Rep.encodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "Ready";
  }))(Data_Argonaut_Encode_Generic_Rep.encodeRepArgsNoArguments))(Data_Argonaut_Encode_Generic_Rep.encodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "NotReady";
  }))(Data_Argonaut_Encode_Generic_Rep.encodeRepArgsNoArguments))));
  var encodeJsonPosition = new Data_Argonaut_Encode_Class.EncodeJson(Data_Argonaut_Encode_Generic_Rep.genericEncodeJson(genericPosition)(Data_Argonaut_Encode_Generic_Rep.encodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "Position";
  }))(Data_Argonaut_Encode_Generic_Rep.encodeRepArgsArgument(Data_Argonaut_Encode_Class.encodeRecord(Data_Argonaut_Encode_Class.gEncodeJsonCons(Data_Argonaut_Encode_Class.encodeJsonJNumber)(Data_Argonaut_Encode_Class.gEncodeJsonCons(Data_Argonaut_Encode_Class.encodeJsonJNumber)(Data_Argonaut_Encode_Class.gEncodeJsonNil)(new Data_Symbol.IsSymbol(function () {
      return "y";
  }))())(new Data_Symbol.IsSymbol(function () {
      return "x";
  }))())()))));
  var encodeJsonPlayerId = new Data_Argonaut_Encode_Class.EncodeJson(Data_Argonaut_Encode_Generic_Rep.genericEncodeJson(genericPlayerId)(Data_Argonaut_Encode_Generic_Rep.encodeRepSum(Data_Argonaut_Encode_Generic_Rep.encodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "P1";
  }))(Data_Argonaut_Encode_Generic_Rep.encodeRepArgsNoArguments))(Data_Argonaut_Encode_Generic_Rep.encodeRepSum(Data_Argonaut_Encode_Generic_Rep.encodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "P2";
  }))(Data_Argonaut_Encode_Generic_Rep.encodeRepArgsNoArguments))(Data_Argonaut_Encode_Generic_Rep.encodeRepSum(Data_Argonaut_Encode_Generic_Rep.encodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "P3";
  }))(Data_Argonaut_Encode_Generic_Rep.encodeRepArgsNoArguments))(Data_Argonaut_Encode_Generic_Rep.encodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "P4";
  }))(Data_Argonaut_Encode_Generic_Rep.encodeRepArgsNoArguments))))));
  var encodeJsonRampage = new Data_Argonaut_Encode_Class.EncodeJson(Data_Argonaut_Encode_Generic_Rep.genericEncodeJson(genericRampage)(Data_Argonaut_Encode_Generic_Rep.encodeRepSum(Data_Argonaut_Encode_Generic_Rep.encodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "Rampaging";
  }))(Data_Argonaut_Encode_Generic_Rep.encodeRepArgsProduct(Data_Argonaut_Encode_Generic_Rep.encodeRepArgsArgument(encodeJsonPlayerId))(Data_Argonaut_Encode_Generic_Rep.encodeRepArgsArgument(Data_Argonaut_Encode_Class.encodeJsonInt))))(Data_Argonaut_Encode_Generic_Rep.encodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "Cooldown";
  }))(Data_Argonaut_Encode_Generic_Rep.encodeRepArgsArgument(Data_Argonaut_Encode_Class.encodeJsonInt)))));
  var encodeJsonItemUpdate = new Data_Argonaut_Encode_Class.EncodeJson(Data_Argonaut_Encode_Generic_Rep.genericEncodeJson(genericItemUpdate)(Data_Argonaut_Encode_Generic_Rep.encodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "Eaten";
  }))(Data_Argonaut_Encode_Generic_Rep.encodeRepArgsNoArguments)));
  var encodeJsonItemType = new Data_Argonaut_Encode_Class.EncodeJson(Data_Argonaut_Encode_Generic_Rep.genericEncodeJson(genericItemType)(Data_Argonaut_Encode_Generic_Rep.encodeRepSum(Data_Argonaut_Encode_Generic_Rep.encodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "LittleDot";
  }))(Data_Argonaut_Encode_Generic_Rep.encodeRepArgsNoArguments))(Data_Argonaut_Encode_Generic_Rep.encodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "BigDot";
  }))(Data_Argonaut_Encode_Generic_Rep.encodeRepArgsNoArguments))));
  var encodeJsonItem = new Data_Argonaut_Encode_Class.EncodeJson(Data_Argonaut_Encode_Generic_Rep.genericEncodeJson(genericItem)(Data_Argonaut_Encode_Generic_Rep.encodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "Item";
  }))(Data_Argonaut_Encode_Generic_Rep.encodeRepArgsArgument(Data_Argonaut_Encode_Class.encodeRecord(Data_Argonaut_Encode_Class.gEncodeJsonCons(encodeJsonItemType)(Data_Argonaut_Encode_Class.gEncodeJsonCons(encodeJsonPosition)(Data_Argonaut_Encode_Class.gEncodeJsonNil)(new Data_Symbol.IsSymbol(function () {
      return "position";
  }))())(new Data_Symbol.IsSymbol(function () {
      return "itemType";
  }))())()))));
  var encodeJsonGameEndReason = new Data_Argonaut_Encode_Class.EncodeJson(Data_Argonaut_Encode_Generic_Rep.genericEncodeJson(genericGameEndReason)(Data_Argonaut_Encode_Generic_Rep.encodeRepSum(Data_Argonaut_Encode_Generic_Rep.encodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "Completed";
  }))(Data_Argonaut_Encode_Generic_Rep.encodeRepArgsNoArguments))(Data_Argonaut_Encode_Generic_Rep.encodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "TooManyPlayersDisconnected";
  }))(Data_Argonaut_Encode_Generic_Rep.encodeRepArgsNoArguments))));
  var encodeJsonDirection = new Data_Argonaut_Encode_Class.EncodeJson(Data_Argonaut_Encode_Generic_Rep.genericEncodeJson(genericDirection)(Data_Argonaut_Encode_Generic_Rep.encodeRepSum(Data_Argonaut_Encode_Generic_Rep.encodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "Up";
  }))(Data_Argonaut_Encode_Generic_Rep.encodeRepArgsNoArguments))(Data_Argonaut_Encode_Generic_Rep.encodeRepSum(Data_Argonaut_Encode_Generic_Rep.encodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "Down";
  }))(Data_Argonaut_Encode_Generic_Rep.encodeRepArgsNoArguments))(Data_Argonaut_Encode_Generic_Rep.encodeRepSum(Data_Argonaut_Encode_Generic_Rep.encodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "Left";
  }))(Data_Argonaut_Encode_Generic_Rep.encodeRepArgsNoArguments))(Data_Argonaut_Encode_Generic_Rep.encodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "Right";
  }))(Data_Argonaut_Encode_Generic_Rep.encodeRepArgsNoArguments))))));
  var encodeJsonPlayer = new Data_Argonaut_Encode_Class.EncodeJson(Data_Argonaut_Encode_Generic_Rep.genericEncodeJson(genericPlayer)(Data_Argonaut_Encode_Generic_Rep.encodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "Player";
  }))(Data_Argonaut_Encode_Generic_Rep.encodeRepArgsArgument(Data_Argonaut_Encode_Class.encodeRecord(Data_Argonaut_Encode_Class.gEncodeJsonCons(Data_Argonaut_Encode_Class.encodeJsonMaybe(encodeJsonDirection))(Data_Argonaut_Encode_Class.gEncodeJsonCons(Data_Argonaut_Encode_Class.encodeJsonMaybe(encodeJsonDirection))(Data_Argonaut_Encode_Class.gEncodeJsonCons(Data_Argonaut_Encode_Class.encodeJsonInt)(Data_Argonaut_Encode_Class.gEncodeJsonCons(encodeJsonPosition)(Data_Argonaut_Encode_Class.gEncodeJsonCons(Data_Argonaut_Encode_Class.encodeJsonMaybe(Data_Argonaut_Encode_Class.encodeJsonInt))(Data_Argonaut_Encode_Class.gEncodeJsonCons(Data_Argonaut_Encode_Class.encodeJsonInt)(Data_Argonaut_Encode_Class.gEncodeJsonNil)(new Data_Symbol.IsSymbol(function () {
      return "score";
  }))())(new Data_Symbol.IsSymbol(function () {
      return "respawnCounter";
  }))())(new Data_Symbol.IsSymbol(function () {
      return "position";
  }))())(new Data_Symbol.IsSymbol(function () {
      return "nomIndex";
  }))())(new Data_Symbol.IsSymbol(function () {
      return "intendedDirection";
  }))())(new Data_Symbol.IsSymbol(function () {
      return "direction";
  }))())()))));
  var encodeJsonPlayerUpdate = new Data_Argonaut_Encode_Class.EncodeJson(Data_Argonaut_Encode_Generic_Rep.genericEncodeJson(genericPlayerUpdate)(Data_Argonaut_Encode_Generic_Rep.encodeRepSum(Data_Argonaut_Encode_Generic_Rep.encodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "ChangedDirection";
  }))(Data_Argonaut_Encode_Generic_Rep.encodeRepArgsArgument(Data_Argonaut_Encode_Class.encodeJsonMaybe(encodeJsonDirection))))(Data_Argonaut_Encode_Generic_Rep.encodeRepSum(Data_Argonaut_Encode_Generic_Rep.encodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "ChangedIntendedDirection";
  }))(Data_Argonaut_Encode_Generic_Rep.encodeRepArgsArgument(Data_Argonaut_Encode_Class.encodeJsonMaybe(encodeJsonDirection))))(Data_Argonaut_Encode_Generic_Rep.encodeRepSum(Data_Argonaut_Encode_Generic_Rep.encodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "ChangedPosition";
  }))(Data_Argonaut_Encode_Generic_Rep.encodeRepArgsArgument(encodeJsonPosition)))(Data_Argonaut_Encode_Generic_Rep.encodeRepSum(Data_Argonaut_Encode_Generic_Rep.encodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "ChangedScore";
  }))(Data_Argonaut_Encode_Generic_Rep.encodeRepArgsArgument(Data_Argonaut_Encode_Class.encodeJsonInt)))(Data_Argonaut_Encode_Generic_Rep.encodeRepSum(Data_Argonaut_Encode_Generic_Rep.encodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "ChangedNomIndex";
  }))(Data_Argonaut_Encode_Generic_Rep.encodeRepArgsArgument(Data_Argonaut_Encode_Class.encodeJsonInt)))(Data_Argonaut_Encode_Generic_Rep.encodeRepSum(Data_Argonaut_Encode_Generic_Rep.encodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "ChangedRespawnCounter";
  }))(Data_Argonaut_Encode_Generic_Rep.encodeRepArgsArgument(Data_Argonaut_Encode_Class.encodeJsonMaybe(Data_Argonaut_Encode_Class.encodeJsonInt))))(Data_Argonaut_Encode_Generic_Rep.encodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "PlayerLeft";
  }))(Data_Argonaut_Encode_Generic_Rep.encodeRepArgsNoArguments)))))))));
  var encodeJsonGameUpdate = new Data_Argonaut_Encode_Class.EncodeJson(Data_Argonaut_Encode_Generic_Rep.genericEncodeJson(genericGameUpdate)(Data_Argonaut_Encode_Generic_Rep.encodeRepSum(Data_Argonaut_Encode_Generic_Rep.encodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "GUPU";
  }))(Data_Argonaut_Encode_Generic_Rep.encodeRepArgsProduct(Data_Argonaut_Encode_Generic_Rep.encodeRepArgsArgument(encodeJsonPlayerId))(Data_Argonaut_Encode_Generic_Rep.encodeRepArgsArgument(encodeJsonPlayerUpdate))))(Data_Argonaut_Encode_Generic_Rep.encodeRepSum(Data_Argonaut_Encode_Generic_Rep.encodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "GUIU";
  }))(Data_Argonaut_Encode_Generic_Rep.encodeRepArgsProduct(Data_Argonaut_Encode_Generic_Rep.encodeRepArgsArgument(Data_Argonaut_Encode_Class.encodeJsonInt))(Data_Argonaut_Encode_Generic_Rep.encodeRepArgsArgument(encodeJsonItemUpdate))))(Data_Argonaut_Encode_Generic_Rep.encodeRepSum(Data_Argonaut_Encode_Generic_Rep.encodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "ChangedCountdown";
  }))(Data_Argonaut_Encode_Generic_Rep.encodeRepArgsArgument(Data_Argonaut_Encode_Class.encodeJsonMaybe(Data_Argonaut_Encode_Class.encodeJsonInt))))(Data_Argonaut_Encode_Generic_Rep.encodeRepSum(Data_Argonaut_Encode_Generic_Rep.encodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "GameEnded";
  }))(Data_Argonaut_Encode_Generic_Rep.encodeRepArgsArgument(encodeJsonGameEndReason)))(Data_Argonaut_Encode_Generic_Rep.encodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "ChangedRampage";
  }))(Data_Argonaut_Encode_Generic_Rep.encodeRepArgsArgument(Data_Argonaut_Encode_Class.encodeJsonMaybe(encodeJsonRampage)))))))));
  var encodeJsonBlock = new Data_Argonaut_Encode_Class.EncodeJson(Data_Argonaut_Encode_Generic_Rep.genericEncodeJson(genericBlock)(Data_Argonaut_Encode_Generic_Rep.encodeRepSum(Data_Argonaut_Encode_Generic_Rep.encodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "Wall";
  }))(Data_Argonaut_Encode_Generic_Rep.encodeRepArgsNoArguments))(Data_Argonaut_Encode_Generic_Rep.encodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "Empty";
  }))(Data_Argonaut_Encode_Generic_Rep.encodeRepArgsNoArguments))));
  var encodeJsonWrappedLevelMap = new Data_Argonaut_Encode_Class.EncodeJson(Data_Argonaut_Encode_Generic_Rep.genericEncodeJson(genericLevelMap)(Data_Argonaut_Encode_Generic_Rep.encodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "WrappedLevelMap";
  }))(Data_Argonaut_Encode_Generic_Rep.encodeRepArgsArgument(Data_Argonaut_Encode_Class.encodeRecord(Data_Argonaut_Encode_Class.gEncodeJsonCons(Data_Argonaut_Encode_Class.encodeJsonArray(Data_Argonaut_Encode_Class.encodeJsonArray(encodeJsonBlock)))(Data_Argonaut_Encode_Class.gEncodeJsonCons(Data_Argonaut_Encode_Class.encodeJsonArray(Data_Argonaut_Encode_Class.encodeJsonArray(encodeJsonTile)))(Data_Argonaut_Encode_Class.gEncodeJsonNil)(new Data_Symbol.IsSymbol(function () {
      return "tiles";
  }))())(new Data_Symbol.IsSymbol(function () {
      return "blocks";
  }))())()))));
  var encodeJsonWrappedGame = new Data_Argonaut_Encode_Class.EncodeJson(Data_Argonaut_Encode_Generic_Rep.genericEncodeJson(genericWrappedGame)(Data_Argonaut_Encode_Generic_Rep.encodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "WrappedGame";
  }))(Data_Argonaut_Encode_Generic_Rep.encodeRepArgsArgument(Data_Argonaut_Encode_Class.encodeRecord(Data_Argonaut_Encode_Class.gEncodeJsonCons(Data_Argonaut_Encode_Class.encodeJsonMaybe(Data_Argonaut_Encode_Class.encodeJsonInt))(Data_Argonaut_Encode_Class.gEncodeJsonCons(Data_Argonaut_Encode_Class.encodeMap(Data_Ord.ordInt)(Data_Argonaut_Encode_Class.encodeJsonInt)(encodeJsonItem))(Data_Argonaut_Encode_Class.gEncodeJsonCons(encodeJsonWrappedLevelMap)(Data_Argonaut_Encode_Class.gEncodeJsonCons(Data_Argonaut_Encode_Class.encodeMap(ordPlayerId)(encodeJsonPlayerId)(encodeJsonPlayer))(Data_Argonaut_Encode_Class.gEncodeJsonCons(Data_Argonaut_Encode_Class.encodeJsonMaybe(encodeJsonRampage))(Data_Argonaut_Encode_Class.gEncodeJsonCons(Data_Argonaut_Encode_Class.encodeJsonArray(encodeJsonPosition))(Data_Argonaut_Encode_Class.gEncodeJsonNil)(new Data_Symbol.IsSymbol(function () {
      return "safeZone";
  }))())(new Data_Symbol.IsSymbol(function () {
      return "rampage";
  }))())(new Data_Symbol.IsSymbol(function () {
      return "players";
  }))())(new Data_Symbol.IsSymbol(function () {
      return "map";
  }))())(new Data_Symbol.IsSymbol(function () {
      return "items";
  }))())(new Data_Symbol.IsSymbol(function () {
      return "countdown";
  }))())()))));
  var encodeJsonWaitingUpdate = new Data_Argonaut_Encode_Class.EncodeJson(Data_Argonaut_Encode_Generic_Rep.genericEncodeJson(genericWaitingUpdate)(Data_Argonaut_Encode_Generic_Rep.encodeRepSum(Data_Argonaut_Encode_Generic_Rep.encodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "GameStarting";
  }))(Data_Argonaut_Encode_Generic_Rep.encodeRepArgsArgument(encodeJsonWrappedGame)))(Data_Argonaut_Encode_Generic_Rep.encodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "NewReadyStates";
  }))(Data_Argonaut_Encode_Generic_Rep.encodeRepArgsArgument(Data_Argonaut_Encode_Class.encodeMap(ordPlayerId)(encodeJsonPlayerId)(encodeJsonReadyState))))));
  var eachPlayer$prime = function (dictApplicative) {
      return function (game) {
          return function (action) {
              var ps = Data_Map_Internal.toUnfoldable(Data_Unfoldable.unfoldableArray)(Data_Lens_Getter.viewOn(game)(players(Data_Lens_Internal_Forget.strongForget)));
              return Data_Foldable.for_(dictApplicative)(Data_Foldable.foldableArray)(ps)(Data_Tuple.uncurry(action));
          };
      };
  };
  var eachPlayer = function (action) {
      return Control_Bind.bind(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity)))(getGame)(function (v) {
          return eachPlayer$prime(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity)))(v)(action);
      });
  };
  var displayPlayerId = function (x) {
      if (x instanceof P1) {
          return "P1";
      };
      if (x instanceof P2) {
          return "P2";
      };
      if (x instanceof P3) {
          return "P3";
      };
      if (x instanceof P4) {
          return "P4";
      };
      throw new Error("Failed pattern match at Types line 83, column 3 - line 89, column 1: " + [ x.constructor.name ]);
  };
  var dirToPos = function (v) {
      if (v instanceof Up) {
          return {
              x: 0.0,
              y: -1.0
          };
      };
      if (v instanceof Left) {
          return {
              x: -1.0,
              y: 0.0
          };
      };
      if (v instanceof Right) {
          return {
              x: 1.0,
              y: 0.0
          };
      };
      if (v instanceof Down) {
          return {
              x: 0.0,
              y: 1.0
          };
      };
      throw new Error("Failed pattern match at Types line 376, column 1 - line 376, column 34: " + [ v.constructor.name ]);
  };                                                                
  var decodeJsonDirection = new Data_Argonaut_Decode_Class.DecodeJson(Data_Argonaut_Decode_Generic_Rep.genericDecodeJson(genericDirection)(Data_Argonaut_Decode_Generic_Rep.decodeRepSum(Data_Argonaut_Decode_Generic_Rep.decodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "Up";
  }))(Data_Argonaut_Decode_Generic_Rep.decodeRepArgsNoArguments))(Data_Argonaut_Decode_Generic_Rep.decodeRepSum(Data_Argonaut_Decode_Generic_Rep.decodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "Down";
  }))(Data_Argonaut_Decode_Generic_Rep.decodeRepArgsNoArguments))(Data_Argonaut_Decode_Generic_Rep.decodeRepSum(Data_Argonaut_Decode_Generic_Rep.decodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "Left";
  }))(Data_Argonaut_Decode_Generic_Rep.decodeRepArgsNoArguments))(Data_Argonaut_Decode_Generic_Rep.decodeRepConstructor(new Data_Symbol.IsSymbol(function () {
      return "Right";
  }))(Data_Argonaut_Decode_Generic_Rep.decodeRepArgsNoArguments))))));
  var asWaitingMessage = function (v) {
      if (v instanceof SIToggleReadyState) {
          return new Data_Maybe.Just(Data_Unit.unit);
      };
      return Data_Maybe.Nothing.value;
  };
  var asInProgressMessage = function (v) {
      if (v instanceof SIInProgress) {
          return new Data_Maybe.Just(v.value0);
      };
      return Data_Maybe.Nothing.value;
  };
  var allPlayerIds = [ P1.value, P2.value, P3.value, P4.value ];
  var addPos = function (v) {
      return function (v1) {
          return {
              x: v.x + v1.x,
              y: v.y + v1.y
          };
      };
  };
  exports["WrappedGame"] = WrappedGame;
  exports["P1"] = P1;
  exports["P2"] = P2;
  exports["P3"] = P3;
  exports["P4"] = P4;
  exports["displayPlayerId"] = displayPlayerId;
  exports["allPlayerIds"] = allPlayerIds;
  exports["Wall"] = Wall;
  exports["Empty"] = Empty;
  exports["Intersection"] = Intersection;
  exports["TeeJunctionUp"] = TeeJunctionUp;
  exports["TeeJunctionRight"] = TeeJunctionRight;
  exports["TeeJunctionDown"] = TeeJunctionDown;
  exports["TeeJunctionLeft"] = TeeJunctionLeft;
  exports["CornerUpRight"] = CornerUpRight;
  exports["CornerRightDown"] = CornerRightDown;
  exports["CornerDownLeft"] = CornerDownLeft;
  exports["CornerLeftUp"] = CornerLeftUp;
  exports["StraightHorizontal"] = StraightHorizontal;
  exports["StraightVertical"] = StraightVertical;
  exports["Inaccessible"] = Inaccessible;
  exports["isWall"] = isWall;
  exports["showRecord"] = showRecord;
  exports["addPos"] = addPos;
  exports["quadrance"] = quadrance;
  exports["Player"] = Player;
  exports["nomIndexMax"] = nomIndexMax;
  exports["mkPlayer"] = mkPlayer;
  exports["players"] = players;
  exports["items"] = items;
  exports["pPosition"] = pPosition;
  exports["pDirection"] = pDirection;
  exports["pIntendedDirection"] = pIntendedDirection;
  exports["pScore"] = pScore;
  exports["pNomIndex"] = pNomIndex;
  exports["pRespawnCounter"] = pRespawnCounter;
  exports["eachPlayer"] = eachPlayer;
  exports["Item"] = Item;
  exports["iType"] = iType;
  exports["iPosition"] = iPosition;
  exports["Up"] = Up;
  exports["Down"] = Down;
  exports["Left"] = Left;
  exports["Right"] = Right;
  exports["LittleDot"] = LittleDot;
  exports["BigDot"] = BigDot;
  exports["dirToPos"] = dirToPos;
  exports["ChangedDirection"] = ChangedDirection;
  exports["ChangedIntendedDirection"] = ChangedIntendedDirection;
  exports["ChangedPosition"] = ChangedPosition;
  exports["ChangedScore"] = ChangedScore;
  exports["ChangedNomIndex"] = ChangedNomIndex;
  exports["ChangedRespawnCounter"] = ChangedRespawnCounter;
  exports["PlayerLeft"] = PlayerLeft;
  exports["Eaten"] = Eaten;
  exports["Completed"] = Completed;
  exports["TooManyPlayersDisconnected"] = TooManyPlayersDisconnected;
  exports["Rampaging"] = Rampaging;
  exports["Cooldown"] = Cooldown;
  exports["GUPU"] = GUPU;
  exports["GUIU"] = GUIU;
  exports["ChangedCountdown"] = ChangedCountdown;
  exports["GameEnded"] = GameEnded;
  exports["ChangedRampage"] = ChangedRampage;
  exports["Ready"] = Ready;
  exports["NotReady"] = NotReady;
  exports["invertReadyState"] = invertReadyState;
  exports["GameStarting"] = GameStarting;
  exports["NewReadyStates"] = NewReadyStates;
  exports["innerGame"] = innerGame;
  exports["tellGameUpdate"] = tellGameUpdate;
  exports["modifyGame"] = modifyGame;
  exports["getGame"] = getGame;
  exports["runGameUpdateM"] = runGameUpdateM;
  exports["execGameUpdateM"] = execGameUpdateM;
  exports["input_"] = input_;
  exports["game_"] = game_;
  exports["WaitingForPlayers"] = WaitingForPlayers;
  exports["InProgress"] = InProgress;
  exports["SOWaiting"] = SOWaiting;
  exports["SOInProgress"] = SOInProgress;
  exports["SIToggleReadyState"] = SIToggleReadyState;
  exports["SIInProgress"] = SIInProgress;
  exports["asWaitingMessage"] = asWaitingMessage;
  exports["asInProgressMessage"] = asInProgressMessage;
  exports["matchMessage"] = matchMessage;
  exports["genericWrappedGame"] = genericWrappedGame;
  exports["encodeJsonWrappedGame"] = encodeJsonWrappedGame;
  exports["eqPlayerId"] = eqPlayerId;
  exports["ordPlayerId"] = ordPlayerId;
  exports["genericPlayerId"] = genericPlayerId;
  exports["encodeJsonPlayerId"] = encodeJsonPlayerId;
  exports["showPlayerId"] = showPlayerId;
  exports["genericLevelMap"] = genericLevelMap;
  exports["encodeJsonWrappedLevelMap"] = encodeJsonWrappedLevelMap;
  exports["genericBlock"] = genericBlock;
  exports["encodeJsonBlock"] = encodeJsonBlock;
  exports["genericTile"] = genericTile;
  exports["encodeJsonTile"] = encodeJsonTile;
  exports["eqPosition"] = eqPosition;
  exports["genericPosition"] = genericPosition;
  exports["showPosition"] = showPosition;
  exports["encodeJsonPosition"] = encodeJsonPosition;
  exports["genericPlayer"] = genericPlayer;
  exports["encodeJsonPlayer"] = encodeJsonPlayer;
  exports["genericItem"] = genericItem;
  exports["encodeJsonItem"] = encodeJsonItem;
  exports["showItem"] = showItem;
  exports["genericDirection"] = genericDirection;
  exports["encodeJsonDirection"] = encodeJsonDirection;
  exports["decodeJsonDirection"] = decodeJsonDirection;
  exports["genericItemType"] = genericItemType;
  exports["encodeJsonItemType"] = encodeJsonItemType;
  exports["showItemType"] = showItemType;
  exports["genericPlayerUpdate"] = genericPlayerUpdate;
  exports["encodeJsonPlayerUpdate"] = encodeJsonPlayerUpdate;
  exports["genericItemUpdate"] = genericItemUpdate;
  exports["encodeJsonItemUpdate"] = encodeJsonItemUpdate;
  exports["genericGameEndReason"] = genericGameEndReason;
  exports["encodeJsonGameEndReason"] = encodeJsonGameEndReason;
  exports["genericRampage"] = genericRampage;
  exports["encodeJsonRampage"] = encodeJsonRampage;
  exports["genericGameUpdate"] = genericGameUpdate;
  exports["encodeJsonGameUpdate"] = encodeJsonGameUpdate;
  exports["eqReadyState"] = eqReadyState;
  exports["genericReadyState"] = genericReadyState;
  exports["encodeJsonReadyState"] = encodeJsonReadyState;
  exports["genericWaitingUpdate"] = genericWaitingUpdate;
  exports["encodeJsonWaitingUpdate"] = encodeJsonWaitingUpdate;
  exports["genericServerOutgoingMessage"] = genericServerOutgoingMessage;
  exports["genericServerIncomingMessage"] = genericServerIncomingMessage;
})(PS["Types"] = PS["Types"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Generic_Rep = PS["Data.Generic.Rep"];
  var Data_Map = PS["Data.Map"];
  var Data_Maybe = PS["Data.Maybe"];
  var Prelude = PS["Prelude"];
  var Types = PS["Types"];                 
  var NewPlayer = (function () {
      function NewPlayer(value0) {
          this.value0 = value0;
      };
      NewPlayer.create = function (value0) {
          return new NewPlayer(value0);
      };
      return NewPlayer;
  })();
  var YourPlayerIdIs = (function () {
      function YourPlayerIdIs(value0) {
          this.value0 = value0;
      };
      YourPlayerIdIs.create = function (value0) {
          return new YourPlayerIdIs(value0);
      };
      return YourPlayerIdIs;
  })();
  var genericInternalMessage = new Data_Generic_Rep.Generic(function (x) {
      if (x instanceof NewPlayer) {
          return new Data_Generic_Rep.Inl(x.value0);
      };
      if (x instanceof YourPlayerIdIs) {
          return new Data_Generic_Rep.Inr(x.value0);
      };
      throw new Error("Failed pattern match at BaseCommon line 15, column 8 - line 15, column 67: " + [ x.constructor.name ]);
  }, function (x) {
      if (x instanceof Data_Generic_Rep.Inl) {
          return new NewPlayer(x.value0);
      };
      if (x instanceof Data_Generic_Rep.Inr) {
          return new YourPlayerIdIs(x.value0);
      };
      throw new Error("Failed pattern match at BaseCommon line 15, column 8 - line 15, column 67: " + [ x.constructor.name ]);
  });
  exports["NewPlayer"] = NewPlayer;
  exports["YourPlayerIdIs"] = YourPlayerIdIs;
  exports["genericInternalMessage"] = genericInternalMessage;
})(PS["BaseCommon"] = PS["BaseCommon"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Effect_Class = PS["Effect.Class"];
  var Prelude = PS["Prelude"];                 
  var RWSResult = (function () {
      function RWSResult(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      RWSResult.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new RWSResult(value0, value1, value2);
              };
          };
      };
      return RWSResult;
  })();
  var functorRWST = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return function (v) {
              return function (r) {
                  return function (s) {
                      return Data_Functor.map(dictFunctor)(function (v1) {
                          return new RWSResult(v1.value0, f(v1.value1), v1.value2);
                      })(v(r)(s));
                  };
              };
          };
      });
  };
  var applyRWST = function (dictBind) {
      return function (dictMonoid) {
          return new Control_Apply.Apply(function () {
              return functorRWST((dictBind.Apply0()).Functor0());
          }, function (v) {
              return function (v1) {
                  return function (r) {
                      return function (s) {
                          return Control_Bind.bind(dictBind)(v(r)(s))(function (v2) {
                              return Data_Functor.mapFlipped((dictBind.Apply0()).Functor0())(v1(r)(v2.value0))(function (v3) {
                                  return new RWSResult(v3.value0, v2.value1(v3.value1), Data_Semigroup.append(dictMonoid.Semigroup0())(v2.value2)(v3.value2));
                              });
                          });
                      };
                  };
              };
          });
      };
  };
  var bindRWST = function (dictBind) {
      return function (dictMonoid) {
          return new Control_Bind.Bind(function () {
              return applyRWST(dictBind)(dictMonoid);
          }, function (v) {
              return function (f) {
                  return function (r) {
                      return function (s) {
                          return Control_Bind.bind(dictBind)(v(r)(s))(function (v1) {
                              var v2 = f(v1.value1);
                              return Data_Functor.mapFlipped((dictBind.Apply0()).Functor0())(v2(r)(v1.value0))(function (v3) {
                                  return new RWSResult(v3.value0, v3.value1, Data_Semigroup.append(dictMonoid.Semigroup0())(v1.value2)(v3.value2));
                              });
                          });
                      };
                  };
              };
          });
      };
  };
  var applicativeRWST = function (dictMonad) {
      return function (dictMonoid) {
          return new Control_Applicative.Applicative(function () {
              return applyRWST(dictMonad.Bind1())(dictMonoid);
          }, function (a) {
              return function (v) {
                  return function (s) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(new RWSResult(s, a, Data_Monoid.mempty(dictMonoid)));
                  };
              };
          });
      };
  };
  var monadRWST = function (dictMonad) {
      return function (dictMonoid) {
          return new Control_Monad.Monad(function () {
              return applicativeRWST(dictMonad)(dictMonoid);
          }, function () {
              return bindRWST(dictMonad.Bind1())(dictMonoid);
          });
      };
  };
  var monadAskRWST = function (dictMonad) {
      return function (dictMonoid) {
          return new Control_Monad_Reader_Class.MonadAsk(function () {
              return monadRWST(dictMonad)(dictMonoid);
          }, function (r) {
              return function (s) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(new RWSResult(s, r, Data_Monoid.mempty(dictMonoid)));
              };
          });
      };
  };
  var monadReaderRWST = function (dictMonad) {
      return function (dictMonoid) {
          return new Control_Monad_Reader_Class.MonadReader(function () {
              return monadAskRWST(dictMonad)(dictMonoid);
          }, function (f) {
              return function (m) {
                  return function (r) {
                      return function (s) {
                          return m(f(r))(s);
                      };
                  };
              };
          });
      };
  };
  var monadStateRWST = function (dictMonad) {
      return function (dictMonoid) {
          return new Control_Monad_State_Class.MonadState(function () {
              return monadRWST(dictMonad)(dictMonoid);
          }, function (f) {
              return function (v) {
                  return function (s) {
                      var v1 = f(s);
                      return Control_Applicative.pure(dictMonad.Applicative0())(new RWSResult(v1.value1, v1.value0, Data_Monoid.mempty(dictMonoid)));
                  };
              };
          });
      };
  };
  var monadTellRWST = function (dictMonad) {
      return function (dictMonoid) {
          return new Control_Monad_Writer_Class.MonadTell(function () {
              return monadRWST(dictMonad)(dictMonoid);
          }, function (w) {
              return function (v) {
                  return function (s) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(new RWSResult(s, Data_Unit.unit, w));
                  };
              };
          });
      };
  };
  var monadWriterRWST = function (dictMonad) {
      return function (dictMonoid) {
          return new Control_Monad_Writer_Class.MonadWriter(function () {
              return monadTellRWST(dictMonad)(dictMonoid);
          }, function (m) {
              return function (r) {
                  return function (s) {
                      return Control_Bind.bind(dictMonad.Bind1())(m(r)(s))(function (v) {
                          return Control_Applicative.pure(dictMonad.Applicative0())(new RWSResult(v.value0, new Data_Tuple.Tuple(v.value1, v.value2), v.value2));
                      });
                  };
              };
          }, function (m) {
              return function (r) {
                  return function (s) {
                      return Control_Bind.bind(dictMonad.Bind1())(m(r)(s))(function (v) {
                          return Control_Applicative.pure(dictMonad.Applicative0())(new RWSResult(v.value0, v.value1.value0, v.value1.value1(v.value2)));
                      });
                  };
              };
          });
      };
  };
  exports["RWSResult"] = RWSResult;
  exports["functorRWST"] = functorRWST;
  exports["applyRWST"] = applyRWST;
  exports["bindRWST"] = bindRWST;
  exports["applicativeRWST"] = applicativeRWST;
  exports["monadRWST"] = monadRWST;
  exports["monadAskRWST"] = monadAskRWST;
  exports["monadReaderRWST"] = monadReaderRWST;
  exports["monadStateRWST"] = monadStateRWST;
  exports["monadTellRWST"] = monadTellRWST;
  exports["monadWriterRWST"] = monadWriterRWST;
})(PS["Control.Monad.RWS.Trans"] = PS["Control.Monad.RWS.Trans"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Monad_RWS_Trans = PS["Control.Monad.RWS.Trans"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];
  var runRWS = function (m) {
      return function (r) {
          return function (s) {
              var v = m(r)(s);
              return v;
          };
      };
  };
  exports["runRWS"] = runRWS;
})(PS["Control.Monad.RWS"] = PS["Control.Monad.RWS"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array = PS["Data.Array"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Lens_Internal_Wander = PS["Data.Lens.Internal.Wander"];
  var Data_Lens_Types = PS["Data.Lens.Types"];
  var Data_Map = PS["Data.Map"];
  var Data_Map_Internal = PS["Data.Map.Internal"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Set = PS["Data.Set"];
  var Data_Traversable = PS["Data.Traversable"];
  var Foreign_Object = PS["Foreign.Object"];
  var Prelude = PS["Prelude"];                 
  var Index = function (ix) {
      this.ix = ix;
  };
  var ix = function (dict) {
      return dict.ix;
  }; 
  var indexMap = function (dictOrd) {
      return new Index(function (k) {
          return function (dictWander) {
              return Data_Lens_Internal_Wander.wander(dictWander)(function (dictApplicative) {
                  return function (coalg) {
                      return function (m) {
                          return Data_Maybe.maybe(Control_Applicative.pure(dictApplicative)(m))(function ($21) {
                              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(function (v) {
                                  return Data_Map_Internal.insert(dictOrd)(k)(v)(m);
                              })(coalg($21));
                          })(Data_Map_Internal.lookup(dictOrd)(k)(m));
                      };
                  };
              });
          };
      });
  };
  exports["Index"] = Index;
  exports["ix"] = ix;
  exports["indexMap"] = indexMap;
})(PS["Data.Lens.Index"] = PS["Data.Lens.Index"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Lens = PS["Data.Lens"];
  var Data_Lens_Index = PS["Data.Lens.Index"];
  var Data_Lens_Lens = PS["Data.Lens.Lens"];
  var Data_Map = PS["Data.Map"];
  var Data_Map_Internal = PS["Data.Map.Internal"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Set = PS["Data.Set"];
  var Data_Unit = PS["Data.Unit"];
  var Foreign_Object = PS["Foreign.Object"];
  var Prelude = PS["Prelude"];                 
  var At = function (Index0, at) {
      this.Index0 = Index0;
      this.at = at;
  }; 
  var atMap = function (dictOrd) {
      return new At(function () {
          return Data_Lens_Index.indexMap(dictOrd);
      }, function (k) {
          return function (dictStrong) {
              return Data_Lens_Lens.lens(Data_Map_Internal.lookup(dictOrd)(k))(function (m) {
                  return Data_Maybe.maybe(Data_Map_Internal["delete"](dictOrd)(k)(m))(function (v) {
                      return Data_Map_Internal.insert(dictOrd)(k)(v)(m);
                  });
              })(dictStrong);
          };
      });
  }; 
  var at = function (dict) {
      return dict.at;
  };
  exports["At"] = At;
  exports["at"] = at;
  exports["atMap"] = atMap;
})(PS["Data.Lens.At"] = PS["Data.Lens.At"] || {});
(function(exports) {
    "use strict";

  exports.log = function (s) {
    return function () {
      console.log(s);
      return {};
    };
  };
})(PS["Effect.Console"] = PS["Effect.Console"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Effect.Console"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Effect = PS["Effect"];
  exports["log"] = $foreign.log;
})(PS["Effect.Console"] = PS["Effect.Console"] || {});
(function(exports) {
  /* globals exports, JSON */
  "use strict";                       
  exports.unsafeEncodeURI = encodeURI;
  exports.unsafeDecodeURIComponent = decodeURIComponent;
})(PS["Global.Unsafe"] = PS["Global.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Global.Unsafe"];
  exports["unsafeEncodeURI"] = $foreign.unsafeEncodeURI;
  exports["unsafeDecodeURIComponent"] = $foreign.unsafeDecodeURIComponent;
})(PS["Global.Unsafe"] = PS["Global.Unsafe"] || {});
(function(exports) {// module NodeWebSocket

  exports.mkServer = function() {
    var WebSocketServer = require('websocket').server
    return new WebSocketServer()
  };

  exports.registerEventHandlerUnsafe = function(receiver, method, msgType, callback, transform) {
    return function() {
      receiver[method](msgType, function(param) {
        callback(transform(param))()
      })
    }
  }

  exports.getMessageData = function(msg) {
    if (msg.type == 'utf8') {
      return msg.utf8Data
    } else if (msg.type == 'binary') {
      throw new Error('unhandled websocket message type: binary')
    }
  }

  exports.reject = function(request) {
    return function() {
      request.reject()
    }
  }

  exports.accept = function(request) {
    return function() {
      return request.accept(null, request.origin)
    }
  }

  exports.resourceUrl = function(request) {
    return request.resourceURL;
  }

  exports.sendImpl = function(conn, msg) {
    return function() {
      conn.sendUTF(msg)
    }
  }

  exports.mountImpl = function(wsServer, httpServer) {
    return function() {
      wsServer.mount({httpServer: httpServer})
    }
  }

  exports.close = function(conn) {
    return function() {
      conn.close()
    }
  }
})(PS["NodeWebSocket"] = PS["NodeWebSocket"] || {});
(function(exports) {
    "use strict";
  var http =require("http"); 

  exports.createServer = function (handleRequest) {
    return function () {
      return http.createServer(function (req, res) {
        handleRequest(req)(res)();
      });
    };
  };

  exports.listenImpl = function (server) {
    return function (port) {
      return function (hostname) {
        return function (backlog) {
          return function (done) {
            return function () {
              if (backlog !== null) {
                server.listen(port, hostname, backlog, done);
              } else {
                server.listen(port, hostname, done);
              }
            };
          };
        };
      };
    };
  };

  exports.setHeader = function (res) {
    return function (key) {
      return function (value) {
        return function () {
          res.setHeader(key, value);
        };
      };
    };
  };

  exports.setStatusCode = function (res) {
    return function (code) {
      return function () {
        res.statusCode = code;
      };
    };
  };
})(PS["Node.HTTP"] = PS["Node.HTTP"] || {});
(function(exports) {
    "use strict";

  exports["null"] = null;

  exports.notNull = function (x) {
    return x;
  };
})(PS["Data.Nullable"] = PS["Data.Nullable"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Nullable"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];                 
  var toNullable = Data_Maybe.maybe($foreign["null"])($foreign.notNull);
  exports["toNullable"] = toNullable;
})(PS["Data.Nullable"] = PS["Data.Nullable"] || {});
(function(exports) {
    "use strict";

  exports.write = function (w) {
    return function (chunk) {
      return function (done) {
        return function () {
          return w.write(chunk, null, done);
        };
      };
    };
  };

  exports.writeStringImpl = function (w) {
    return function (enc) {
      return function (s) {
        return function (done) {
          return function () {
            return w.write(s, enc, done);
          };
        };
      };
    };
  };

  exports.end = function (w) {
    return function (done) {
      return function () {
        w.end(null, null, function () {
          done();
        });
      };
    };
  };
})(PS["Node.Stream"] = PS["Node.Stream"] || {});
(function(exports) {
    "use strict";

  exports.error = function (msg) {
    return new Error(msg);
  };

  exports.message = function (e) {
    return e.message;
  };

  exports.throwException = function (e) {
    return function () {
      throw e;
    };
  };
})(PS["Effect.Exception"] = PS["Effect.Exception"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Effect.Exception"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Show = PS["Data.Show"];
  var Effect = PS["Effect"];
  var Prelude = PS["Prelude"];
  var $$throw = function ($1) {
      return $foreign.throwException($foreign.error($1));
  };
  exports["throw"] = $$throw;
  exports["error"] = $foreign.error;
  exports["message"] = $foreign.message;
  exports["throwException"] = $foreign.throwException;
})(PS["Effect.Exception"] = PS["Effect.Exception"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Node.Encoding"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];                 
  var ASCII = (function () {
      function ASCII() {

      };
      ASCII.value = new ASCII();
      return ASCII;
  })();
  var UTF8 = (function () {
      function UTF8() {

      };
      UTF8.value = new UTF8();
      return UTF8;
  })();
  var UTF16LE = (function () {
      function UTF16LE() {

      };
      UTF16LE.value = new UTF16LE();
      return UTF16LE;
  })();
  var UCS2 = (function () {
      function UCS2() {

      };
      UCS2.value = new UCS2();
      return UCS2;
  })();
  var Base64 = (function () {
      function Base64() {

      };
      Base64.value = new Base64();
      return Base64;
  })();
  var Latin1 = (function () {
      function Latin1() {

      };
      Latin1.value = new Latin1();
      return Latin1;
  })();
  var Binary = (function () {
      function Binary() {

      };
      Binary.value = new Binary();
      return Binary;
  })();
  var Hex = (function () {
      function Hex() {

      };
      Hex.value = new Hex();
      return Hex;
  })();
  var showEncoding = new Data_Show.Show(function (v) {
      if (v instanceof ASCII) {
          return "ASCII";
      };
      if (v instanceof UTF8) {
          return "UTF8";
      };
      if (v instanceof UTF16LE) {
          return "UTF16LE";
      };
      if (v instanceof UCS2) {
          return "UCS2";
      };
      if (v instanceof Base64) {
          return "Base64";
      };
      if (v instanceof Latin1) {
          return "Latin1";
      };
      if (v instanceof Binary) {
          return "Binary";
      };
      if (v instanceof Hex) {
          return "Hex";
      };
      throw new Error("Failed pattern match at Node.Encoding line 19, column 1 - line 19, column 39: " + [ v.constructor.name ]);
  });
  exports["ASCII"] = ASCII;
  exports["UTF8"] = UTF8;
  exports["UTF16LE"] = UTF16LE;
  exports["UCS2"] = UCS2;
  exports["Base64"] = Base64;
  exports["Latin1"] = Latin1;
  exports["Binary"] = Binary;
  exports["Hex"] = Hex;
  exports["showEncoding"] = showEncoding;
})(PS["Node.Encoding"] = PS["Node.Encoding"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Node.Stream"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Either = PS["Data.Either"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Show = PS["Data.Show"];
  var Effect = PS["Effect"];
  var Effect_Exception = PS["Effect.Exception"];
  var Node_Buffer = PS["Node.Buffer"];
  var Node_Encoding = PS["Node.Encoding"];
  var Prelude = PS["Prelude"];                 
  var writeString = function (w) {
      return function (enc) {
          return $foreign.writeStringImpl(w)(Data_Show.show(Node_Encoding.showEncoding)(enc));
      };
  };
  exports["writeString"] = writeString;
  exports["end"] = $foreign.end;
})(PS["Node.Stream"] = PS["Node.Stream"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Node.HTTP"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Nullable = PS["Data.Nullable"];
  var Effect = PS["Effect"];
  var Foreign_Object = PS["Foreign.Object"];
  var Node_Stream = PS["Node.Stream"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];                 
  var responseAsStream = Unsafe_Coerce.unsafeCoerce;
  var requestURL = function ($4) {
      return $4.url;
  };                                               
  var listen = function (server) {
      return function (opts) {
          return function (done) {
              return $foreign.listenImpl(server)(opts.port)(opts.hostname)(Data_Nullable.toNullable(opts.backlog))(done);
          };
      };
  };
  exports["listen"] = listen;
  exports["requestURL"] = requestURL;
  exports["responseAsStream"] = responseAsStream;
  exports["createServer"] = $foreign.createServer;
  exports["setHeader"] = $foreign.setHeader;
  exports["setStatusCode"] = $foreign.setStatusCode;
})(PS["Node.HTTP"] = PS["Node.HTTP"] || {});
(function(exports) {// module NodeUrl

  exports.parseUrl = require('url').parse;
})(PS["NodeUrl"] = PS["NodeUrl"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["NodeUrl"];
  var Prelude = PS["Prelude"];
  exports["parseUrl"] = $foreign.parseUrl;
})(PS["NodeUrl"] = PS["NodeUrl"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["NodeWebSocket"];
  var Control_Category = PS["Control.Category"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Effect = PS["Effect"];
  var Node_HTTP = PS["Node.HTTP"];
  var NodeUrl = PS["NodeUrl"];
  var Prelude = PS["Prelude"];                 
  var send = function (conn) {
      return function (msg) {
          return $foreign.sendImpl(conn, msg);
      };
  };
  var onRequest = function (server) {
      return function (callback) {
          return $foreign.registerEventHandlerUnsafe(server, "on", "request", callback, Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var onMessage = function (conn) {
      return function (callback) {
          return $foreign.registerEventHandlerUnsafe(conn, "on", "message", callback, $foreign.getMessageData);
      };
  };
  var onClose = function (conn) {
      return function (callback) {
          return $foreign.registerEventHandlerUnsafe(conn, "on", "close", callback, Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var mount = function (wsServer) {
      return function (httpServer) {
          return $foreign.mountImpl(wsServer, httpServer);
      };
  };
  exports["onRequest"] = onRequest;
  exports["onMessage"] = onMessage;
  exports["onClose"] = onClose;
  exports["send"] = send;
  exports["mount"] = mount;
  exports["mkServer"] = $foreign.mkServer;
  exports["reject"] = $foreign.reject;
  exports["accept"] = $foreign.accept;
  exports["resourceUrl"] = $foreign.resourceUrl;
  exports["close"] = $foreign.close;
})(PS["NodeWebSocket"] = PS["NodeWebSocket"] || {});
(function(exports) {
    "use strict";

  exports._jsonParser = function (fail, succ, s) {
    try {
      return succ(JSON.parse(s));
    }
    catch (e) {
      return fail(e.message);
    }
  };
})(PS["Data.Argonaut.Parser"] = PS["Data.Argonaut.Parser"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Data.Argonaut.Parser"];
  var Data_Argonaut_Core = PS["Data.Argonaut.Core"];
  var Data_Either = PS["Data.Either"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];                 
  var jsonParser = function (j) {
      return $foreign._jsonParser(Data_Either.Left.create, Data_Either.Right.create, j);
  };
  exports["jsonParser"] = jsonParser;
})(PS["Data.Argonaut.Parser"] = PS["Data.Argonaut.Parser"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_List_Lazy = PS["Data.List.Lazy"];
  var Data_List_Lazy_Types = PS["Data.List.Lazy.Types"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];                 
  var ZipList = function (x) {
      return x;
  };
  var traversableZipList = Data_List_Lazy_Types.traversableList;
  var newtypeZipList = new Data_Newtype.Newtype(function (n) {
      return n;
  }, ZipList);                                        
  var functorZipList = Data_List_Lazy_Types.functorList;
  var applyZipList = new Control_Apply.Apply(function () {
      return functorZipList;
  }, function (v) {
      return function (v1) {
          return Data_List_Lazy.zipWith(Data_Function.apply)(v)(v1);
      };
  });
  var applicativeZipList = new Control_Applicative.Applicative(function () {
      return applyZipList;
  }, function ($13) {
      return ZipList(Data_List_Lazy.repeat($13));
  });
  exports["ZipList"] = ZipList;
  exports["newtypeZipList"] = newtypeZipList;
  exports["traversableZipList"] = traversableZipList;
  exports["functorZipList"] = functorZipList;
  exports["applyZipList"] = applyZipList;
  exports["applicativeZipList"] = applicativeZipList;
})(PS["Data.List.ZipList"] = PS["Data.List.ZipList"] || {});
(function(exports) {
    "use strict";

  exports.process = process;
})(PS["Node.Process"] = PS["Node.Process"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Node.Process"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Posix = PS["Data.Posix"];
  var Data_Posix_Signal = PS["Data.Posix.Signal"];
  var Effect = PS["Effect"];
  var Foreign_Object = PS["Foreign.Object"];
  var Node_Platform = PS["Node.Platform"];
  var Node_Stream = PS["Node.Stream"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var mkEffect = Unsafe_Coerce.unsafeCoerce;
  var getEnv = mkEffect(function (v) {
      return $foreign.process.env;
  });
  var lookupEnv = function (k) {
      return Data_Functor.map(Effect.functorEffect)(Foreign_Object.lookup(k))(getEnv);
  };
  exports["getEnv"] = getEnv;
  exports["lookupEnv"] = lookupEnv;
})(PS["Node.Process"] = PS["Node.Process"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Utils"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Argonaut_Core = PS["Data.Argonaut.Core"];
  var Data_Argonaut_Decode_Generic_Rep = PS["Data.Argonaut.Decode.Generic.Rep"];
  var Data_Argonaut_Encode_Generic_Rep = PS["Data.Argonaut.Encode.Generic.Rep"];
  var Data_Argonaut_Parser = PS["Data.Argonaut.Parser"];
  var Data_Array = PS["Data.Array"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Either = PS["Data.Either"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Generic_Rep = PS["Data.Generic.Rep"];
  var Data_Int = PS["Data.Int"];
  var Data_List = PS["Data.List"];
  var Data_List_Lazy = PS["Data.List.Lazy"];
  var Data_List_ZipList = PS["Data.List.ZipList"];
  var Data_Map = PS["Data.Map"];
  var Data_Map_Internal = PS["Data.Map.Internal"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Unfoldable1 = PS["Data.Unfoldable1"];
  var Data_Unit = PS["Data.Unit"];
  var Effect = PS["Effect"];
  var Foreign_Object = PS["Foreign.Object"];
  var Node_Process = PS["Node.Process"];
  var Prelude = PS["Prelude"];                 
  var zipIndices = function (xs) {
      return Data_Array.zip(Data_Array.range(0)(Data_Array.length(xs) - 1 | 0))(xs);
  };
  var whenJust = function (dictApplicative) {
      return function (mx) {
          return function (f) {
              return Data_Maybe.maybe(Control_Applicative.pure(dictApplicative)(Data_Unit.unit))(f)(mx);
          };
      };
  };
  var transpose = (function () {
      var toZipList = function (dictFoldable) {
          return function ($24) {
              return Data_List_ZipList.ZipList(Data_List_Lazy.fromFoldable(dictFoldable)($24));
          };
      };
      var fromZipList = function (dictUnfoldable) {
          return function ($25) {
              return Data_List_Lazy.toUnfoldable(dictUnfoldable)(Data_Newtype.unwrap(Data_List_ZipList.newtypeZipList)($25));
          };
      };
      return function ($26) {
          return (function ($27) {
              return fromZipList(Data_Unfoldable.unfoldableArray)(Data_Functor.map(Data_List_ZipList.functorZipList)(fromZipList(Data_Unfoldable.unfoldableArray))(Data_Traversable.sequence(Data_List_ZipList.traversableZipList)(Data_List_ZipList.applicativeZipList)($27)));
          })(Data_Functor.map(Data_List_ZipList.functorZipList)(toZipList(Data_Foldable.foldableArray))(toZipList(Data_Foldable.foldableArray)($26)));
      };
  })();
  var portOrDefault = function ($$default) {
      return function __do() {
          var v = Node_Process.lookupEnv("PORT")();
          return Data_Maybe.fromMaybe($$default)(Control_Bind.bind(Data_Maybe.bindMaybe)(v)(Data_Int.fromString));
      };
  };
  var encode = function (dictGeneric) {
      return function (dictEncodeRep) {
          return function ($28) {
              return Data_Argonaut_Core.stringify(Data_Argonaut_Encode_Generic_Rep.genericEncodeJson(dictGeneric)(dictEncodeRep)($28));
          };
      };
  };
  var deleteWhere = function (dictOrd) {
      return function (pred) {
          return function (map) {
              var go = function (v) {
                  return function (m) {
                      var $18 = pred(v.value0)(v.value1);
                      if ($18) {
                          return Data_Map_Internal["delete"](dictOrd)(v.value0)(m);
                      };
                      return m;
                  };
              };
              return Data_Foldable.foldr(Data_Foldable.foldableArray)(go)(map)(Data_Map_Internal.toUnfoldable(Data_Unfoldable.unfoldableArray)(map));
          };
      };
  };
  var decode = function (dictGeneric) {
      return function (dictDecodeRep) {
          return Control_Bind.composeKleisliFlipped(Data_Either.bindEither)(Data_Argonaut_Decode_Generic_Rep.genericDecodeJson(dictGeneric)(dictDecodeRep))(Data_Argonaut_Parser.jsonParser);
      };
  };
  var applyN = function ($copy_n) {
      return function ($copy_f) {
          return function ($copy_x) {
              var $tco_var_n = $copy_n;
              var $tco_var_f = $copy_f;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(n, f, x) {
                  if (n <= 0) {
                      $tco_done = true;
                      return x;
                  };
                  if (Data_Boolean.otherwise) {
                      $tco_var_n = n - 1 | 0;
                      $tco_var_f = f;
                      $copy_x = f(x);
                      return;
                  };
                  throw new Error("Failed pattern match at Utils line 71, column 1 - line 71, column 46: " + [ n.constructor.name, f.constructor.name, x.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_n, $tco_var_f, $copy_x);
              };
              return $tco_result;
          };
      };
  };
  exports["transpose"] = transpose;
  exports["whenJust"] = whenJust;
  exports["applyN"] = applyN;
  exports["zipIndices"] = zipIndices;
  exports["deleteWhere"] = deleteWhere;
  exports["portOrDefault"] = portOrDefault;
  exports["encode"] = encode;
  exports["decode"] = decode;
})(PS["Utils"] = PS["Utils"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var BaseCommon = PS["BaseCommon"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_RWS = PS["Control.Monad.RWS"];
  var Control_Monad_RWS_Trans = PS["Control.Monad.RWS.Trans"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Argonaut_Decode_Generic_Rep = PS["Data.Argonaut.Decode.Generic.Rep"];
  var Data_Argonaut_Encode_Class = PS["Data.Argonaut.Encode.Class"];
  var Data_Argonaut_Encode_Generic_Rep = PS["Data.Argonaut.Encode.Generic.Rep"];
  var Data_Array = PS["Data.Array"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Generic_Rep = PS["Data.Generic.Rep"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Lens = PS["Data.Lens"];
  var Data_Lens_At = PS["Data.Lens.At"];
  var Data_Lens_Getter = PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = PS["Data.Lens.Internal.Forget"];
  var Data_Lens_Lens = PS["Data.Lens.Lens"];
  var Data_Lens_Setter = PS["Data.Lens.Setter"];
  var Data_List = PS["Data.List"];
  var Data_Map = PS["Data.Map"];
  var Data_Map_Internal = PS["Data.Map.Internal"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Profunctor_Strong = PS["Data.Profunctor.Strong"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_String = PS["Data.String"];
  var Data_String_CodePoints = PS["Data.String.CodePoints"];
  var Data_String_Common = PS["Data.String.Common"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Tuple = PS["Data.Tuple"];
  var Effect = PS["Effect"];
  var Effect_Console = PS["Effect.Console"];
  var Effect_Ref = PS["Effect.Ref"];
  var Effect_Timer = PS["Effect.Timer"];
  var Global_Unsafe = PS["Global.Unsafe"];
  var NodeWebSocket = PS["NodeWebSocket"];
  var Prelude = PS["Prelude"];
  var Types = PS["Types"];
  var Utils = PS["Utils"];
  var Connection = function (x) {
      return x;
  };
  var timeCounter = Data_Lens_Lens.lens(function (s) {
      return s.timeCounter;
  })(function (s) {
      return function (x) {
          var $47 = {};
          for (var $48 in s) {
              if ({}.hasOwnProperty.call(s, $48)) {
                  $47[$48] = s[$48];
              };
          };
          $47.timeCounter = x;
          return $47;
      };
  });
  var updateServerTimeCounter = Effect_Ref.modify(Data_Lens_Setter.over(timeCounter(Data_Profunctor_Strong.strongFn))(Data_Semiring.add(Data_Semiring.semiringInt)(1)));
  var stepsPerSecond = 30;
  var sendUpdates = function (dictMonad) {
      return function (dictMonadWriter) {
          return function (ms) {
              return Control_Monad_Writer_Class.tell(dictMonadWriter.MonadTell0())({
                  toAll: ms,
                  toOne: Data_Map_Internal.empty
              });
          };
      };
  };
  var sendUpdate = function (dictMonad) {
      return function (dictMonadWriter) {
          return function (m) {
              return sendUpdates(dictMonad)(dictMonadWriter)([ m ]);
          };
      };
  };
  var semigroupSendMsgs = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          return {
              toAll: Data_Semigroup.append(Data_Semigroup.semigroupArray)(v.toAll)(v1.toAll),
              toOne: Data_Map_Internal.unionWith(Types.ordPlayerId)(Data_Semigroup.append(Data_Semigroup.semigroupArray))(v.toOne)(v1.toOne)
          };
      };
  });
  var runServerM = function (conns) {
      return function (state) {
          return function (action) {
              var v = Control_Monad_RWS.runRWS(action)(conns)(state);
              return {
                  nextState: v.value0,
                  messages: v.value2,
                  result: v.value1
              };
          };
      };
  };
  var monoidSendMsgs = new Data_Monoid.Monoid(function () {
      return semigroupSendMsgs;
  }, {
      toAll: [  ],
      toOne: Data_Map_Internal.empty
  });
  var mkServer = function (initialState) {
      return {
          connections: [  ],
          state: initialState,
          timeCounter: 0
      };
  };
  var messagesFor = function (pId) {
      return function (v) {
          return Data_Semigroup.append(Data_Semigroup.semigroupArray)(v.toAll)(Data_Maybe.fromMaybe([  ])(Data_Map_Internal.lookup(Types.ordPlayerId)(pId)(v.toOne)));
      };
  };
  var idleInterval = 30 * 1000 | 0;
  var connectionsToPlayersMap = function ($86) {
      return Data_Map_Internal.fromFoldable(Types.ordPlayerId)(Data_Foldable.foldableArray)(Data_Functor.map(Data_Functor.functorArray)(function (v) {
          return new Data_Tuple.Tuple(v.pId, v.name);
      })($86));
  };
  var connections = Data_Lens_Lens.lens(function (s) {
      return s.connections;
  })(function (s) {
      return function (x) {
          var $59 = {};
          for (var $60 in s) {
              if ({}.hasOwnProperty.call(s, $60)) {
                  $59[$60] = s[$60];
              };
          };
          $59.connections = x;
          return $59;
      };
  });
  var cWsConn = Data_Lens_Lens.lens(function (v) {
      return v.wsConn;
  })(function (v) {
      return function (x) {
          return Connection({
              wsConn: x,
              pId: v.pId,
              name: v.name,
              timeCounter: v.timeCounter
          });
      };
  });
  var cTimeCounter = Data_Lens_Lens.lens(function (v) {
      return v.timeCounter;
  })(function (v) {
      return function (x) {
          return Connection({
              wsConn: v.wsConn,
              pId: v.pId,
              name: v.name,
              timeCounter: x
          });
      };
  });
  var kickIdlePlayers = function (refSrv) {
      return function __do() {
          var v = Effect_Ref.read(refSrv)();
          var idles = Data_Array.filter(function (c) {
              return Data_Lens_Getter.viewOn(c)(cTimeCounter(Data_Lens_Internal_Forget.strongForget)) !== v.timeCounter;
          })(v.connections);
          return Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableArray)(idles)(function (c) {
              return NodeWebSocket.close(Data_Lens_Getter.viewOn(c)(cWsConn(Data_Lens_Internal_Forget.strongForget)));
          })();
      };
  };
  var cPId = Data_Lens_Lens.lens(function (v) {
      return v.pId;
  })(function (v) {
      return function (x) {
          return Connection({
              wsConn: v.wsConn,
              pId: x,
              name: v.name,
              timeCounter: v.timeCounter
          });
      };
  });
  var closeConnection = function (refSrv) {
      return function (pId) {
          return function __do() {
              Data_Functor["void"](Effect.functorEffect)(Effect_Ref.modify(Data_Lens_Setter.over(connections(Data_Profunctor_Strong.strongFn))(Data_Array.filter(function (c) {
                  return Data_Eq.notEq(Types.eqPlayerId)(pId)(Data_Lens_Getter.viewOn(c)(cPId(Data_Lens_Internal_Forget.strongForget)));
              })))(refSrv))();
              return Effect_Console.log("closed connection for " + Data_Show.show(Types.showPlayerId)(pId))();
          };
      };
  };
  var getNextPlayerId = function (srv) {
      var playerIdsInUse = Data_Functor.map(Data_Functor.functorArray)(function (c) {
          return Data_Lens_Getter.viewOn(c)(cPId(Data_Lens_Internal_Forget.strongForget));
      })(srv.connections);
      return Data_Array.head(Data_Array.difference(Types.eqPlayerId)(Types.allPlayerIds)(playerIdsInUse));
  };
  var tryAddPlayer = function (conn) {
      return function (refSrv) {
          return function (name) {
              return function __do() {
                  var v = Effect_Ref.read(refSrv)();
                  var v1 = getNextPlayerId(v);
                  if (v1 instanceof Data_Maybe.Just) {
                      var srv$prime = {
                          connections: Data_Semigroup.append(Data_Semigroup.semigroupArray)(v.connections)([ {
                              pId: v1.value0,
                              wsConn: conn,
                              name: name,
                              timeCounter: v.timeCounter
                          } ]),
                          state: v.state,
                          timeCounter: v.timeCounter
                      };
                      Effect_Ref.write(srv$prime)(refSrv)();
                      return new Data_Maybe.Just(v1.value0);
                  };
                  if (v1 instanceof Data_Maybe.Nothing) {
                      return Data_Maybe.Nothing.value;
                  };
                  throw new Error("Failed pattern match at BaseServer line 234, column 3 - line 245, column 19: " + [ v1.constructor.name ]);
              };
          };
      };
  };
  var sendAllMessages = function (dictGeneric) {
      return function (dictEncodeRep) {
          return function (srv) {
              return function (sm) {
                  return Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableArray)(srv.connections)(function (conn) {
                      var msgs = messagesFor(Data_Lens_Getter.viewOn(conn)(cPId(Data_Lens_Internal_Forget.strongForget)))(sm);
                      return Control_Applicative.when(Effect.applicativeEffect)(!Data_Array["null"](msgs))(Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableArray)(msgs)(function (msg) {
                          return NodeWebSocket.send(Data_Lens_Getter.viewOn(conn)(cWsConn(Data_Lens_Internal_Forget.strongForget)))(Utils.encode(dictGeneric)(dictEncodeRep)(msg));
                      }));
                  });
              };
          };
      };
  };
  var handleNewPlayer = function (refSrv) {
      return function (pId) {
          return function __do() {
              var v = Effect_Ref.read(refSrv)();
              var playersMap = connectionsToPlayersMap(v.connections);
              var msgAll = new BaseCommon.NewPlayer(playersMap);
              var msgOne = new BaseCommon.YourPlayerIdIs(pId);
              var msgs = {
                  toAll: [ msgAll ],
                  toOne: Data_Map_Internal.singleton(pId)([ msgOne ])
              };
              Effect_Console.log("new player connected, sending to all: " + Utils.encode(BaseCommon.genericInternalMessage)(Data_Argonaut_Encode_Generic_Rep.encodeRepSum(Data_Argonaut_Encode_Generic_Rep.encodeRepConstructor(new Data_Symbol.IsSymbol(function () {
                  return "NewPlayer";
              }))(Data_Argonaut_Encode_Generic_Rep.encodeRepArgsArgument(Data_Argonaut_Encode_Class.encodeMap(Types.ordPlayerId)(Types.encodeJsonPlayerId)(Data_Argonaut_Encode_Class.encodeJsonJString))))(Data_Argonaut_Encode_Generic_Rep.encodeRepConstructor(new Data_Symbol.IsSymbol(function () {
                  return "YourPlayerIdIs";
              }))(Data_Argonaut_Encode_Generic_Rep.encodeRepArgsArgument(Types.encodeJsonPlayerId))))(msgAll))();
              Effect_Console.log("                      sending to one: " + Utils.encode(BaseCommon.genericInternalMessage)(Data_Argonaut_Encode_Generic_Rep.encodeRepSum(Data_Argonaut_Encode_Generic_Rep.encodeRepConstructor(new Data_Symbol.IsSymbol(function () {
                  return "NewPlayer";
              }))(Data_Argonaut_Encode_Generic_Rep.encodeRepArgsArgument(Data_Argonaut_Encode_Class.encodeMap(Types.ordPlayerId)(Types.encodeJsonPlayerId)(Data_Argonaut_Encode_Class.encodeJsonJString))))(Data_Argonaut_Encode_Generic_Rep.encodeRepConstructor(new Data_Symbol.IsSymbol(function () {
                  return "YourPlayerIdIs";
              }))(Data_Argonaut_Encode_Generic_Rep.encodeRepArgsArgument(Types.encodeJsonPlayerId))))(msgOne))();
              return sendAllMessages(BaseCommon.genericInternalMessage)(Data_Argonaut_Encode_Generic_Rep.encodeRepSum(Data_Argonaut_Encode_Generic_Rep.encodeRepConstructor(new Data_Symbol.IsSymbol(function () {
                  return "NewPlayer";
              }))(Data_Argonaut_Encode_Generic_Rep.encodeRepArgsArgument(Data_Argonaut_Encode_Class.encodeMap(Types.ordPlayerId)(Types.encodeJsonPlayerId)(Data_Argonaut_Encode_Class.encodeJsonJString))))(Data_Argonaut_Encode_Generic_Rep.encodeRepConstructor(new Data_Symbol.IsSymbol(function () {
                  return "YourPlayerIdIs";
              }))(Data_Argonaut_Encode_Generic_Rep.encodeRepArgsArgument(Types.encodeJsonPlayerId))))(v)(msgs)();
          };
      };
  };
  var runCallback = function (dictGeneric) {
      return function (dictEncodeRep) {
          return function (refSrv) {
              return function (callback) {
                  return function __do() {
                      var v = Effect_Ref.read(refSrv)();
                      var res = runServerM(v.connections)(v.state)(callback);
                      sendAllMessages(dictGeneric)(dictEncodeRep)(v)(res.messages)();
                      return Effect_Ref.write({
                          state: res.nextState,
                          connections: v.connections,
                          timeCounter: v.timeCounter
                      })(refSrv)();
                  };
              };
          };
      };
  };
  var updatePlayerTimeCounter = function (refSrv) {
      return function (pId) {
          return function __do() {
              var v = Effect_Ref.read(refSrv)();
              var mConn = Data_Foldable.find(Data_Foldable.foldableArray)(function (c) {
                  return Data_Eq.eq(Types.eqPlayerId)(Data_Lens_Getter.viewOn(c)(cPId(Data_Lens_Internal_Forget.strongForget)))(pId);
              })(v.connections);
              return Utils.whenJust(Effect.applicativeEffect)(mConn)(function (conn) {
                  var conn$prime = Data_Lens_Setter.set(cTimeCounter(Data_Profunctor_Strong.strongFn))(v.timeCounter)(conn);
                  var conns$prime = Data_Array.filter(function (c) {
                      return Data_Eq.notEq(Types.eqPlayerId)(pId)(Data_Lens_Getter.viewOn(c)(cPId(Data_Lens_Internal_Forget.strongForget)));
                  })(v.connections);
                  var conns$prime$prime = Data_Semigroup.append(Data_Semigroup.semigroupArray)(conns$prime)([ conn$prime ]);
                  return Data_Functor["void"](Effect.functorEffect)(Effect_Ref.modify(Data_Lens_Setter.set(connections(Data_Profunctor_Strong.strongFn))(conns$prime$prime))(refSrv));
              })();
          };
      };
  };
  var startServer = function (dictGeneric) {
      return function (dictDecodeRep) {
          return function (dictGeneric1) {
              return function (dictEncodeRep) {
                  return function (cs) {
                      return function (refSrv) {
                          return function __do() {
                              var v = NodeWebSocket.mkServer();
                              NodeWebSocket.onRequest(v)(function (req) {
                                  return function __do() {
                                      Effect_Console.log("got a request")();
                                      var playerName = Global_Unsafe.unsafeDecodeURIComponent(Data_String_CodePoints.drop(1)((NodeWebSocket.resourceUrl(req)).search));
                                      var $76 = Data_String_Common["null"](playerName);
                                      if ($76) {
                                          return NodeWebSocket.reject(req)();
                                      };
                                      var v1 = NodeWebSocket.accept(req)();
                                      var v2 = tryAddPlayer(v1)(refSrv)(playerName)();
                                      if (v2 instanceof Data_Maybe.Just) {
                                          Effect_Console.log("opened connection for player " + (Data_Show.show(Types.showPlayerId)(v2.value0) + (": " + playerName)))();
                                          handleNewPlayer(refSrv)(v2.value0)();
                                          runCallback(dictGeneric1)(dictEncodeRep)(refSrv)(cs.onNewPlayer(v2.value0))();
                                          NodeWebSocket.onMessage(v1)(function (msg) {
                                              return function __do() {
                                                  updatePlayerTimeCounter(refSrv)(v2.value0)();
                                                  var v3 = Utils.decode(dictGeneric)(dictDecodeRep)(msg);
                                                  if (v3 instanceof Data_Either.Right) {
                                                      return runCallback(dictGeneric1)(dictEncodeRep)(refSrv)(cs.onMessage(v3.value0)(v2.value0))();
                                                  };
                                                  if (v3 instanceof Data_Either.Left) {
                                                      return Effect_Console.log(Data_Show.show(Data_Show.showString)(v3.value0))();
                                                  };
                                                  throw new Error("Failed pattern match at BaseServer line 209, column 15 - line 211, column 46: " + [ v3.constructor.name ]);
                                              };
                                          })();
                                          return NodeWebSocket.onClose(v1)(function (close) {
                                              return function __do() {
                                                  closeConnection(refSrv)(v2.value0)();
                                                  return runCallback(dictGeneric1)(dictEncodeRep)(refSrv)(cs.onClose(v2.value0))();
                                              };
                                          })();
                                      };
                                      if (v2 instanceof Data_Maybe.Nothing) {
                                          Effect_Console.log("rejecting connection, no player ids available")();
                                          return NodeWebSocket.close(v1)();
                                      };
                                      throw new Error("Failed pattern match at BaseServer line 200, column 9 - line 219, column 26: " + [ v2.constructor.name ]);
                                  };
                              })();
                              Data_Functor["void"](Effect.functorEffect)(Effect_Timer.setInterval(Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(1000)(stepsPerSecond))(runCallback(dictGeneric1)(dictEncodeRep)(refSrv)(cs.step)))();
                              Data_Functor["void"](Effect.functorEffect)(Effect_Timer.setInterval(idleInterval)(function __do() {
                                  Data_Functor["void"](Effect.functorEffect)(kickIdlePlayers(refSrv))();
                                  return Data_Functor["void"](Effect.functorEffect)(updateServerTimeCounter(refSrv))();
                              }))();
                              return v;
                          };
                      };
                  };
              };
          };
      };
  }; 
  var askPlayers = function (dictMonad) {
      return function (dictMonadReader) {
          return Data_Functor.map(((dictMonad.Bind1()).Apply0()).Functor0())(connectionsToPlayersMap)(Control_Monad_Reader_Class.ask(dictMonadReader.MonadAsk0()));
      };
  };
  exports["idleInterval"] = idleInterval;
  exports["connections"] = connections;
  exports["timeCounter"] = timeCounter;
  exports["Connection"] = Connection;
  exports["cWsConn"] = cWsConn;
  exports["cPId"] = cPId;
  exports["cTimeCounter"] = cTimeCounter;
  exports["connectionsToPlayersMap"] = connectionsToPlayersMap;
  exports["runServerM"] = runServerM;
  exports["mkServer"] = mkServer;
  exports["runCallback"] = runCallback;
  exports["messagesFor"] = messagesFor;
  exports["sendAllMessages"] = sendAllMessages;
  exports["sendUpdate"] = sendUpdate;
  exports["sendUpdates"] = sendUpdates;
  exports["askPlayers"] = askPlayers;
  exports["stepsPerSecond"] = stepsPerSecond;
  exports["startServer"] = startServer;
  exports["tryAddPlayer"] = tryAddPlayer;
  exports["getNextPlayerId"] = getNextPlayerId;
  exports["handleNewPlayer"] = handleNewPlayer;
  exports["closeConnection"] = closeConnection;
  exports["updatePlayerTimeCounter"] = updatePlayerTimeCounter;
  exports["kickIdlePlayers"] = kickIdlePlayers;
  exports["updateServerTimeCounter"] = updateServerTimeCounter;
  exports["semigroupSendMsgs"] = semigroupSendMsgs;
  exports["monoidSendMsgs"] = monoidSendMsgs;
})(PS["BaseServer"] = PS["BaseServer"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Unfoldable1 = PS["Data.Unfoldable1"];
  var Prelude = PS["Prelude"];                 
  var CatQueue = (function () {
      function CatQueue(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      CatQueue.create = function (value0) {
          return function (value1) {
              return new CatQueue(value0, value1);
          };
      };
      return CatQueue;
  })();
  var uncons = function ($copy_v) {
      var $tco_done = false;
      var $tco_result;
      function $tco_loop(v) {
          if (v.value0 instanceof Data_List_Types.Nil && v.value1 instanceof Data_List_Types.Nil) {
              $tco_done = true;
              return Data_Maybe.Nothing.value;
          };
          if (v.value0 instanceof Data_List_Types.Nil) {
              $copy_v = new CatQueue(Data_List.reverse(v.value1), Data_List_Types.Nil.value);
              return;
          };
          if (v.value0 instanceof Data_List_Types.Cons) {
              $tco_done = true;
              return new Data_Maybe.Just(new Data_Tuple.Tuple(v.value0.value0, new CatQueue(v.value0.value1, v.value1)));
          };
          throw new Error("Failed pattern match at Data.CatQueue line 83, column 1 - line 83, column 63: " + [ v.constructor.name ]);
      };
      while (!$tco_done) {
          $tco_result = $tco_loop($copy_v);
      };
      return $tco_result;
  };
  var snoc = function (v) {
      return function (a) {
          return new CatQueue(v.value0, new Data_List_Types.Cons(a, v.value1));
      };
  };
  var $$null = function (v) {
      if (v.value0 instanceof Data_List_Types.Nil && v.value1 instanceof Data_List_Types.Nil) {
          return true;
      };
      return false;
  };                                                                                                
  var empty = new CatQueue(Data_List_Types.Nil.value, Data_List_Types.Nil.value);
  exports["CatQueue"] = CatQueue;
  exports["empty"] = empty;
  exports["null"] = $$null;
  exports["snoc"] = snoc;
  exports["uncons"] = uncons;
})(PS["Data.CatQueue"] = PS["Data.CatQueue"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_CatQueue = PS["Data.CatQueue"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Unfoldable1 = PS["Data.Unfoldable1"];
  var Prelude = PS["Prelude"];                 
  var CatNil = (function () {
      function CatNil() {

      };
      CatNil.value = new CatNil();
      return CatNil;
  })();
  var CatCons = (function () {
      function CatCons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      CatCons.create = function (value0) {
          return function (value1) {
              return new CatCons(value0, value1);
          };
      };
      return CatCons;
  })();
  var link = function (v) {
      return function (cat) {
          if (v instanceof CatNil) {
              return cat;
          };
          if (v instanceof CatCons) {
              return new CatCons(v.value0, Data_CatQueue.snoc(v.value1)(cat));
          };
          throw new Error("Failed pattern match at Data.CatList line 111, column 1 - line 111, column 54: " + [ v.constructor.name, cat.constructor.name ]);
      };
  };
  var foldr = function (k) {
      return function (b) {
          return function (q) {
              var foldl = function ($copy_v) {
                  return function ($copy_c) {
                      return function ($copy_v1) {
                          var $tco_var_v = $copy_v;
                          var $tco_var_c = $copy_c;
                          var $tco_done = false;
                          var $tco_result;
                          function $tco_loop(v, c, v1) {
                              if (v1 instanceof Data_List_Types.Nil) {
                                  $tco_done = true;
                                  return c;
                              };
                              if (v1 instanceof Data_List_Types.Cons) {
                                  $tco_var_v = v;
                                  $tco_var_c = v(c)(v1.value0);
                                  $copy_v1 = v1.value1;
                                  return;
                              };
                              throw new Error("Failed pattern match at Data.CatList line 126, column 3 - line 126, column 59: " + [ v.constructor.name, c.constructor.name, v1.constructor.name ]);
                          };
                          while (!$tco_done) {
                              $tco_result = $tco_loop($tco_var_v, $tco_var_c, $copy_v1);
                          };
                          return $tco_result;
                      };
                  };
              };
              var go = function ($copy_xs) {
                  return function ($copy_ys) {
                      var $tco_var_xs = $copy_xs;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(xs, ys) {
                          var v = Data_CatQueue.uncons(xs);
                          if (v instanceof Data_Maybe.Nothing) {
                              $tco_done = true;
                              return foldl(function (x) {
                                  return function (i) {
                                      return i(x);
                                  };
                              })(b)(ys);
                          };
                          if (v instanceof Data_Maybe.Just) {
                              $tco_var_xs = v.value0.value1;
                              $copy_ys = new Data_List_Types.Cons(k(v.value0.value0), ys);
                              return;
                          };
                          throw new Error("Failed pattern match at Data.CatList line 122, column 14 - line 124, column 67: " + [ v.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_xs, $copy_ys);
                      };
                      return $tco_result;
                  };
              };
              return go(q)(Data_List_Types.Nil.value);
          };
      };
  };
  var uncons = function (v) {
      if (v instanceof CatNil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof CatCons) {
          return new Data_Maybe.Just(new Data_Tuple.Tuple(v.value0, (function () {
              var $45 = Data_CatQueue["null"](v.value1);
              if ($45) {
                  return CatNil.value;
              };
              return foldr(link)(CatNil.value)(v.value1);
          })()));
      };
      throw new Error("Failed pattern match at Data.CatList line 102, column 1 - line 102, column 61: " + [ v.constructor.name ]);
  };
  var foldableCatList = new Data_Foldable.Foldable(function (dictMonoid) {
      return Data_Foldable.foldMapDefaultL(foldableCatList)(dictMonoid);
  }, function (f) {
      var go = function ($copy_acc) {
          return function ($copy_q) {
              var $tco_var_acc = $copy_acc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(acc, q) {
                  var v = uncons(q);
                  if (v instanceof Data_Maybe.Just) {
                      $tco_var_acc = f(acc)(v.value0.value0);
                      $copy_q = v.value0.value1;
                      return;
                  };
                  if (v instanceof Data_Maybe.Nothing) {
                      $tco_done = true;
                      return acc;
                  };
                  throw new Error("Failed pattern match at Data.CatList line 158, column 16 - line 160, column 22: " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_acc, $copy_q);
              };
              return $tco_result;
          };
      };
      return go;
  }, function (f) {
      return function (s) {
          return function (l) {
              return Data_Foldable.foldrDefault(foldableCatList)(f)(s)(l);
          };
      };
  });                                                                           
  var foldMap = function (dictMonoid) {
      return function (f) {
          return function (v) {
              if (v instanceof CatNil) {
                  return Data_Monoid.mempty(dictMonoid);
              };
              if (v instanceof CatCons) {
                  var d = (function () {
                      var $54 = Data_CatQueue["null"](v.value1);
                      if ($54) {
                          return CatNil.value;
                      };
                      return foldr(link)(CatNil.value)(v.value1);
                  })();
                  return Data_Semigroup.append(dictMonoid.Semigroup0())(f(v.value0))(foldMap(dictMonoid)(f)(d));
              };
              throw new Error("Failed pattern match at Data.CatList line 136, column 1 - line 136, column 62: " + [ f.constructor.name, v.constructor.name ]);
          };
      };
  };
  var empty = CatNil.value;
  var append = function (v) {
      return function (v1) {
          if (v1 instanceof CatNil) {
              return v;
          };
          if (v instanceof CatNil) {
              return v1;
          };
          return link(v)(v1);
      };
  };
  var cons = function (a) {
      return function (cat) {
          return append(new CatCons(a, Data_CatQueue.empty))(cat);
      };
  };
  var functorCatList = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof CatNil) {
              return CatNil.value;
          };
          if (v1 instanceof CatCons) {
              var d = (function () {
                  var $61 = Data_CatQueue["null"](v1.value1);
                  if ($61) {
                      return CatNil.value;
                  };
                  return foldr(link)(CatNil.value)(v1.value1);
              })();
              return cons(v(v1.value0))(Data_Functor.map(functorCatList)(v)(d));
          };
          throw new Error("Failed pattern match at Data.CatList line 186, column 1 - line 186, column 43: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var singleton = function (a) {
      return cons(a)(CatNil.value);
  }; 
  var semigroupCatList = new Data_Semigroup.Semigroup(append);
  var monoidCatList = new Data_Monoid.Monoid(function () {
      return semigroupCatList;
  }, CatNil.value);
  var monadCatList = new Control_Monad.Monad(function () {
      return applicativeCatList;
  }, function () {
      return bindCatList;
  });
  var bindCatList = new Control_Bind.Bind(function () {
      return applyCatList;
  }, Data_Function.flip(foldMap(monoidCatList)));
  var applyCatList = new Control_Apply.Apply(function () {
      return functorCatList;
  }, Control_Monad.ap(monadCatList));
  var applicativeCatList = new Control_Applicative.Applicative(function () {
      return applyCatList;
  }, singleton);
  var snoc = function (cat) {
      return function (a) {
          return append(cat)(new CatCons(a, Data_CatQueue.empty));
      };
  };
  exports["CatNil"] = CatNil;
  exports["CatCons"] = CatCons;
  exports["empty"] = empty;
  exports["singleton"] = singleton;
  exports["append"] = append;
  exports["cons"] = cons;
  exports["snoc"] = snoc;
  exports["uncons"] = uncons;
  exports["semigroupCatList"] = semigroupCatList;
  exports["monoidCatList"] = monoidCatList;
  exports["foldableCatList"] = foldableCatList;
  exports["functorCatList"] = functorCatList;
  exports["applyCatList"] = applyCatList;
  exports["applicativeCatList"] = applicativeCatList;
  exports["bindCatList"] = bindCatList;
  exports["monadCatList"] = monadCatList;
})(PS["Data.CatList"] = PS["Data.CatList"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_CatList = PS["Data.CatList"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var Free = (function () {
      function Free(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Free.create = function (value0) {
          return function (value1) {
              return new Free(value0, value1);
          };
      };
      return Free;
  })();
  var Return = (function () {
      function Return(value0) {
          this.value0 = value0;
      };
      Return.create = function (value0) {
          return new Return(value0);
      };
      return Return;
  })();
  var Bind = (function () {
      function Bind(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Bind.create = function (value0) {
          return function (value1) {
              return new Bind(value0, value1);
          };
      };
      return Bind;
  })();
  var toView = function ($copy_v) {
      var $tco_done = false;
      var $tco_result;
      function $tco_loop(v) {
          var runExpF = function (v2) {
              return v2;
          };
          var concatF = function (v2) {
              return function (r) {
                  return new Free(v2.value0, Data_Semigroup.append(Data_CatList.semigroupCatList)(v2.value1)(r));
              };
          };
          if (v.value0 instanceof Return) {
              var v2 = Data_CatList.uncons(v.value1);
              if (v2 instanceof Data_Maybe.Nothing) {
                  $tco_done = true;
                  return new Return(v.value0.value0);
              };
              if (v2 instanceof Data_Maybe.Just) {
                  $copy_v = concatF(runExpF(v2.value0.value0)(v.value0.value0))(v2.value0.value1);
                  return;
              };
              throw new Error("Failed pattern match at Control.Monad.Free line 220, column 7 - line 224, column 64: " + [ v2.constructor.name ]);
          };
          if (v.value0 instanceof Bind) {
              $tco_done = true;
              return new Bind(v.value0.value0, function (a) {
                  return concatF(v.value0.value1(a))(v.value1);
              });
          };
          throw new Error("Failed pattern match at Control.Monad.Free line 218, column 3 - line 226, column 56: " + [ v.value0.constructor.name ]);
      };
      while (!$tco_done) {
          $tco_result = $tco_loop($copy_v);
      };
      return $tco_result;
  };
  var fromView = function (f) {
      return new Free(f, Data_CatList.empty);
  };
  var freeMonad = new Control_Monad.Monad(function () {
      return freeApplicative;
  }, function () {
      return freeBind;
  });
  var freeFunctor = new Data_Functor.Functor(function (k) {
      return function (f) {
          return Control_Bind.bindFlipped(freeBind)(function ($118) {
              return Control_Applicative.pure(freeApplicative)(k($118));
          })(f);
      };
  });
  var freeBind = new Control_Bind.Bind(function () {
      return freeApply;
  }, function (v) {
      return function (k) {
          return new Free(v.value0, Data_CatList.snoc(v.value1)(k));
      };
  });
  var freeApply = new Control_Apply.Apply(function () {
      return freeFunctor;
  }, Control_Monad.ap(freeMonad));
  var freeApplicative = new Control_Applicative.Applicative(function () {
      return freeApply;
  }, function ($119) {
      return fromView(Return.create($119));
  });
  var liftF = function (f) {
      return fromView(new Bind(f, function ($120) {
          return Control_Applicative.pure(freeApplicative)($120);
      }));
  }; 
  var substFree = function (k) {
      var go = function (f) {
          var v = toView(f);
          if (v instanceof Return) {
              return Control_Applicative.pure(freeApplicative)(v.value0);
          };
          if (v instanceof Bind) {
              return Control_Bind.bind(freeBind)(k(v.value0))(Data_Functor.map(Data_Functor.functorFn)(go)(v.value1));
          };
          throw new Error("Failed pattern match at Control.Monad.Free line 161, column 10 - line 163, column 33: " + [ v.constructor.name ]);
      };
      return go;
  };
  var hoistFree = function (k) {
      return substFree(function ($121) {
          return liftF(k($121));
      });
  };
  var foldFree = function (dictMonadRec) {
      return function (k) {
          var go = function (f) {
              var v = toView(f);
              if (v instanceof Return) {
                  return Data_Functor.map((((dictMonadRec.Monad0()).Bind1()).Apply0()).Functor0())(Control_Monad_Rec_Class.Done.create)(Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(v.value0));
              };
              if (v instanceof Bind) {
                  return Data_Functor.map((((dictMonadRec.Monad0()).Bind1()).Apply0()).Functor0())(function ($127) {
                      return Control_Monad_Rec_Class.Loop.create(v.value1($127));
                  })(k(v.value0));
              };
              throw new Error("Failed pattern match at Control.Monad.Free line 151, column 10 - line 153, column 37: " + [ v.constructor.name ]);
          };
          return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(go);
      };
  };
  exports["liftF"] = liftF;
  exports["hoistFree"] = hoistFree;
  exports["foldFree"] = foldFree;
  exports["substFree"] = substFree;
  exports["freeFunctor"] = freeFunctor;
  exports["freeBind"] = freeBind;
  exports["freeApplicative"] = freeApplicative;
  exports["freeApply"] = freeApply;
  exports["freeMonad"] = freeMonad;
})(PS["Control.Monad.Free"] = PS["Control.Monad.Free"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Free = PS["Control.Monad.Free"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_State = PS["Control.Monad.State"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_State_Trans = PS["Control.Monad.State.Trans"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Lazy = PS["Data.Lazy"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  var tail = function (v) {
      return Data_Tuple.snd(Data_Lazy.force(v));
  };
  var mkCofree = function (a) {
      return function (t) {
          return Data_Lazy.defer(function (v) {
              return new Data_Tuple.Tuple(a, t);
          });
      };
  };
  var head = function (v) {
      return Data_Tuple.fst(Data_Lazy.force(v));
  };
  var functorCofree = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          var loop = function (v) {
              return Data_Functor.map(Data_Lazy.functorLazy)(function (v1) {
                  return new Data_Tuple.Tuple(f(v1.value0), Data_Functor.map(dictFunctor)(loop)(v1.value1));
              })(v);
          };
          return loop;
      });
  };
  var extendCofree = function (dictFunctor) {
      return new Control_Extend.Extend(function () {
          return functorCofree(dictFunctor);
      }, function (f) {
          var loop = function (v) {
              return Data_Functor.map(Data_Lazy.functorLazy)(function (v1) {
                  return new Data_Tuple.Tuple(f(v), Data_Functor.map(dictFunctor)(loop)(v1.value1));
              })(v);
          };
          return loop;
      });
  };
  exports["mkCofree"] = mkCofree;
  exports["head"] = head;
  exports["tail"] = tail;
  exports["functorCofree"] = functorCofree;
  exports["extendCofree"] = extendCofree;
})(PS["Control.Comonad.Cofree"] = PS["Control.Comonad.Cofree"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Enum = PS["Data.Enum"];
  var Data_Maybe = PS["Data.Maybe"];                 
  var toCharCode = Data_Enum.fromEnum(Data_Enum.boundedEnumChar);
  exports["toCharCode"] = toCharCode;
})(PS["Data.Char"] = PS["Data.Char"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Lens_Lens = PS["Data.Lens.Lens"];
  var Data_Profunctor_Strong = PS["Data.Profunctor.Strong"];
  var Data_Tuple = PS["Data.Tuple"];                 
  var _2 = function (dictStrong) {
      return Data_Profunctor_Strong.second(dictStrong);
  };
  exports["_2"] = _2;
})(PS["Data.Lens.Lens.Tuple"] = PS["Data.Lens.Lens.Tuple"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Lens_Internal_Market = PS["Data.Lens.Internal.Market"];
  var Data_Lens_Internal_Tagged = PS["Data.Lens.Internal.Tagged"];
  var Data_Lens_Types = PS["Data.Lens.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Profunctor = PS["Data.Profunctor"];
  var Data_Profunctor_Choice = PS["Data.Profunctor.Choice"];
  var Prelude = PS["Prelude"];                                                                                                                        
  var prism = function (to) {
      return function (fro) {
          return function (dictChoice) {
              return function (pab) {
                  return Data_Profunctor.dimap(dictChoice.Profunctor0())(fro)(Data_Either.either(Control_Category.identity(Control_Category.categoryFn))(Control_Category.identity(Control_Category.categoryFn)))(Data_Profunctor_Choice.right(dictChoice)(Data_Profunctor.rmap(dictChoice.Profunctor0())(to)(pab)));
              };
          };
      };
  };
  exports["prism"] = prism;
})(PS["Data.Lens.Prism"] = PS["Data.Lens.Prism"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_Lens_Prism = PS["Data.Lens.Prism"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  var _Just = function (dictChoice) {
      return Data_Lens_Prism.prism(Data_Maybe.Just.create)(Data_Maybe.maybe(new Data_Either.Left(Data_Maybe.Nothing.value))(Data_Either.Right.create))(dictChoice);
  };
  exports["_Just"] = _Just;
})(PS["Data.Lens.Prism.Maybe"] = PS["Data.Lens.Prism.Maybe"] || {});
(function(exports) {
    "use strict";

  exports.unsafePerformEffect = function (f) {
    return f();
  };
})(PS["Effect.Unsafe"] = PS["Effect.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Effect.Unsafe"];
  var Effect = PS["Effect"];
  exports["unsafePerformEffect"] = $foreign.unsafePerformEffect;
})(PS["Effect.Unsafe"] = PS["Effect.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Effect_Exception = PS["Effect.Exception"];
  var Effect_Unsafe = PS["Effect.Unsafe"];                 
  var unsafeThrowException = function ($0) {
      return Effect_Unsafe.unsafePerformEffect(Effect_Exception.throwException($0));
  };
  var unsafeThrow = function ($1) {
      return unsafeThrowException(Effect_Exception.error($1));
  };
  exports["unsafeThrowException"] = unsafeThrowException;
  exports["unsafeThrow"] = unsafeThrow;
})(PS["Effect.Exception.Unsafe"] = PS["Effect.Exception.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array = PS["Data.Array"];
  var Data_Char = PS["Data.Char"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Int = PS["Data.Int"];
  var Data_Lens_Getter = PS["Data.Lens.Getter"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_String = PS["Data.String"];
  var Data_String_CodeUnits = PS["Data.String.CodeUnits"];
  var Data_String_Common = PS["Data.String.Common"];
  var Data_String_Pattern = PS["Data.String.Pattern"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Tuple_Nested = PS["Data.Tuple.Nested"];
  var Effect_Exception_Unsafe = PS["Effect.Exception.Unsafe"];
  var $$Math = PS["Math"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var Types = PS["Types"];
  var Utils = PS["Utils"];                 
  var W = (function () {
      function W() {

      };
      W.value = new W();
      return W;
  })();
  var E = (function () {
      function E() {

      };
      E.value = new E();
      return E;
  })();
  var tilesAlongSide = 17;
  var tileSize = 11;
  var rotateCW = function ($37) {
      return Utils.transpose(Data_Functor.map(Data_Functor.functorArray)(Data_Array.reverse)($37));
  };
  var normalize = function (t) {
      if (t instanceof Types.Intersection) {
          return new Data_Tuple.Tuple(0, Types.Intersection.value);
      };
      if (t instanceof Types.TeeJunctionUp) {
          return new Data_Tuple.Tuple(0, Types.TeeJunctionUp.value);
      };
      if (t instanceof Types.TeeJunctionRight) {
          return new Data_Tuple.Tuple(1, Types.TeeJunctionUp.value);
      };
      if (t instanceof Types.TeeJunctionDown) {
          return new Data_Tuple.Tuple(2, Types.TeeJunctionUp.value);
      };
      if (t instanceof Types.TeeJunctionLeft) {
          return new Data_Tuple.Tuple(3, Types.TeeJunctionUp.value);
      };
      if (t instanceof Types.CornerUpRight) {
          return new Data_Tuple.Tuple(0, Types.CornerUpRight.value);
      };
      if (t instanceof Types.CornerRightDown) {
          return new Data_Tuple.Tuple(1, Types.CornerUpRight.value);
      };
      if (t instanceof Types.CornerDownLeft) {
          return new Data_Tuple.Tuple(2, Types.CornerUpRight.value);
      };
      if (t instanceof Types.CornerLeftUp) {
          return new Data_Tuple.Tuple(3, Types.CornerUpRight.value);
      };
      if (t instanceof Types.StraightHorizontal) {
          return new Data_Tuple.Tuple(0, Types.StraightHorizontal.value);
      };
      if (t instanceof Types.StraightVertical) {
          return new Data_Tuple.Tuple(1, Types.StraightHorizontal.value);
      };
      if (t instanceof Types.Inaccessible) {
          return new Data_Tuple.Tuple(0, Types.Inaccessible.value);
      };
      throw new Error("Failed pattern match at LevelMap line 44, column 3 - line 56, column 46: " + [ t.constructor.name ]);
  };
  var mkBlockTile = function (b) {
      var rightLength = function (x) {
          return Data_Array.length(x) === tileSize;
      };
      var ok = rightLength(b) && Data_Foldable.all(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(rightLength)(b);
      if (ok) {
          return b;
      };
      return Effect_Exception_Unsafe.unsafeThrow("bad dimensions for BlockTile");
  };
  var mapSize = tileSize * tilesAlongSide | 0;
  var inaccessibleB = mkBlockTile(Data_Array.replicate(tileSize)(Data_Array.replicate(tileSize)(Types.Wall.value)));
  var halfTile = Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(tileSize)(2);
  var mirror = function (x) {
      return function (y) {
          var xs = Data_Array.replicate(halfTile)(x);
          return Data_Semigroup.append(Data_Semigroup.semigroupArray)(xs)(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ y ])(xs));
      };
  };
  var intersectionB = (function () {
      var normalRow = mirror(Types.Wall.value)(Types.Empty.value);
      var centralRow = Data_Array.replicate(tileSize)(Types.Empty.value);
      return mkBlockTile(mirror(normalRow)(centralRow));
  })();
  var straightHorizontalB = (function () {
      var col = mirror(Types.Wall.value)(Types.Empty.value);
      return mkBlockTile(Data_Array.replicate(tileSize)(col));
  })();
  var teeJunctionUpB = (function () {
      var normalCol = mirror(Types.Wall.value)(Types.Empty.value);
      var centralCol = Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(halfTile)(Types.Empty.value))(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Types.Empty.value ])(Data_Array.replicate(halfTile)(Types.Wall.value)));
      return mkBlockTile(mirror(normalCol)(centralCol));
  })();
  var tilePositionToBlock = function (v) {
      var f = function (n) {
          return Data_Int.toNumber(halfTile) + n * Data_Int.toNumber(tileSize);
      };
      return {
          x: f(v.x),
          y: f(v.y)
      };
  };
  var getBlockAt = function (v) {
      return function (levelmap) {
          var y = Data_Int.floor(v.y);
          var x = Data_Int.floor(v.x);
          return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Array.index(levelmap.blocks)(x))(function (v1) {
              return Data_Array.index(v1)(y);
          });
      };
  };
  var fail = Data_Either.Left.create;
  var parseLevelMapString = function (str) {
      var rightLength = function (x) {
          return Data_Array.length(x) === tilesAlongSide;
      };
      var toLines = function ($38) {
          return (function ($39) {
              return Utils.transpose(Data_Array.filter(function ($40) {
                  return !Data_Array["null"]($40);
              })($39));
          })(Data_Functor.map(Data_Functor.functorArray)(function ($41) {
              return Data_String_CodeUnits.toCharArray(Data_String_Common.trim($41));
          })(Data_String_Common.split("\x0a")($38)));
      };
      var lines = toLines(str);
      return Control_Bind.discard(Control_Bind.discardUnit)(Data_Either.bindEither)(Control_Applicative.unless(Data_Either.applicativeEither)(rightLength(lines) && Data_Foldable.all(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(rightLength)(lines))(fail("expected a square levelmap; dimensions should be " + (Data_Show.show(Data_Show.showInt)(tilesAlongSide) + (" by " + Data_Show.show(Data_Show.showInt)(tilesAlongSide))))))(function () {
          return Data_Traversable["for"](Data_Either.applicativeEither)(Data_Traversable.traversableArray)(lines)(function (line) {
              return Data_Traversable["for"](Data_Either.applicativeEither)(Data_Traversable.traversableArray)(line)(function ($$char) {
                  if ($$char === "#") {
                      return Control_Applicative.pure(Data_Either.applicativeEither)(W.value);
                  };
                  if ($$char === "_") {
                      return Control_Applicative.pure(Data_Either.applicativeEither)(E.value);
                  };
                  return fail("unexpected char '" + (Data_String_CodeUnits.singleton($$char) + "'; expected '#' or '_'"));
              });
          });
      });
  };
  var toTile = function (v) {
      return function (v1) {
          return function (v2) {
              return function (v3) {
                  return function (v4) {
                      if (v instanceof W) {
                          return Control_Applicative.pure(Data_Either.applicativeEither)(Types.Inaccessible.value);
                      };
                      if (v instanceof E && (v1 instanceof E && (v2 instanceof E && (v3 instanceof E && v4 instanceof E)))) {
                          return Control_Applicative.pure(Data_Either.applicativeEither)(Types.Intersection.value);
                      };
                      if (v instanceof E && (v1 instanceof W && (v2 instanceof E && (v3 instanceof E && v4 instanceof E)))) {
                          return Control_Applicative.pure(Data_Either.applicativeEither)(Types.TeeJunctionDown.value);
                      };
                      if (v instanceof E && (v1 instanceof E && (v2 instanceof W && (v3 instanceof E && v4 instanceof E)))) {
                          return Control_Applicative.pure(Data_Either.applicativeEither)(Types.TeeJunctionLeft.value);
                      };
                      if (v instanceof E && (v1 instanceof E && (v2 instanceof E && (v3 instanceof W && v4 instanceof E)))) {
                          return Control_Applicative.pure(Data_Either.applicativeEither)(Types.TeeJunctionUp.value);
                      };
                      if (v instanceof E && (v1 instanceof E && (v2 instanceof E && (v3 instanceof E && v4 instanceof W)))) {
                          return Control_Applicative.pure(Data_Either.applicativeEither)(Types.TeeJunctionRight.value);
                      };
                      if (v instanceof E && (v1 instanceof W && (v2 instanceof W && (v3 instanceof E && v4 instanceof E)))) {
                          return Control_Applicative.pure(Data_Either.applicativeEither)(Types.CornerDownLeft.value);
                      };
                      if (v instanceof E && (v1 instanceof W && (v2 instanceof E && (v3 instanceof W && v4 instanceof E)))) {
                          return Control_Applicative.pure(Data_Either.applicativeEither)(Types.StraightHorizontal.value);
                      };
                      if (v instanceof E && (v1 instanceof W && (v2 instanceof E && (v3 instanceof E && v4 instanceof W)))) {
                          return Control_Applicative.pure(Data_Either.applicativeEither)(Types.CornerRightDown.value);
                      };
                      if (v instanceof E && (v1 instanceof E && (v2 instanceof W && (v3 instanceof W && v4 instanceof E)))) {
                          return Control_Applicative.pure(Data_Either.applicativeEither)(Types.CornerLeftUp.value);
                      };
                      if (v instanceof E && (v1 instanceof E && (v2 instanceof W && (v3 instanceof E && v4 instanceof W)))) {
                          return Control_Applicative.pure(Data_Either.applicativeEither)(Types.StraightVertical.value);
                      };
                      if (v instanceof E && (v1 instanceof E && (v2 instanceof E && (v3 instanceof W && v4 instanceof W)))) {
                          return Control_Applicative.pure(Data_Either.applicativeEither)(Types.CornerUpRight.value);
                      };
                      if (v instanceof E) {
                          return fail("dead ends are not supported");
                      };
                      throw new Error("Failed pattern match at LevelMap line 220, column 1 - line 221, column 29: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name, v3.constructor.name, v4.constructor.name ]);
                  };
              };
          };
      };
  };
  var cornerUpRightB = (function () {
      var upperRow = mirror(Types.Wall.value)(Types.Empty.value);
      var lowerRow = Data_Array.replicate(tileSize)(Types.Wall.value);
      var centralRow = Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(halfTile)(Types.Wall.value))(Data_Array.replicate(halfTile + 1 | 0)(Types.Empty.value));
      var byRows = Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(halfTile)(upperRow))(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ centralRow ])(Data_Array.replicate(halfTile)(lowerRow)));
      return mkBlockTile(Utils.transpose(byRows));
  })();
  var toBlockTile = function (t) {
      var convert = function ($43) {
          return (function (v) {
              return function (dictPartial) {
                  var $__unused = function (dictPartial1) {
                      return function ($dollar12) {
                          return $dollar12;
                      };
                  };
                  return $__unused(dictPartial)((function () {
                      if (v instanceof Types.Intersection) {
                          return intersectionB;
                      };
                      if (v instanceof Types.TeeJunctionUp) {
                          return teeJunctionUpB;
                      };
                      if (v instanceof Types.CornerUpRight) {
                          return cornerUpRightB;
                      };
                      if (v instanceof Types.StraightHorizontal) {
                          return straightHorizontalB;
                      };
                      if (v instanceof Types.Inaccessible) {
                          return inaccessibleB;
                      };
                      throw new Error("Failed pattern match at LevelMap line 64, column 23 - line 69, column 42: " + [ v.constructor.name ]);
                  })());
              };
          })($43)();
      };
      var v = normalize(t);
      return Utils.applyN(v.value0)(rotateCW)(convert(v.value1));
  };
  var constructLevelMap = function (basicTiles) {
      var tileIndices = Data_Array.range(0)(tilesAlongSide - 1 | 0);
      var b = function (i) {
          return function (j) {
              return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Array.index(basicTiles)(i))(function (r) {
                  return Data_Array.index(r)(j);
              });
          };
      };
      return Data_Traversable["for"](Data_Either.applicativeEither)(Data_Traversable.traversableArray)(tileIndices)(function (i) {
          return Data_Traversable["for"](Data_Either.applicativeEither)(Data_Traversable.traversableArray)(tileIndices)(function (j) {
              var right = Data_Maybe.fromMaybe(W.value)(b(i + 1 | 0)(j));
              var left = Data_Maybe.fromMaybe(W.value)(b(i - 1 | 0)(j));
              var centre = Data_Maybe.fromJust()(b(i)(j));
              var below = Data_Maybe.fromMaybe(W.value)(b(i)(j + 1 | 0));
              var above = Data_Maybe.fromMaybe(W.value)(b(i)(j - 1 | 0));
              return toTile(centre)(above)(right)(below)(left);
          });
      });
  };
  var fromString = function (str) {
      return Control_Bind.bind(Data_Either.bindEither)(parseLevelMapString(str))(constructLevelMap);
  };
  var concatTileRow = function (ts) {
      var r = Data_Array.range(0)(tileSize - 1 | 0);
      var getRow = function (n) {
          return function (t) {
              return Data_Array.index(t)(n);
          };
      };
      var getRowComponents = function (n) {
          return Data_Functor.map(Data_Functor.functorArray)(getRow(n))(ts);
      };
      var maybes = Data_Functor.map(Data_Functor.functorArray)(function ($44) {
          return Data_Foldable.fold(Data_Foldable.foldableArray)(Data_Maybe.monoidMaybe(Data_Semigroup.semigroupArray))(getRowComponents($44));
      })(r);
      return Data_Traversable.sequence(Data_Traversable.traversableArray)(Data_Maybe.applicativeMaybe)(maybes);
  };
  var concatTiles = function ($45) {
      return (function ($46) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Array.concat)(Data_Traversable.sequence(Data_Traversable.traversableArray)(Data_Maybe.applicativeMaybe)($46));
      })(Data_Functor.map(Data_Functor.functorArray)(concatTileRow)(Data_Functor.map(Data_Functor.functorArray)(Data_Functor.map(Data_Functor.functorArray)(toBlockTile))($45)));
  };
  var mkLevelMap = function (ts) {
      return Data_Functor.map(Data_Maybe.functorMaybe)(function (bs) {
          return {
              blocks: bs,
              tiles: ts
          };
      })(concatTiles(ts));
  };   
  var basicMap2 = Data_Maybe.fromJust()(mkLevelMap(Data_Either.either(Effect_Exception_Unsafe.unsafeThrow)(Control_Category.identity(Control_Category.categoryFn))(fromString("\x0a  #################\x0a  #_______________#\x0a  #_##_##_####_##_#\x0a  #_____#___#_____#\x0a  #_###_###_#_###_#\x0a  #_______________#\x0a  ##_##_##_###_####\x0a  ##_##_#___##___##\x0a  #_____#___####_##\x0a  #_#_#_##_##____##\x0a  #_#_#_______##_##\x0a  #_____###_#_____#\x0a  ##_##___#_#_###_#\x0a  #_____#___#_____#\x0a  #_######_###_##_#\x0a  #_______________#\x0a  #################\x0a  "))));
  exports["tilesAlongSide"] = tilesAlongSide;
  exports["mapSize"] = mapSize;
  exports["tilePositionToBlock"] = tilePositionToBlock;
  exports["normalize"] = normalize;
  exports["toBlockTile"] = toBlockTile;
  exports["mkBlockTile"] = mkBlockTile;
  exports["rotateCW"] = rotateCW;
  exports["concatTiles"] = concatTiles;
  exports["concatTileRow"] = concatTileRow;
  exports["tileSize"] = tileSize;
  exports["halfTile"] = halfTile;
  exports["mirror"] = mirror;
  exports["intersectionB"] = intersectionB;
  exports["teeJunctionUpB"] = teeJunctionUpB;
  exports["cornerUpRightB"] = cornerUpRightB;
  exports["straightHorizontalB"] = straightHorizontalB;
  exports["inaccessibleB"] = inaccessibleB;
  exports["fromString"] = fromString;
  exports["W"] = W;
  exports["E"] = E;
  exports["fail"] = fail;
  exports["parseLevelMapString"] = parseLevelMapString;
  exports["constructLevelMap"] = constructLevelMap;
  exports["toTile"] = toTile;
  exports["basicMap2"] = basicMap2;
  exports["mkLevelMap"] = mkLevelMap;
  exports["getBlockAt"] = getBlockAt;
})(PS["LevelMap"] = PS["LevelMap"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_State_Trans = PS["Control.Monad.State.Trans"];
  var Control_Monad_Writer_Trans = PS["Control.Monad.Writer.Trans"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array = PS["Data.Array"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Int = PS["Data.Int"];
  var Data_Lens = PS["Data.Lens"];
  var Data_Lens_At = PS["Data.Lens.At"];
  var Data_Lens_Getter = PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = PS["Data.Lens.Internal.Forget"];
  var Data_Lens_Internal_Wander = PS["Data.Lens.Internal.Wander"];
  var Data_Lens_Lens_Tuple = PS["Data.Lens.Lens.Tuple"];
  var Data_Lens_Prism_Maybe = PS["Data.Lens.Prism.Maybe"];
  var Data_Lens_Setter = PS["Data.Lens.Setter"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Map = PS["Data.Map"];
  var Data_Map_Internal = PS["Data.Map.Internal"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Profunctor_Strong = PS["Data.Profunctor.Strong"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Tuple_Nested = PS["Data.Tuple.Nested"];
  var Effect_Exception_Unsafe = PS["Effect.Exception.Unsafe"];
  var LevelMap = PS["LevelMap"];
  var $$Math = PS["Math"];
  var Prelude = PS["Prelude"];
  var Types = PS["Types"];
  var Utils = PS["Utils"];                 
  var respawnLength = 60;
  var removePlayer = function (pId) {
      return Data_Lens_Setter.set(function ($97) {
          return Types.players(Data_Profunctor_Strong.strongFn)(Data_Lens_At.at(Data_Lens_At.atMap(Types.ordPlayerId))(pId)(Data_Profunctor_Strong.strongFn)($97));
      })(Data_Maybe.Nothing.value);
  };
  var rampageLength = 180;
  var player = function (pId) {
      return function (dictWander) {
          return function ($98) {
              return Types.players(dictWander.Strong0())(Data_Lens_At.at(Data_Lens_At.atMap(Types.ordPlayerId))(pId)(dictWander.Strong0())(Data_Lens_Prism_Maybe._Just(dictWander.Choice1())($98)));
          };
      };
  };
  var moveInDirection = function (d) {
      return function (p) {
          return Types.addPos(p)(Types.dirToPos(d));
      };
  };
  var minPlayers = 2;
  var minEatingQuadrance = 4.0;
  var lookupItemByPosition = function (pos) {
      return function (g) {
          var v = Data_List.filter(function (i) {
              return Data_Eq.eq(Types.eqPosition)(Data_Lens_Getter.viewOn(Data_Lens_Getter.viewOn(i)(Data_Lens_Lens_Tuple._2(Data_Lens_Internal_Forget.strongForget)))(Types.iPosition(Data_Lens_Internal_Forget.strongForget)))(pos);
          })(Data_Map_Internal.toUnfoldable(Data_List_Types.unfoldableList)(Data_Lens_Getter.viewOn(g)(Types.items(Data_Lens_Internal_Forget.strongForget))));
          if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Nil) {
              return new Data_Maybe.Just(v.value0);
          };
          if (v instanceof Data_List_Types.Nil) {
              return Data_Maybe.Nothing.value;
          };
          return Effect_Exception_Unsafe.unsafeThrow("lookupItemByPosition: items stacked: " + Data_Show.show(Data_List_Types.showList(Data_Tuple.showTuple(Data_Show.showInt)(Types.showItem)))(v));
      };
  };
  var isRespawning = function (p) {
      return Data_Maybe.isJust(Data_Lens_Getter.viewOn(p)(Types.pRespawnCounter(Data_Lens_Internal_Forget.strongForget)));
  };
  var isRampage = function (pId) {
      var isRampaging = function (rampage) {
          return Control_Applicative.pure(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity)))((function () {
              if (rampage instanceof Types.Rampaging) {
                  return Data_Eq.eq(Types.eqPlayerId)(rampage.value0)(pId);
              };
              if (rampage instanceof Types.Cooldown) {
                  return false;
              };
              throw new Error("Failed pattern match at Game line 209, column 12 - line 211, column 32: " + [ rampage.constructor.name ]);
          })());
      };
      return Control_Bind.bind(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity)))(Types.getGame)(function (v) {
          return Data_Maybe.maybe(Control_Applicative.pure(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity)))(false))(isRampaging)(v.rampage);
      });
  };
  var isFree = function (v) {
      return function (pos) {
          var block = LevelMap.getBlockAt(pos)(v);
          return Data_Maybe.maybe(false)(function ($100) {
              return !Types.isWall($100);
          })(block);
      };
  };
  var makeItems = function (levelmap) {
      return function (safeZone) {
          return function (bigDotPositions) {
              var shouldHaveLittleDot = function (pos) {
                  return isFree(levelmap)(pos) && (!Data_Foldable.elem(Data_Foldable.foldableArray)(Types.eqPosition)(pos)(safeZone) && !Data_Foldable.elem(Data_Foldable.foldableArray)(Types.eqPosition)(pos)(bigDotPositions));
              };
              var r = Data_Functor.map(Data_Functor.functorArray)(Data_Int.toNumber)(Data_Array.range(0)(LevelMap.tilesAlongSide - 1 | 0));
              var littleDots = Control_Bind.bind(Control_Bind.bindArray)(r)(function (v) {
                  return Control_Bind.bind(Control_Bind.bindArray)(r)(function (v1) {
                      var pos = LevelMap.tilePositionToBlock({
                          x: v,
                          y: v1
                      });
                      var $41 = shouldHaveLittleDot(pos);
                      if ($41) {
                          return [ {
                              itemType: Types.LittleDot.value,
                              position: pos
                          } ];
                      };
                      return [  ];
                  });
              });
              var bigDots = Data_Functor.map(Data_Functor.functorArray)(function (pos) {
                  return {
                      itemType: Types.BigDot.value,
                      position: pos
                  };
              })(bigDotPositions);
              return Data_Semigroup.append(Data_Semigroup.semigroupArray)(littleDots)(bigDots);
          };
      };
  };
  var initialGame = (function () {
      var starts = [ new Data_Tuple.Tuple(Types.P1.value, LevelMap.tilePositionToBlock({
          x: 7.0,
          y: 7.0
      })), new Data_Tuple.Tuple(Types.P2.value, LevelMap.tilePositionToBlock({
          x: 9.0,
          y: 7.0
      })), new Data_Tuple.Tuple(Types.P3.value, LevelMap.tilePositionToBlock({
          x: 7.0,
          y: 8.0
      })), new Data_Tuple.Tuple(Types.P4.value, LevelMap.tilePositionToBlock({
          x: 9.0,
          y: 8.0
      })) ];
      var safeZone = Control_Bind.bind(Control_Bind.bindArray)(Data_Functor.map(Data_Functor.functorArray)(Data_Int.toNumber)([ 7, 8, 9 ]))(function (v) {
          return Control_Bind.bind(Control_Bind.bindArray)(Data_Functor.map(Data_Functor.functorArray)(Data_Int.toNumber)([ 6, 7, 8, 9 ]))(function (v1) {
              return Control_Applicative.pure(Control_Applicative.applicativeArray)(LevelMap.tilePositionToBlock({
                  x: v,
                  y: v1
              }));
          });
      });
      var f = function (v) {
          return new Data_Tuple.Tuple(v.value0, Types.mkPlayer(v.value1));
      };
      var bigDots = Control_Bind.bind(Control_Bind.bindArray)(Data_Functor.map(Data_Functor.functorArray)(Data_Int.toNumber)([ 3, LevelMap.tilesAlongSide - 4 | 0 ]))(function (v) {
          return Control_Bind.bind(Control_Bind.bindArray)(Data_Functor.map(Data_Functor.functorArray)(Data_Int.toNumber)([ 3, LevelMap.tilesAlongSide - 4 | 0 ]))(function (v1) {
              return Control_Applicative.pure(Control_Applicative.applicativeArray)(LevelMap.tilePositionToBlock({
                  x: v,
                  y: v1
              }));
          });
      });
      return {
          map: LevelMap.basicMap2,
          players: Data_Map_Internal.fromFoldable(Types.ordPlayerId)(Data_Foldable.foldableArray)(Data_Functor.map(Data_Functor.functorArray)(f)(starts)),
          items: Data_Map_Internal.fromFoldable(Data_Ord.ordInt)(Data_Foldable.foldableArray)(Utils.zipIndices(makeItems(LevelMap.basicMap2)(safeZone)(bigDots))),
          countdown: new Data_Maybe.Just(90),
          rampage: Data_Maybe.Nothing.value,
          safeZone: safeZone
      };
  })();
  var makeGame = function (dictFoldable) {
      return function (pIds) {
          var f = Utils.deleteWhere(Types.ordPlayerId)(function (pId) {
              return function (v) {
                  return !Data_Foldable.elem(dictFoldable)(Types.eqPlayerId)(pId)(pIds);
              };
          });
          return Data_Lens_Setter.over(Types.players(Data_Profunctor_Strong.strongFn))(f)(initialGame);
      };
  };
  var decrementOrNothing = function (x) {
      var x$prime = x - 1 | 0;
      var $49 = x$prime <= 0;
      if ($49) {
          return Data_Maybe.Nothing.value;
      };
      return new Data_Maybe.Just(x$prime);
  };
  var cooldownLength = 120;
  var checkEnded = function (g) {
      if (Data_Map_Internal.isEmpty(Data_Lens_Getter.viewOn(g)(Types.items(Data_Lens_Internal_Forget.strongForget))) && Data_Maybe.isNothing(g.rampage)) {
          return new Data_Maybe.Just(Types.Completed.value);
      };
      if (Data_List.length(Data_Map_Internal.values(Data_Lens_Getter.viewOn(g)(Types.players(Data_Lens_Internal_Forget.strongForget)))) < minPlayers) {
          return new Data_Maybe.Just(Types.TooManyPlayersDisconnected.value);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.Nothing.value;
      };
      throw new Error("Failed pattern match at Game line 342, column 1 - line 342, column 42: " + [ g.constructor.name ]);
  };
  var isEnded = function ($101) {
      return Data_Maybe.isJust(checkEnded($101));
  };
  var canMoveInDirection = function (pId) {
      return function (p) {
          return function (d) {
              var newPosition = moveInDirection(d)(Data_Lens_Getter.viewOn(p)(Types.pPosition(Data_Lens_Internal_Forget.strongForget)));
              var isFleeing = function (game) {
                  if (game.rampage instanceof Data_Maybe.Just && game.rampage.value0 instanceof Types.Rampaging) {
                      return Data_Eq.notEq(Types.eqPlayerId)(game.rampage.value0.value0)(pId) && Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(game.rampage.value0.value1)(3) === 0;
                  };
                  return false;
              };
              var immobilised = function (game) {
                  return isRespawning(p) || isFleeing(game);
              };
              var destIsFree = function (game) {
                  return isFree(game.map)(newPosition);
              };
              var both = function (v) {
                  return v.value0 && v.value1;
              };
              return Data_Functor.map(Control_Monad_Writer_Trans.functorWriterT(Control_Monad_State_Trans.functorStateT(Data_Identity.functorIdentity)))(function ($102) {
                  return both(Data_Profunctor_Strong.fanout(Control_Category.categoryFn)(Data_Profunctor_Strong.strongFn)(destIsFree)(function ($103) {
                      return !immobilised($103);
                  })($102));
              })(Types.getGame);
          };
      };
  };
  var applyPlayerUpdate = function (u) {
      if (u instanceof Types.ChangedPosition) {
          return Data_Lens_Setter.set(Types.pPosition(Data_Profunctor_Strong.strongFn))(u.value0);
      };
      if (u instanceof Types.ChangedDirection) {
          return Data_Lens_Setter.set(Types.pDirection(Data_Profunctor_Strong.strongFn))(u.value0);
      };
      if (u instanceof Types.ChangedIntendedDirection) {
          return Data_Lens_Setter.set(Types.pIntendedDirection(Data_Profunctor_Strong.strongFn))(u.value0);
      };
      if (u instanceof Types.ChangedScore) {
          return Data_Lens_Setter.set(Types.pScore(Data_Profunctor_Strong.strongFn))(u.value0);
      };
      if (u instanceof Types.ChangedNomIndex) {
          return Data_Lens_Setter.set(Types.pNomIndex(Data_Profunctor_Strong.strongFn))(u.value0);
      };
      if (u instanceof Types.ChangedRespawnCounter) {
          return Data_Lens_Setter.set(Types.pRespawnCounter(Data_Profunctor_Strong.strongFn))(u.value0);
      };
      if (u instanceof Types.PlayerLeft) {
          return Control_Category.identity(Control_Category.categoryFn);
      };
      throw new Error("Failed pattern match at Game line 73, column 3 - line 80, column 43: " + [ u.constructor.name ]);
  };
  var applyItemUpdate = function (u) {
      return Data_Function["const"](Data_Maybe.Nothing.value);
  };
  var applyGameUpdate = function (u) {
      var setCountdown = function (x) {
          return function (game) {
              return {
                  countdown: x,
                  items: game.items,
                  map: game.map,
                  players: game.players,
                  rampage: game.rampage,
                  safeZone: game.safeZone
              };
          };
      };
      if (u instanceof Types.GUPU && u.value1 instanceof Types.PlayerLeft) {
          return removePlayer(u.value0);
      };
      if (u instanceof Types.GUPU) {
          return Data_Lens_Setter.over(player(u.value0)(Data_Lens_Internal_Wander.wanderFunction))(applyPlayerUpdate(u.value1));
      };
      if (u instanceof Types.GUIU) {
          return Data_Lens_Setter.over(function ($104) {
              return Types.items(Data_Profunctor_Strong.strongFn)(Data_Lens_At.at(Data_Lens_At.atMap(Data_Ord.ordInt))(u.value0)(Data_Profunctor_Strong.strongFn)($104));
          })(applyItemUpdate(u.value1));
      };
      if (u instanceof Types.ChangedCountdown) {
          return setCountdown(u.value0);
      };
      if (u instanceof Types.GameEnded) {
          return Control_Category.identity(Control_Category.categoryFn);
      };
      if (u instanceof Types.ChangedRampage) {
          return function (g) {
              return {
                  map: g.map,
                  players: g.players,
                  items: g.items,
                  countdown: g.countdown,
                  rampage: u.value0,
                  safeZone: g.safeZone
              };
          };
      };
      throw new Error("Failed pattern match at Game line 49, column 3 - line 61, column 30: " + [ u.constructor.name ]);
  };
  var applyGameUpdateM = function (update) {
      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity)))(Types.tellGameUpdate(update))(function () {
          return Types.modifyGame(applyGameUpdate(update));
      });
  };
  var changeCountdown = function ($105) {
      return applyGameUpdateM(Types.ChangedCountdown.create($105));
  };
  var changeDirection = function (pId) {
      return function (d) {
          return applyGameUpdateM(new Types.GUPU(pId, new Types.ChangedDirection(d)));
      };
  };
  var changeIntendedDirection = function (pId) {
      return function (d) {
          return applyGameUpdateM(new Types.GUPU(pId, new Types.ChangedIntendedDirection(d)));
      };
  };
  var handleInput = function (input) {
      return Data_Foldable.for_(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity)))(Data_List_Types.foldableList)(Data_Map_Internal.toUnfoldable(Data_List_Types.unfoldableList)(input))(function (v) {
          return Utils.whenJust(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity)))(v.value1)(function (newDirection) {
              return changeIntendedDirection(v.value0)(new Data_Maybe.Just(newDirection));
          });
      });
  };
  var tryChangeDirection = function (pId) {
      return function (p) {
          return function (d) {
              return Control_Bind.bind(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity)))(canMoveInDirection(pId)(p)(d))(function (v) {
                  return Control_Applicative.when(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity)))(v)(Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity)))(changeDirection(pId)(new Data_Maybe.Just(d)))(function () {
                      return changeIntendedDirection(pId)(Data_Maybe.Nothing.value);
                  }));
              });
          };
      };
  };
  var updateDirection = function (pId) {
      return function (p) {
          return Utils.whenJust(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity)))(Data_Lens_Getter.viewOn(p)(Types.pIntendedDirection(Data_Lens_Internal_Forget.strongForget)))(tryChangeDirection(pId)(p));
      };
  };
  var changeNomIndex = function (pId) {
      return function (i) {
          return applyGameUpdateM(new Types.GUPU(pId, new Types.ChangedNomIndex(i)));
      };
  };
  var changePosition = function (pId) {
      return function (p) {
          return applyGameUpdateM(new Types.GUPU(pId, new Types.ChangedPosition(p)));
      };
  };
  var movePlayer = function (pId) {
      return function (p) {
          return Utils.whenJust(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity)))(Data_Lens_Getter.viewOn(p)(Types.pDirection(Data_Lens_Internal_Forget.strongForget)))(function (dir) {
              return Control_Bind.bind(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity)))(canMoveInDirection(pId)(p)(dir))(function (v) {
                  return Control_Applicative.when(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity)))(v)(Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity)))(changePosition(pId)(moveInDirection(dir)(Data_Lens_Getter.viewOn(p)(Types.pPosition(Data_Lens_Internal_Forget.strongForget)))))(function () {
                      return changeNomIndex(pId)(Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(Data_Lens_Getter.viewOn(p)(Types.pNomIndex(Data_Lens_Internal_Forget.strongForget)) + 1 | 0)(Types.nomIndexMax));
                  }));
              });
          });
      };
  };
  var changeRampage = function ($106) {
      return applyGameUpdateM(Types.ChangedRampage.create($106));
  };
  var decrementRampageCounter = Control_Bind.bind(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity)))(Types.getGame)(function (v) {
      return Utils.whenJust(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity)))(v.rampage)(function (rampage) {
          return changeRampage((function () {
              if (rampage instanceof Types.Rampaging) {
                  return Data_Maybe.Just.create(Data_Maybe.fromMaybe(new Types.Cooldown(cooldownLength))(Data_Functor.map(Data_Maybe.functorMaybe)(Types.Rampaging.create(rampage.value0))(decrementOrNothing(rampage.value1))));
              };
              if (rampage instanceof Types.Cooldown) {
                  return Data_Functor.map(Data_Maybe.functorMaybe)(Types.Cooldown.create)(decrementOrNothing(rampage.value0));
              };
              throw new Error("Failed pattern match at Game line 249, column 7 - line 254, column 46: " + [ rampage.constructor.name ]);
          })());
      });
  });
  var startRampage = function (pId) {
      return changeRampage(Data_Maybe.Just.create(new Types.Rampaging(pId, rampageLength)));
  };
  var changeRespawnCounter = function (pId) {
      return function (x) {
          return applyGameUpdateM(new Types.GUPU(pId, new Types.ChangedRespawnCounter(x)));
      };
  };
  var attemptRespawn = function (pId) {
      return function (p) {
          return Control_Bind.bind(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity)))(Types.getGame)(function (v) {
              return Utils.whenJust(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity)))(Data_Lens_Getter.viewOn(p)(Types.pRespawnCounter(Data_Lens_Internal_Forget.strongForget)))(function (ctr) {
                  var ctr$prime = decrementOrNothing(ctr);
                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity)))(changeRespawnCounter(pId)(ctr$prime))(function () {
                      return Control_Applicative.when(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity)))(Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqInt))(ctr$prime)(Data_Maybe.Nothing.value))((function () {
                          var mPos = Data_Foldable.find(Data_Foldable.foldableArray)(function (pos) {
                              return isFree(v.map)(pos);
                          })(v.safeZone);
                          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity)))(Utils.whenJust(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity)))(mPos)(changePosition(pId)))(function () {
                              return changeDirection(pId)(Data_Maybe.Nothing.value);
                          });
                      })());
                  });
              });
          });
      };
  };
  var changeScore = function (pId) {
      return function (s) {
          return applyGameUpdateM(new Types.GUPU(pId, new Types.ChangedScore(s)));
      };
  };
  var eatOtherPlayers = function (pId) {
      return function (p) {
          var takeHalfPoints = function (pId1) {
              return function (p1) {
                  return function (pId$prime) {
                      return function (p$prime) {
                          var delta = Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(Data_Lens_Getter.viewOn(p$prime)(Types.pScore(Data_Lens_Internal_Forget.strongForget)))(2);
                          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity)))(changeScore(pId1)(Data_Lens_Getter.viewOn(p1)(Types.pScore(Data_Lens_Internal_Forget.strongForget)) + delta | 0))(function () {
                              return changeScore(pId$prime)(Data_Lens_Getter.viewOn(p$prime)(Types.pScore(Data_Lens_Internal_Forget.strongForget)) - delta | 0);
                          });
                      };
                  };
              };
          };
          return Control_Bind.bind(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity)))(isRampage(pId))(function (v) {
              return Control_Applicative.when(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity)))(v)(Types.eachPlayer(function (pId$prime) {
                  return function (p$prime) {
                      return Control_Applicative.when(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity)))(Data_Eq.notEq(Types.eqPlayerId)(pId$prime)(pId) && !isRespawning(p$prime))((function () {
                          var q = Types.quadrance(Data_Lens_Getter.viewOn(p)(Types.pPosition(Data_Lens_Internal_Forget.strongForget)))(Data_Lens_Getter.viewOn(p$prime)(Types.pPosition(Data_Lens_Internal_Forget.strongForget)));
                          return Control_Applicative.when(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity)))(q <= minEatingQuadrance)(Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity)))(changeRespawnCounter(pId$prime)(new Data_Maybe.Just(respawnLength)))(function () {
                              return takeHalfPoints(pId)(p)(pId$prime)(p$prime);
                          }));
                      })());
                  };
              }));
          });
      };
  };
  var eat = function (iId) {
      return applyGameUpdateM(new Types.GUIU(iId, Types.Eaten.value));
  };
  var eatItems = function (pId) {
      return function (p) {
          return Control_Bind.bind(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity)))(Types.getGame)(function (v) {
              var mItem = lookupItemByPosition(Data_Lens_Getter.viewOn(p)(Types.pPosition(Data_Lens_Internal_Forget.strongForget)))(v);
              return Utils.whenJust(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity)))(mItem)(function (v1) {
                  var v2 = Data_Lens_Getter.viewOn(v1.value1)(Types.iType(Data_Lens_Internal_Forget.strongForget));
                  if (v2 instanceof Types.LittleDot) {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity)))(eat(v1.value0))(function () {
                          return changeScore(pId)(Data_Lens_Getter.viewOn(p)(Types.pScore(Data_Lens_Internal_Forget.strongForget)) + 1 | 0);
                      });
                  };
                  if (v2 instanceof Types.BigDot) {
                      return Control_Applicative.when(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity)))(!Data_Maybe.isJust(v.rampage))(Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity)))(eat(v1.value0))(function () {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity)))(changeScore(pId)(Data_Lens_Getter.viewOn(p)(Types.pScore(Data_Lens_Internal_Forget.strongForget)) + 5 | 0))(function () {
                              return startRampage(pId);
                          });
                      }));
                  };
                  throw new Error("Failed pattern match at Game line 218, column 5 - line 226, column 27: " + [ v2.constructor.name ]);
              });
          });
      };
  };
  var endGame = function ($107) {
      return applyGameUpdateM(Types.GameEnded.create($107));
  };
  var checkForGameEnd = Control_Bind.bind(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity)))(Types.getGame)(function (v) {
      return Utils.whenJust(Control_Monad_Writer_Trans.applicativeWriterT(Data_Monoid.monoidArray)(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity)))(checkEnded(v))(endGame);
  });
  var doLogic = Control_Bind.bind(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity)))(Types.getGame)(function (v) {
      if (v.countdown instanceof Data_Maybe.Just) {
          return changeCountdown(decrementOrNothing(v.countdown.value0));
      };
      if (v.countdown instanceof Data_Maybe.Nothing) {
          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity)))(Types.eachPlayer(updateDirection))(function () {
              return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity)))(Types.eachPlayer(movePlayer))(function () {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity)))(Types.eachPlayer(eatItems))(function () {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity)))(Types.eachPlayer(eatOtherPlayers))(function () {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity)))(Types.eachPlayer(attemptRespawn))(function () {
                              return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity)))(decrementRampageCounter)(function () {
                                  return checkForGameEnd;
                              });
                          });
                      });
                  });
              });
          });
      };
      throw new Error("Failed pattern match at Game line 174, column 3 - line 183, column 22: " + [ v.countdown.constructor.name ]);
  });
  var stepGame = function (input) {
      return function (game) {
          return Types.execGameUpdateM(game)(Control_Apply.applySecond(Control_Monad_Writer_Trans.applyWriterT(Data_Semigroup.semigroupArray)(Control_Monad_State_Trans.applyStateT(Data_Identity.monadIdentity)))(handleInput(input))(doLogic));
      };
  };
  exports["minPlayers"] = minPlayers;
  exports["rampageLength"] = rampageLength;
  exports["cooldownLength"] = cooldownLength;
  exports["respawnLength"] = respawnLength;
  exports["minEatingQuadrance"] = minEatingQuadrance;
  exports["player"] = player;
  exports["applyGameUpdate"] = applyGameUpdate;
  exports["removePlayer"] = removePlayer;
  exports["applyPlayerUpdate"] = applyPlayerUpdate;
  exports["applyItemUpdate"] = applyItemUpdate;
  exports["applyGameUpdateM"] = applyGameUpdateM;
  exports["changePosition"] = changePosition;
  exports["changeDirection"] = changeDirection;
  exports["changeIntendedDirection"] = changeIntendedDirection;
  exports["changeScore"] = changeScore;
  exports["changeCountdown"] = changeCountdown;
  exports["changeNomIndex"] = changeNomIndex;
  exports["eat"] = eat;
  exports["changeRespawnCounter"] = changeRespawnCounter;
  exports["endGame"] = endGame;
  exports["changeRampage"] = changeRampage;
  exports["initialGame"] = initialGame;
  exports["stepGame"] = stepGame;
  exports["handleInput"] = handleInput;
  exports["doLogic"] = doLogic;
  exports["decrementOrNothing"] = decrementOrNothing;
  exports["updateDirection"] = updateDirection;
  exports["movePlayer"] = movePlayer;
  exports["isRampage"] = isRampage;
  exports["eatItems"] = eatItems;
  exports["eatOtherPlayers"] = eatOtherPlayers;
  exports["decrementRampageCounter"] = decrementRampageCounter;
  exports["startRampage"] = startRampage;
  exports["checkForGameEnd"] = checkForGameEnd;
  exports["tryChangeDirection"] = tryChangeDirection;
  exports["canMoveInDirection"] = canMoveInDirection;
  exports["isRespawning"] = isRespawning;
  exports["attemptRespawn"] = attemptRespawn;
  exports["moveInDirection"] = moveInDirection;
  exports["isFree"] = isFree;
  exports["makeItems"] = makeItems;
  exports["makeGame"] = makeGame;
  exports["checkEnded"] = checkEnded;
  exports["isEnded"] = isEnded;
  exports["lookupItemByPosition"] = lookupItemByPosition;
})(PS["Game"] = PS["Game"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Int = PS["Data.Int"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var LevelMap = PS["LevelMap"];
  var $$Math = PS["Math"];
  var Prelude = PS["Prelude"];
  var Types = PS["Types"];                 
  var tileColor = "hsl(200, 80%, 40%)";        
  var pxPerTile = 35.0;
  var pxPerBlock = pxPerTile / Data_Int.toNumber(LevelMap.tileSize);
  var playerColor = function (pId) {
      var hue = (function () {
          if (pId instanceof Types.P1) {
              return 0;
          };
          if (pId instanceof Types.P2) {
              return 90;
          };
          if (pId instanceof Types.P3) {
              return 180;
          };
          if (pId instanceof Types.P4) {
              return 270;
          };
          throw new Error("Failed pattern match at Style line 24, column 9 - line 29, column 3: " + [ pId.constructor.name ]);
      })();
      return "hsl(" + (Data_Show.show(Data_Show.showInt)(hue) + ", 100%, 60%)");
  };                               
  var linkColor = playerColor(Types.P3.value);
  var fontUrl = "https://fonts.googleapis.com/css?family=Exo:700";
  var fontName = "Exo";
  var fontColor = "#dfd1a5";   
  var canvasSize = pxPerBlock * Data_Int.toNumber(LevelMap.mapSize);
  var backgroundColorLighter = "hsl(240, 20%, 32%)";
  var backgroundColor = "hsl(240, 20%, 25%)";
  exports["fontName"] = fontName;
  exports["fontUrl"] = fontUrl;
  exports["backgroundColor"] = backgroundColor;
  exports["backgroundColorLighter"] = backgroundColorLighter;
  exports["fontColor"] = fontColor;
  exports["tileColor"] = tileColor;
  exports["linkColor"] = linkColor;
  exports["playerColor"] = playerColor;
  exports["pxPerTile"] = pxPerTile;
  exports["pxPerBlock"] = pxPerBlock;
  exports["canvasSize"] = canvasSize;
})(PS["Style"] = PS["Style"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Monad_Free = PS["Control.Monad.Free"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_CatList = PS["Data.CatList"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];                 
  var HTMLns = (function () {
      function HTMLns() {

      };
      HTMLns.value = new HTMLns();
      return HTMLns;
  })();
  var Attr = (function () {
      function Attr(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Attr.create = function (value0) {
          return function (value1) {
              return new Attr(value0, value1);
          };
      };
      return Attr;
  })();
  var Attribute = (function () {
      function Attribute(value0) {
          this.value0 = value0;
      };
      Attribute.create = function (value0) {
          return new Attribute(value0);
      };
      return Attribute;
  })();
  var Element = (function () {
      function Element(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      Element.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new Element(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return Element;
  })();
  var Content = (function () {
      function Content(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Content.create = function (value0) {
          return function (value1) {
              return new Content(value0, value1);
          };
      };
      return Content;
  })();
  var Empty = (function () {
      function Empty(value0) {
          this.value0 = value0;
      };
      Empty.create = function (value0) {
          return new Empty(value0);
      };
      return Empty;
  })();
  var Attributable = function ($$with) {
      this["with"] = $$with;
  };
  var $$with = function (dict) {
      return dict["with"];
  };
  var text = function (s) {
      return Control_Monad_Free.liftF(new Content(s, Data_Unit.unit));
  }; 
  var parent = function (ns) {
      return function (el) {
          return function (kids) {
              return Control_Monad_Free.liftF(new Element(ns, el, kids, Data_Monoid.mempty(Data_CatList.monoidCatList), Data_Monoid.mempty(Data_CatList.monoidCatList), Data_Unit.unit));
          };
      };
  };                                                                
  var leaf = function (ns) {
      return function (el) {
          return Control_Monad_Free.liftF(new Element(ns, el, Control_Monad_Free.liftF(new Empty(Data_Unit.unit)), Data_Monoid.mempty(Data_CatList.monoidCatList), Data_Monoid.mempty(Data_CatList.monoidCatList), Data_Unit.unit));
      };
  }; 
  var attribute = function (key) {
      return function (value) {
          return new Attribute(Control_Applicative.pure(Data_CatList.applicativeCatList)(new Attr(key, value)));
      };
  };
  var attributableMarkup = new Attributable(function (f) {
      return function (v) {
          var withF = function (v1) {
              if (v1 instanceof Element) {
                  return new Element(v1.value0, v1.value1, v1.value2, Data_Semigroup.append(Data_CatList.semigroupCatList)(v1.value3)(v.value0), v1.value4, v1.value5);
              };
              return v1;
          };
          return Control_Monad_Free.hoistFree(withF)(f);
      };
  });
  var attributableMarkupF = new Attributable(function (k) {
      return function (xs) {
          return function (m) {
              return $$with(attributableMarkup)(k(m))(xs);
          };
      };
  });
  exports["Element"] = Element;
  exports["Content"] = Content;
  exports["Empty"] = Empty;
  exports["HTMLns"] = HTMLns;
  exports["Attr"] = Attr;
  exports["parent"] = parent;
  exports["leaf"] = leaf;
  exports["text"] = text;
  exports["Attributable"] = Attributable;
  exports["with"] = $$with;
  exports["attribute"] = attribute;
  exports["attributableMarkup"] = attributableMarkup;
  exports["attributableMarkupF"] = attributableMarkupF;
})(PS["Text.Smolder.Markup"] = PS["Text.Smolder.Markup"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Text_Smolder_Markup = PS["Text.Smolder.Markup"];                 
  var parent = Text_Smolder_Markup.parent(Text_Smolder_Markup.HTMLns.value);
  var script = parent("script");
  var title = parent("title");
  var p = parent("p");          
  var leaf = Text_Smolder_Markup.leaf(Text_Smolder_Markup.HTMLns.value);
  var link = leaf("link");        
  var meta = leaf("meta");
  var input = leaf("input");
  var html = parent("html");    
  var head = parent("head");
  var h2 = parent("h2");
  var h1 = parent("h1");
  var div = parent("div");        
  var canvas = parent("canvas");
  var body = parent("body");
  var a = parent("a");
  exports["parent"] = parent;
  exports["leaf"] = leaf;
  exports["a"] = a;
  exports["body"] = body;
  exports["canvas"] = canvas;
  exports["div"] = div;
  exports["h1"] = h1;
  exports["h2"] = h2;
  exports["head"] = head;
  exports["html"] = html;
  exports["p"] = p;
  exports["script"] = script;
  exports["title"] = title;
  exports["input"] = input;
  exports["link"] = link;
  exports["meta"] = meta;
})(PS["Text.Smolder.HTML"] = PS["Text.Smolder.HTML"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Text_Smolder_Markup = PS["Text.Smolder.Markup"]; 
  var type$prime = Text_Smolder_Markup.attribute("type");
  var src = Text_Smolder_Markup.attribute("src");          
  var rel = Text_Smolder_Markup.attribute("rel");  
  var lang = Text_Smolder_Markup.attribute("lang");  
  var id = Text_Smolder_Markup.attribute("id");    
  var httpEquiv = Text_Smolder_Markup.attribute("http-equiv");
  var href = Text_Smolder_Markup.attribute("href");
  var defer = Text_Smolder_Markup.attribute("defer");                    
  var content = Text_Smolder_Markup.attribute("content");
  var className = Text_Smolder_Markup.attribute("class");
  var charset = Text_Smolder_Markup.attribute("charset");
  exports["charset"] = charset;
  exports["className"] = className;
  exports["content"] = content;
  exports["defer"] = defer;
  exports["href"] = href;
  exports["httpEquiv"] = httpEquiv;
  exports["id"] = id;
  exports["lang"] = lang;
  exports["rel"] = rel;
  exports["src"] = src;
  exports["type'"] = type$prime;
})(PS["Text.Smolder.HTML.Attributes"] = PS["Text.Smolder.HTML.Attributes"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Free = PS["Control.Monad.Free"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array = PS["Data.Array"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Lens_Getter = PS["Data.Lens.Getter"];
  var Data_Lens_Internal_Forget = PS["Data.Lens.Internal.Forget"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Map = PS["Data.Map"];
  var Data_Map_Internal = PS["Data.Map.Internal"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_String = PS["Data.String"];
  var Data_String_Common = PS["Data.String.Common"];
  var Data_String_Pattern = PS["Data.String.Pattern"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Tuple_Nested = PS["Data.Tuple.Nested"];
  var Prelude = PS["Prelude"];
  var Style = PS["Style"];
  var Text_Smolder_HTML = PS["Text.Smolder.HTML"];
  var Text_Smolder_HTML_Attributes = PS["Text.Smolder.HTML.Attributes"];
  var Text_Smolder_Markup = PS["Text.Smolder.Markup"];
  var Types = PS["Types"];
  var Utils = PS["Utils"];                 
  var replaceAll = function ($20) {
      return Data_Foldable.foldr(Data_Foldable.foldableArray)(Control_Semigroupoid.composeFlipped(Control_Semigroupoid.semigroupoidFn))(Control_Category.identity(Control_Category.categoryFn))(Data_Functor.map(Data_Functor.functorArray)(function (v) {
          return Data_String_Common.replace(v.value0)(v.value1);
      })($20));
  };
  var rawStyles = "\x0a  .clearfix:after {\x0a\x09visibility: hidden;\x0a\x09display: block;\x0a\x09font-size: 0;\x0a\x09content: \" \";\x0a\x09clear: both;\x0a\x09height: 0;\x0a  }\x0a\x0a  body {\x0a    background-color: ${backgroundColor};\x0a    color: ${fontColor};\x0a    font: normal 100% ${fontName}, sans-serif;\x0a    margin: 0;\x0a  }\x0a\x0a  h1 {\x0a    padding-top: 1em;\x0a    text-align: center;\x0a  }\x0a\x0a  div, p {\x0a    word-wrap: break-word;\x0a  }\x0a\x0a  a, a:visited {\x0a    color: ${linkColor};\x0a  }\x0a\x0a  input {\x0a    border: 5px solid ${fontColor};\x0a    -webkit-box-shadow:\x0a      inset 0 0 8px  rgba(0,0,0,0.1),\x0a            0 0 16px rgba(0,0,0,0.1);\x0a    -moz-box-shadow:\x0a      inset 0 0 8px  rgba(0,0,0,0.1),\x0a            0 0 16px rgba(0,0,0,0.1);\x0a     box-shadow:\x0a      inset 0 0 8px  rgba(0,0,0,0.1),\x0a            0 0 16px rgba(0,0,0,0.1);\x0a    padding: 10px;\x0a    background: rgba(255,255,255,0.3);\x0a    margin: 0 0 10px 0;\x0a    font-size: 150%;\x0a    color: ${fontColor};\x0a    width: 300px;\x0a  }\x0a\x0a  #game {\x0a    margin: 0 auto;\x0a    width: ${canvasSize}px;\x0a  }\x0a\x0a  #background {\x0a    position: absolute;\x0a    z-index: 0;\x0a  }\x0a\x0a  #foreground {\x0a    position: absolute;\x0a    z-index: 1;\x0a  }\x0a\x0a  #scores-container {\x0a    position: absolute;\x0a    z-index: 2;\x0a    width: ${canvasSize}px;\x0a  }\x0a\x0a  #waiting-message {\x0a    position: absolute;\x0a    z-index: 3;\x0a    width: ${canvasSize}px;\x0a  }\x0a\x0a  #prompt {\x0a    z-index: 3;\x0a    margin: 0 auto;\x0a    text-align: center;\x0a    width: ${canvasSize}px;\x0a    font-size: 145%;\x0a    position: absolute;\x0a  }\x0a\x0a  #waiting-message p {\x0a    text-align: center;\x0a    font-size: 140%;\x0a    margin-left: 0 auto;\x0a    margin-right: 0 auto;\x0a  }\x0a\x0a  #error {\x0a    position: fixed;\x0a    top: 25%;\x0a    left: 50%;\x0a    transform: translate(-50%, -50%);\x0a    z-index: 101;\x0a\x0a    width: calc(${canvasSize}px - 5px);\x0a    background-color: ${backgroundColor};\x0a    display: none;\x0a\x0a    border: 1px solid;\x0a    border-radius: 10px;\x0a  }\x0a\x0a  #error-overlay {\x0a    position: fixed;\x0a    top: 0;\x0a    left: 0;\x0a    width: 100%;\x0a    height: 100%;\x0a    display: none;\x0a    z-index: 100;\x0a    background-color: rgba(0,0,0, 0.5);\x0a  }\x0a\x0a  #error h2 {\x0a    text-align: center;\x0a  }\x0a\x0a  #error p {\x0a    padding: 0 4em 0 4em;\x0a  }\x0a\x0a  .scores {\x0a    margin-bottom: 5em;\x0a  }\x0a\x0a  .scores-header {\x0a    font-size: 200%;\x0a    text-align: center;\x0a  }\x0a\x0a  .scores-row {\x0a    height: 2em;\x0a    padding: 0.5em 1em 0.5em 1em;\x0a    margin: 0 auto;\x0a    width: 80%;\x0a  }\x0a\x0a  .simple-scores {\x0a    width: 80%;\x0a    margin-left: 10px;\x0a  }\x0a\x0a  .simple-scores .player-P1,\x0a  .simple-scores .player-P2,\x0a  .simple-scores .player-P3,\x0a  .simple-scores .player-P4 {\x0a    text-align: right;\x0a  }\x0a\x0a  .is-you {\x0a    background-color: ${backgroundColorLighter};\x0a  }\x0a\x0a  .scores-cell {\x0a    font-size: 150%;\x0a    float: left;\x0a  }\x0a\x0a  .cell-wide {\x0a    width: 60%;\x0a  }\x0a\x0a  .cell-thin {\x0a    width: 20%;\x0a  }\x0a\x0a  .cell-thinnest {\x0a    width: 11%;\x0a  }\x0a\x0a  .score {\x0a    text-align: center;\x0a  }\x0a\x0a  .ready-state {\x0a    width: 25%;\x0a    float: left;\x0a  }\x0a\x0a  .how-to-play {\x0a    position: relative;\x0a    top: calc(${canvasSize}px + 10px);\x0a  }\x0a";
  var playerColorStyles = (function () {
      var concat = Data_String_Common.joinWith("");
      return concat(Data_Function.flip(Data_Functor.map(Data_Functor.functorArray))(Types.allPlayerIds)(function (pId) {
          return concat([ ".player-", Types.displayPlayerId(pId), " { color: ", Style.playerColor(pId), ";}\x0a" ]);
      }));
  })();
  var styles = replaceAll([ new Data_Tuple.Tuple("${linkColor}", Style.linkColor), new Data_Tuple.Tuple("${backgroundColor}", Style.backgroundColor), new Data_Tuple.Tuple("${backgroundColor}", Style.backgroundColor), new Data_Tuple.Tuple("${backgroundColorLighter}", Style.backgroundColorLighter), new Data_Tuple.Tuple("${fontColor}", Style.fontColor), new Data_Tuple.Tuple("${fontColor}", Style.fontColor), new Data_Tuple.Tuple("${fontColor}", Style.fontColor), new Data_Tuple.Tuple("${fontName}", Style.fontName), new Data_Tuple.Tuple("${tileColor}", Style.tileColor), new Data_Tuple.Tuple("${canvasSize}", Data_Show.show(Data_Show.showNumber)(Style.canvasSize)), new Data_Tuple.Tuple("${canvasSize}", Data_Show.show(Data_Show.showNumber)(Style.canvasSize)), new Data_Tuple.Tuple("${canvasSize}", Data_Show.show(Data_Show.showNumber)(Style.canvasSize)), new Data_Tuple.Tuple("${canvasSize}", Data_Show.show(Data_Show.showNumber)(Style.canvasSize)), new Data_Tuple.Tuple("${canvasSize}", Data_Show.show(Data_Show.showNumber)(Style.canvasSize)), new Data_Tuple.Tuple("${canvasSize}", Data_Show.show(Data_Show.showNumber)(Style.canvasSize)) ])(rawStyles + playerColorStyles);
  var indexHtml = Text_Smolder_Markup["with"](Text_Smolder_Markup.attributableMarkupF)(Text_Smolder_HTML.html)(Text_Smolder_HTML_Attributes.lang("en"))(Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Free.freeBind)(Text_Smolder_HTML.head(Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Free.freeBind)(Text_Smolder_HTML.title(Text_Smolder_Markup.text("multipac")))(function () {
      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Free.freeBind)(Text_Smolder_Markup["with"](Text_Smolder_Markup.attributableMarkup)(Text_Smolder_HTML.meta)(Text_Smolder_HTML_Attributes.charset("utf-8")))(function () {
          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Free.freeBind)(Text_Smolder_Markup["with"](Text_Smolder_Markup.attributableMarkup)(Text_Smolder_Markup["with"](Text_Smolder_Markup.attributableMarkup)(Text_Smolder_HTML.meta)(Text_Smolder_HTML_Attributes.httpEquiv("X-UA-Compatible")))(Text_Smolder_HTML_Attributes.content("IE=edge,chrome=1")))(function () {
              return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Free.freeBind)(Text_Smolder_Markup["with"](Text_Smolder_Markup.attributableMarkupF)(Text_Smolder_Markup["with"](Text_Smolder_Markup.attributableMarkupF)(Text_Smolder_HTML.script)(Text_Smolder_HTML_Attributes.src("/js/client.js")))(Text_Smolder_HTML_Attributes.defer(""))(Text_Smolder_Markup.text(" ")))(function () {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Free.freeBind)(Text_Smolder_Markup["with"](Text_Smolder_Markup.attributableMarkup)(Text_Smolder_Markup["with"](Text_Smolder_Markup.attributableMarkup)(Text_Smolder_Markup["with"](Text_Smolder_Markup.attributableMarkup)(Text_Smolder_HTML.link)(Text_Smolder_HTML_Attributes.rel("stylesheet")))(Text_Smolder_HTML_Attributes["type'"]("text/css")))(Text_Smolder_HTML_Attributes.href(Style.fontUrl)))(function () {
                      return Text_Smolder_Markup["with"](Text_Smolder_Markup.attributableMarkup)(Text_Smolder_Markup["with"](Text_Smolder_Markup.attributableMarkup)(Text_Smolder_Markup["with"](Text_Smolder_Markup.attributableMarkup)(Text_Smolder_HTML.link)(Text_Smolder_HTML_Attributes.rel("stylesheet")))(Text_Smolder_HTML_Attributes["type'"]("text/css")))(Text_Smolder_HTML_Attributes.href("style.css"));
                  });
              });
          });
      });
  })))(function () {
      return Text_Smolder_HTML.body(Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Free.freeBind)(Text_Smolder_Markup["with"](Text_Smolder_Markup.attributableMarkupF)(Text_Smolder_HTML.div)(Text_Smolder_HTML_Attributes.id("error-overlay"))(Text_Smolder_Markup.text(" ")))(function () {
          return Text_Smolder_Markup["with"](Text_Smolder_Markup.attributableMarkupF)(Text_Smolder_HTML.div)(Text_Smolder_HTML_Attributes.id("game"))(Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Free.freeBind)(Text_Smolder_HTML.h1(Text_Smolder_Markup.text("multipac")))(function () {
              return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Free.freeBind)(Text_Smolder_Markup["with"](Text_Smolder_Markup.attributableMarkupF)(Text_Smolder_HTML.div)(Text_Smolder_HTML_Attributes.id("prompt"))(Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Free.freeBind)(Text_Smolder_Markup["with"](Text_Smolder_Markup.attributableMarkupF)(Text_Smolder_HTML.p)(Text_Smolder_HTML_Attributes.id("prompt-message"))(Text_Smolder_Markup.text(" ")))(function () {
                  return Text_Smolder_Markup["with"](Text_Smolder_Markup.attributableMarkup)(Text_Smolder_Markup["with"](Text_Smolder_Markup.attributableMarkup)(Text_Smolder_HTML.input)(Text_Smolder_HTML_Attributes.id("prompt-input")))(Text_Smolder_HTML_Attributes["type'"]("text"));
              })))(function () {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Free.freeBind)(Text_Smolder_Markup["with"](Text_Smolder_Markup.attributableMarkupF)(Text_Smolder_HTML.div)(Text_Smolder_HTML_Attributes.id("waiting-message"))(Text_Smolder_Markup.text(" ")))(function () {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Free.freeBind)(Text_Smolder_Markup["with"](Text_Smolder_Markup.attributableMarkupF)(Text_Smolder_HTML.canvas)(Text_Smolder_HTML_Attributes.id("foreground"))(Text_Smolder_Markup.text(" ")))(function () {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Free.freeBind)(Text_Smolder_Markup["with"](Text_Smolder_Markup.attributableMarkupF)(Text_Smolder_HTML.canvas)(Text_Smolder_HTML_Attributes.id("background"))(Text_Smolder_Markup.text(" ")))(function () {
                              return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Free.freeBind)(Text_Smolder_Markup["with"](Text_Smolder_Markup.attributableMarkupF)(Text_Smolder_HTML.div)(Text_Smolder_HTML_Attributes.id("error"))(Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Free.freeBind)(Text_Smolder_HTML.h2(Text_Smolder_Markup.text("disconnected")))(function () {
                                  return Text_Smolder_HTML.p(Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Free.freeBind)(Text_Smolder_Markup.text("Something went wrong and the server couldn't be contacted. "))(function () {
                                      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Free.freeBind)(Text_Smolder_Markup.text("Please "))(function () {
                                          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Free.freeBind)(Text_Smolder_Markup["with"](Text_Smolder_Markup.attributableMarkupF)(Text_Smolder_HTML.a)(Text_Smolder_HTML_Attributes.href(""))(Text_Smolder_Markup.text("refresh the page")))(function () {
                                              return Text_Smolder_Markup.text(" to reconnect.");
                                          });
                                      });
                                  }));
                              })))(function () {
                                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Free.freeBind)(Text_Smolder_Markup["with"](Text_Smolder_Markup.attributableMarkupF)(Text_Smolder_HTML.div)(Text_Smolder_HTML_Attributes.id("scores-container"))(Text_Smolder_Markup.text(" ")))(function () {
                                      return Text_Smolder_Markup["with"](Text_Smolder_Markup.attributableMarkupF)(Text_Smolder_HTML.div)(Text_Smolder_HTML_Attributes.className("how-to-play"))(Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Free.freeBind)(Text_Smolder_HTML.h2(Text_Smolder_Markup.text("how to play")))(function () {
                                          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Free.freeBind)(Text_Smolder_HTML.p(Text_Smolder_Markup.text("Use the arrow keys to move. Obtain points by consuming small dots, big dots, or other players. The player with the most points once all of the dots have been consumed wins.")))(function () {
                                              return Text_Smolder_HTML.p(Text_Smolder_Markup.text("Small dots are worth one point, and big dots are worth five. After you consume a big dot, you have a short window in which you are able to eat other players and steal half of their points. At the same time, the other players\u2019 movement speeds will be reduced (making it easier to catch them). During this window, you will have a golden outline, and the other players will flash to indicate that they are vulnerable."));
                                          });
                                      }));
                                  });
                              });
                          });
                      });
                  });
              });
          }));
      }));
  }));
  exports["replaceAll"] = replaceAll;
  exports["styles"] = styles;
  exports["rawStyles"] = rawStyles;
  exports["playerColorStyles"] = playerColorStyles;
  exports["indexHtml"] = indexHtml;
})(PS["HtmlViews"] = PS["HtmlViews"] || {});
(function(exports) {
    "use strict";

  exports.handleCallbackImpl = function (left, right, f) {
    return function (err, value) {
      if (err) {
        f(left(err))();
      } else {
        f(right(value))();
      }
    };
  };
})(PS["Node.FS.Async"] = PS["Node.FS.Async"] || {});
(function(exports) {
    "use strict";

  exports.unsafeRequireFS = require("fs");
})(PS["Node.FS.Internal"] = PS["Node.FS.Internal"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Node.FS.Internal"];
  var Effect = PS["Effect"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];                 
  var mkEffect = Unsafe_Coerce.unsafeCoerce;
  exports["mkEffect"] = mkEffect;
  exports["unsafeRequireFS"] = $foreign.unsafeRequireFS;
})(PS["Node.FS.Internal"] = PS["Node.FS.Internal"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var $foreign = PS["Node.FS.Async"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_DateTime = PS["Data.DateTime"];
  var Data_DateTime_Instant = PS["Data.DateTime.Instant"];
  var Data_Either = PS["Data.Either"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Int = PS["Data.Int"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Nullable = PS["Data.Nullable"];
  var Data_Show = PS["Data.Show"];
  var Data_Time_Duration = PS["Data.Time.Duration"];
  var Effect = PS["Effect"];
  var Effect_Exception = PS["Effect.Exception"];
  var Effect_Unsafe = PS["Effect.Unsafe"];
  var Node_Buffer = PS["Node.Buffer"];
  var Node_Encoding = PS["Node.Encoding"];
  var Node_FS = PS["Node.FS"];
  var Node_FS_Internal = PS["Node.FS.Internal"];
  var Node_FS_Perms = PS["Node.FS.Perms"];
  var Node_FS_Stats = PS["Node.FS.Stats"];
  var Node_Path = PS["Node.Path"];
  var Prelude = PS["Prelude"];                 
  var handleCallback = function (cb) {
      return $foreign.handleCallbackImpl(Data_Either.Left.create, Data_Either.Right.create, cb);
  };
  var fs = Node_FS_Internal.unsafeRequireFS;                                                                                  
  var readFile = function (file) {
      return function (cb) {
          return Node_FS_Internal.mkEffect(function (v) {
              return fs.readFile(file, {}, handleCallback(cb));
          });
      };
  };
  var readTextFile = function (encoding) {
      return function (file) {
          return function (cb) {
              return Node_FS_Internal.mkEffect(function (v) {
                  return fs.readFile(file, {
                      encoding: Data_Show.show(Node_Encoding.showEncoding)(encoding)
                  }, handleCallback(cb));
              });
          };
      };
  };
  exports["readFile"] = readFile;
  exports["readTextFile"] = readTextFile;
})(PS["Node.FS.Async"] = PS["Node.FS.Async"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Comonad_Cofree = PS["Control.Comonad.Cofree"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad_Free = PS["Control.Monad.Free"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_State = PS["Control.Monad.State"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_State_Trans = PS["Control.Monad.State.Trans"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array = PS["Data.Array"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_CatList = PS["Data.CatList"];
  var Data_Char = PS["Data.Char"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Map = PS["Data.Map"];
  var Data_Map_Internal = PS["Data.Map.Internal"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_String = PS["Data.String"];
  var Data_String_CodePoints = PS["Data.String.CodePoints"];
  var Data_String_CodeUnits = PS["Data.String.CodeUnits"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Tuple_Nested = PS["Data.Tuple.Nested"];
  var Global_Unsafe = PS["Global.Unsafe"];
  var Prelude = PS["Prelude"];
  var Text_Smolder_Markup = PS["Text.Smolder.Markup"];                 
  var toStream = function (s) {
      var cs = Data_String_CodeUnits.toCharArray(s);
      return Data_Foldable.foldr(Data_Foldable.foldableArray)(function (c) {
          return function (t) {
              return Control_Comonad_Cofree.mkCofree(c)(new Data_Maybe.Just(t));
          };
      })(Control_Comonad_Cofree.mkCofree("\x00")(Data_Maybe.Nothing.value))(cs);
  };
  var isURLAttr = function (tag) {
      return function (attr) {
          if (attr === "href" && tag === "a") {
              return true;
          };
          if (attr === "href" && tag === "area") {
              return true;
          };
          if (attr === "href" && tag === "base") {
              return true;
          };
          if (attr === "href" && tag === "link") {
              return true;
          };
          if (attr === "src" && tag === "audio") {
              return true;
          };
          if (attr === "src" && tag === "embed") {
              return true;
          };
          if (attr === "src" && tag === "iframe") {
              return true;
          };
          if (attr === "src" && tag === "img") {
              return true;
          };
          if (attr === "src" && tag === "input") {
              return true;
          };
          if (attr === "src" && tag === "script") {
              return true;
          };
          if (attr === "src" && tag === "source") {
              return true;
          };
          if (attr === "src" && tag === "track") {
              return true;
          };
          if (attr === "src" && tag === "video") {
              return true;
          };
          if (attr === "code" && tag === "applet") {
              return true;
          };
          if (attr === "codebase" && tag === "applet") {
              return true;
          };
          if (attr === "data" && tag === "object") {
              return true;
          };
          if (attr === "manifest" && tag === "html") {
              return true;
          };
          if (attr === "poster" && tag === "video") {
              return true;
          };
          if (Data_Boolean.otherwise) {
              return false;
          };
          throw new Error("Failed pattern match at Text.Smolder.Renderer.String line 53, column 1 - line 53, column 41: " + [ tag.constructor.name, attr.constructor.name ]);
      };
  };
  var isMIMEAttr = function (tag) {
      return function (attr) {
          if (attr === "type" && tag === "embed") {
              return true;
          };
          if (attr === "type" && tag === "object") {
              return true;
          };
          if (attr === "type" && tag === "script") {
              return true;
          };
          if (attr === "type" && tag === "source") {
              return true;
          };
          if (attr === "type" && tag === "style") {
              return true;
          };
          if (Data_Boolean.otherwise) {
              return false;
          };
          throw new Error("Failed pattern match at Text.Smolder.Renderer.String line 42, column 1 - line 42, column 42: " + [ tag.constructor.name, attr.constructor.name ]);
      };
  };
  var fromStream = (function () {
      var go = function ($copy_result) {
          return function ($copy_cof) {
              var $tco_var_result = $copy_result;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(result, cof) {
                  var v = Control_Comonad_Cofree.tail(cof);
                  var v1 = Control_Comonad_Cofree.head(cof);
                  if (v instanceof Data_Maybe.Nothing) {
                      $tco_done = true;
                      return result;
                  };
                  if (v instanceof Data_Maybe.Just) {
                      $tco_var_result = result + v1;
                      $copy_cof = v.value0;
                      return;
                  };
                  throw new Error("Failed pattern match at Text.Smolder.Renderer.String line 85, column 7 - line 87, column 48: " + [ v1.constructor.name, v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_result, $copy_cof);
              };
              return $tco_result;
          };
      };
      return go("");
  })();
  var escapeMap = Data_Map_Internal.fromFoldable(Data_Ord.ordChar)(Data_Foldable.foldableArray)([ new Data_Tuple.Tuple("&", "&amp;"), new Data_Tuple.Tuple("<", "&lt;"), new Data_Tuple.Tuple(">", "&gt;"), new Data_Tuple.Tuple("\"", "&quot;"), new Data_Tuple.Tuple("'", "&#39;"), new Data_Tuple.Tuple("/", "&#x2F;") ]);
  var escapeMIMEMap = Data_Map_Internal.fromFoldable(Data_Ord.ordChar)(Data_Foldable.foldableArray)([ new Data_Tuple.Tuple("&", "&amp;"), new Data_Tuple.Tuple("<", "&lt;"), new Data_Tuple.Tuple("\"", "&quot;"), new Data_Tuple.Tuple("'", "&#39;") ]);
  var $$escape = function (m) {
      var checkTail = function (allowed) {
          var checkTail$prime = function (w) {
              var v = Data_Char.toCharCode(Control_Comonad_Cofree.head(w));
              if (Data_Foldable.elem(Data_Foldable.foldableArray)(Data_Eq.eqInt)(v)(allowed)) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(Control_Monad_State_Class.put(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))(true))(function () {
                      return Data_Maybe.fromMaybe(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(false))(Data_Functor.map(Data_Maybe.functorMaybe)(checkTail$prime)(Control_Comonad_Cofree.tail(w)));
                  });
              };
              if (v === 59) {
                  return Control_Monad_State_Class.get(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity));
              };
              if (Data_Boolean.otherwise) {
                  return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(false);
              };
              throw new Error("Failed pattern match at Text.Smolder.Renderer.String line 106, column 11 - line 111, column 42: " + [ v.constructor.name ]);
          };
          return function ($40) {
              return Data_Function.flip(Control_Monad_State.evalState)(false)(checkTail$prime($40));
          };
      };
      var startsEntity = function (v) {
          if (v instanceof Data_Maybe.Just) {
              var v1 = Control_Comonad_Cofree.tail(v.value0);
              var v2 = Control_Comonad_Cofree.head(v.value0);
              if (v2 === "#" && v1 instanceof Data_Maybe.Just) {
                  return checkTail(Data_Array.range(48)(57))(v1.value0);
              };
              if (v2 === "#" && v1 instanceof Data_Maybe.Nothing) {
                  return false;
              };
              return checkTail(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.range(65)(90))(Data_Array.range(97)(122)))(v.value0);
          };
          if (v instanceof Data_Maybe.Nothing) {
              return false;
          };
          throw new Error("Failed pattern match at Text.Smolder.Renderer.String line 92, column 5 - line 92, column 57: " + [ v.constructor.name ]);
      };
      var escapeS = function (w) {
          var v = Control_Comonad_Cofree.head(w);
          if (v === "&") {
              if (startsEntity(Control_Comonad_Cofree.tail(w))) {
                  return "&";
              };
              if (Data_Boolean.otherwise) {
                  return "&amp;";
              };
          };
          return Data_Maybe.fromMaybe(Data_String_CodeUnits.fromCharArray([ v ]))(Data_Map_Internal.lookup(Data_Ord.ordChar)(v)(m));
      };
      return function ($41) {
          return fromStream(Control_Extend.extend(Control_Comonad_Cofree.extendCofree(Data_Maybe.functorMaybe))(escapeS)(toStream($41)));
      };
  };
  var escapeAttrValue = function (tag) {
      return function (key) {
          return function (value) {
              if (isURLAttr(tag)(key)) {
                  return Global_Unsafe.unsafeEncodeURI(value);
              };
              if (isMIMEAttr(tag)(key)) {
                  return $$escape(escapeMIMEMap)(value);
              };
              if (Data_Boolean.otherwise) {
                  return $$escape(escapeMap)(value);
              };
              throw new Error("Failed pattern match at Text.Smolder.Renderer.String line 120, column 1 - line 120, column 56: " + [ tag.constructor.name, key.constructor.name, value.constructor.name ]);
          };
      };
  };
  var showAttrs = function (tag) {
      var showAttr = function (v) {
          return " " + (v.value0 + ("=\"" + (escapeAttrValue(tag)(v.value0)(v.value1) + "\"")));
      };
      return function ($42) {
          return Data_Foldable.fold(Data_CatList.foldableCatList)(Data_Monoid.monoidString)(Data_Functor.map(Data_CatList.functorCatList)(showAttr)($42));
      };
  };
  var renderItem = function (v) {
      if (v instanceof Text_Smolder_Markup.Element) {
          var c = render(v.value2);
          var b = "<" + (v.value1 + (showAttrs(v.value1)(v.value3) + (function () {
              var $30 = Data_String_CodePoints.length(c) > 0 || v.value1 === "script";
              if ($30) {
                  return ">" + (c + ("</" + (v.value1 + ">")));
              };
              return "/>";
          })()));
          return Control_Monad_State_Class.state(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))(function (s) {
              return Data_Tuple.Tuple.create(v.value5)(s + b);
          });
      };
      if (v instanceof Text_Smolder_Markup.Content) {
          return Control_Monad_State_Class.state(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))(function (s) {
              return Data_Tuple.Tuple.create(v.value1)(s + $$escape(escapeMap)(v.value0));
          });
      };
      if (v instanceof Text_Smolder_Markup.Empty) {
          return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(v.value0);
      };
      throw new Error("Failed pattern match at Text.Smolder.Renderer.String line 134, column 1 - line 134, column 45: " + [ v.constructor.name ]);
  };
  var render = function (f) {
      return Control_Monad_State.execState(Control_Monad_Free.foldFree(Control_Monad_State_Trans.monadRecStateT(Control_Monad_Rec_Class.monadRecIdentity))(renderItem)(f))("");
  };
  exports["render"] = render;
})(PS["Text.Smolder.Renderer.String"] = PS["Text.Smolder.Renderer.String"] || {});
(function(exports) {
  // Generated by purs version 0.12.0
  "use strict";
  var BaseServer = PS["BaseServer"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_RWS_Trans = PS["Control.Monad.RWS.Trans"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Argonaut_Decode_Generic_Rep = PS["Data.Argonaut.Decode.Generic.Rep"];
  var Data_Argonaut_Encode_Class = PS["Data.Argonaut.Encode.Class"];
  var Data_Argonaut_Encode_Generic_Rep = PS["Data.Argonaut.Encode.Generic.Rep"];
  var Data_Array = PS["Data.Array"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Lens = PS["Data.Lens"];
  var Data_Lens_At = PS["Data.Lens.At"];
  var Data_Lens_Getter = PS["Data.Lens.Getter"];
  var Data_Lens_Setter = PS["Data.Lens.Setter"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Map = PS["Data.Map"];
  var Data_Map_Internal = PS["Data.Map.Internal"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Profunctor_Strong = PS["Data.Profunctor.Strong"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Set = PS["Data.Set"];
  var Data_Show = PS["Data.Show"];
  var Data_String = PS["Data.String"];
  var Data_String_Common = PS["Data.String.Common"];
  var Data_String_Pattern = PS["Data.String.Pattern"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Effect = PS["Effect"];
  var Effect_Console = PS["Effect.Console"];
  var Effect_Exception = PS["Effect.Exception"];
  var Effect_Ref = PS["Effect.Ref"];
  var Effect_Timer = PS["Effect.Timer"];
  var Game = PS["Game"];
  var HtmlViews = PS["HtmlViews"];
  var Node_Encoding = PS["Node.Encoding"];
  var Node_FS_Async = PS["Node.FS.Async"];
  var Node_HTTP = PS["Node.HTTP"];
  var Node_Stream = PS["Node.Stream"];
  var NodeUrl = PS["NodeUrl"];
  var NodeWebSocket = PS["NodeWebSocket"];
  var Prelude = PS["Prelude"];
  var Text_Smolder_Renderer_String = PS["Text.Smolder.Renderer.String"];
  var Types = PS["Types"];
  var Utils = PS["Utils"];                 
  var step = (function () {
      var readyToStart = function (m) {
          var ps = Data_Map_Internal.values(m);
          return Data_List.length(ps) >= Game.minPlayers && Data_Foldable.all(Data_List_Types.foldableList)(Data_HeytingAlgebra.heytingAlgebraBoolean)(function (v) {
              return Data_Eq.eq(Types.eqReadyState)(v)(Types.Ready.value);
          })(ps);
      };
      return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Data_Identity.bindIdentity)(BaseServer.monoidSendMsgs))(Control_Monad_State_Class.get(Control_Monad_RWS_Trans.monadStateRWST(Data_Identity.monadIdentity)(BaseServer.monoidSendMsgs)))(function (v) {
          if (v instanceof Types.InProgress) {
              var r = Game.stepGame(v.value0.input)(v.value0.game);
              var game$prime = Data_Tuple.fst(r);
              var updates = Data_Tuple.snd(r);
              return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_RWS_Trans.bindRWST(Data_Identity.bindIdentity)(BaseServer.monoidSendMsgs))(BaseServer.sendUpdate(Control_Monad_RWS_Trans.monadRWST(Data_Identity.monadIdentity)(BaseServer.monoidSendMsgs))(Control_Monad_RWS_Trans.monadWriterRWST(Data_Identity.monadIdentity)(BaseServer.monoidSendMsgs))(new Types.SOInProgress(updates)))(function () {
                  var $14 = Game.isEnded(game$prime);
                  if ($14) {
                      return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Data_Identity.bindIdentity)(BaseServer.monoidSendMsgs))(BaseServer.askPlayers(Control_Monad_RWS_Trans.monadRWST(Data_Identity.monadIdentity)(BaseServer.monoidSendMsgs))(Control_Monad_RWS_Trans.monadReaderRWST(Data_Identity.monadIdentity)(BaseServer.monoidSendMsgs)))(function (v1) {
                          return Control_Monad_State_Class.put(Control_Monad_RWS_Trans.monadStateRWST(Data_Identity.monadIdentity)(BaseServer.monoidSendMsgs))(new Types.WaitingForPlayers(Data_Functor.map(Data_Map_Internal.functorMap)(Data_Function["const"](Types.NotReady.value))(v1)));
                      });
                  };
                  return Control_Monad_State_Class.put(Control_Monad_RWS_Trans.monadStateRWST(Data_Identity.monadIdentity)(BaseServer.monoidSendMsgs))(new Types.InProgress({
                      game: game$prime,
                      input: Data_Map_Internal.empty
                  }));
              });
          };
          if (v instanceof Types.WaitingForPlayers) {
              return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_RWS_Trans.bindRWST(Data_Identity.bindIdentity)(BaseServer.monoidSendMsgs))(BaseServer.sendUpdate(Control_Monad_RWS_Trans.monadRWST(Data_Identity.monadIdentity)(BaseServer.monoidSendMsgs))(Control_Monad_RWS_Trans.monadWriterRWST(Data_Identity.monadIdentity)(BaseServer.monoidSendMsgs))(Types.SOWaiting.create(new Types.NewReadyStates(v.value0))))(function () {
                  return Control_Applicative.when(Control_Monad_RWS_Trans.applicativeRWST(Data_Identity.monadIdentity)(BaseServer.monoidSendMsgs))(readyToStart(v.value0))((function () {
                      var game = Game.makeGame(Data_Set.foldableSet)(Data_Map.keys(v.value0));
                      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_RWS_Trans.bindRWST(Data_Identity.bindIdentity)(BaseServer.monoidSendMsgs))(BaseServer.sendUpdate(Control_Monad_RWS_Trans.monadRWST(Data_Identity.monadIdentity)(BaseServer.monoidSendMsgs))(Control_Monad_RWS_Trans.monadWriterRWST(Data_Identity.monadIdentity)(BaseServer.monoidSendMsgs))(Types.SOWaiting.create(Types.GameStarting.create(game))))(function () {
                          return Control_Monad_State_Class.put(Control_Monad_RWS_Trans.monadStateRWST(Data_Identity.monadIdentity)(BaseServer.monoidSendMsgs))(new Types.InProgress({
                              game: game,
                              input: Data_Map_Internal.empty
                          }));
                      });
                  })());
              });
          };
          throw new Error("Failed pattern match at Server line 78, column 3 - line 97, column 56: " + [ v.constructor.name ]);
      });
  })();
  var sendContent = function (res) {
      return function (contentType) {
          return function (contentData) {
              return function __do() {
                  Node_HTTP.setStatusCode(res)(200)();
                  Node_HTTP.setHeader(res)("Content-Type")(contentType)();
                  var stream = Node_HTTP.responseAsStream(res);
                  return Data_Functor["void"](Effect.functorEffect)(Node_Stream.writeString(stream)(Node_Encoding.UTF8.value)(contentData)(Node_Stream.end(stream)(Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit))))();
              };
          };
      };
  };
  var sendCss = function (res) {
      return function (css) {
          return sendContent(res)("text/css")(css);
      };
  };
  var sendHtml = function (res) {
      return function (html) {
          return sendContent(res)("text/html")(html);
      };
  };
  var send404 = function (res) {
      return function __do() {
          Node_HTTP.setStatusCode(res)(404)();
          Node_HTTP.setHeader(res)("Content-Type")("text/plain")();
          var stream = Node_HTTP.responseAsStream(res);
          return Data_Functor["void"](Effect.functorEffect)(Node_Stream.writeString(stream)(Node_Encoding.UTF8.value)("404: File not found")(Node_Stream.end(stream)(Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit))))();
      };
  };
  var onNewPlayer = function (pId) {
      return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Data_Identity.bindIdentity)(BaseServer.monoidSendMsgs))(Control_Monad_State_Class.get(Control_Monad_RWS_Trans.monadStateRWST(Data_Identity.monadIdentity)(BaseServer.monoidSendMsgs)))(function (v) {
          if (v instanceof Types.WaitingForPlayers) {
              var m$prime = Data_Map_Internal.insert(Types.ordPlayerId)(pId)(Types.NotReady.value)(v.value0);
              return Control_Monad_State_Class.put(Control_Monad_RWS_Trans.monadStateRWST(Data_Identity.monadIdentity)(BaseServer.monoidSendMsgs))(new Types.WaitingForPlayers(m$prime));
          };
          return Control_Applicative.pure(Control_Monad_RWS_Trans.applicativeRWST(Data_Identity.monadIdentity)(BaseServer.monoidSendMsgs))(Data_Unit.unit);
      });
  };
  var onClose = function (pId) {
      return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Data_Identity.bindIdentity)(BaseServer.monoidSendMsgs))(Control_Monad_State_Class.get(Control_Monad_RWS_Trans.monadStateRWST(Data_Identity.monadIdentity)(BaseServer.monoidSendMsgs)))(function (v) {
          if (v instanceof Types.InProgress) {
              return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_RWS_Trans.bindRWST(Data_Identity.bindIdentity)(BaseServer.monoidSendMsgs))(BaseServer.sendUpdate(Control_Monad_RWS_Trans.monadRWST(Data_Identity.monadIdentity)(BaseServer.monoidSendMsgs))(Control_Monad_RWS_Trans.monadWriterRWST(Data_Identity.monadIdentity)(BaseServer.monoidSendMsgs))(Types.SOInProgress.create(Data_Array.singleton(new Types.GUPU(pId, Types.PlayerLeft.value)))))(function () {
                  var g$prime = Data_Lens_Setter.over(Types.game_(Data_Profunctor_Strong.strongFn))(Game.removePlayer(pId))(v.value0);
                  return Control_Monad_State_Class.put(Control_Monad_RWS_Trans.monadStateRWST(Data_Identity.monadIdentity)(BaseServer.monoidSendMsgs))(new Types.InProgress(g$prime));
              });
          };
          if (v instanceof Types.WaitingForPlayers) {
              var m$prime = Data_Map_Internal["delete"](Types.ordPlayerId)(pId)(v.value0);
              return Control_Monad_State_Class.put(Control_Monad_RWS_Trans.monadStateRWST(Data_Identity.monadIdentity)(BaseServer.monoidSendMsgs))(new Types.WaitingForPlayers(m$prime));
          };
          throw new Error("Failed pattern match at Server line 137, column 3 - line 145, column 33: " + [ v.constructor.name ]);
      });
  };
  var matchWaiting = Types.matchMessage(Control_Monad_RWS_Trans.monadRWST(Data_Identity.monadIdentity)(BaseServer.monoidSendMsgs))(Types.asWaitingMessage);
  var matchInProgress = Types.matchMessage(Control_Monad_RWS_Trans.monadRWST(Data_Identity.monadIdentity)(BaseServer.monoidSendMsgs))(Types.asInProgressMessage);
  var onMessage = function (msg) {
      return function (pId) {
          return Control_Bind.bind(Control_Monad_RWS_Trans.bindRWST(Data_Identity.bindIdentity)(BaseServer.monoidSendMsgs))(Control_Monad_State_Class.get(Control_Monad_RWS_Trans.monadStateRWST(Data_Identity.monadIdentity)(BaseServer.monoidSendMsgs)))(function (v) {
              if (v instanceof Types.InProgress) {
                  return matchInProgress(msg)(function (newDir) {
                      var g$prime = Data_Lens_Setter.over(Types.input_(Data_Profunctor_Strong.strongFn))(Data_Map_Internal.insert(Types.ordPlayerId)(pId)(new Data_Maybe.Just(newDir)))(v.value0);
                      return Control_Monad_State_Class.put(Control_Monad_RWS_Trans.monadStateRWST(Data_Identity.monadIdentity)(BaseServer.monoidSendMsgs))(new Types.InProgress(g$prime));
                  });
              };
              if (v instanceof Types.WaitingForPlayers) {
                  return matchWaiting(msg)(function (v1) {
                      var m$prime = Data_Map_Internal.alter(Types.ordPlayerId)(Data_Functor.map(Data_Maybe.functorMaybe)(Types.invertReadyState))(pId)(v.value0);
                      return Control_Monad_State_Class.put(Control_Monad_RWS_Trans.monadStateRWST(Data_Identity.monadIdentity)(BaseServer.monoidSendMsgs))(new Types.WaitingForPlayers(m$prime));
                  });
              };
              throw new Error("Failed pattern match at Server line 113, column 3 - line 122, column 35: " + [ v.constructor.name ]);
          });
      };
  };
  var serverCallbacks = {
      step: step,
      onMessage: onMessage,
      onNewPlayer: onNewPlayer,
      onClose: onClose
  };
  var initialState = new Types.WaitingForPlayers(Data_Map_Internal.empty);
  var extension = function (str) {
      var arr = Data_String_Common.split(".")(str);
      var len = Data_Array.length(arr);
      return Data_Array.index(arr)(len - 1 | 0);
  };
  var detectMime = function (str) {
      return Control_Bind.bind(Data_Maybe.bindMaybe)(extension(str))(function (v) {
          if (v === "txt") {
              return new Data_Maybe.Just("text/plain");
          };
          if (v === "html") {
              return new Data_Maybe.Just("text/html");
          };
          if (v === "css") {
              return new Data_Maybe.Just("text/css");
          };
          if (v === "js") {
              return new Data_Maybe.Just("text/javascript");
          };
          return Data_Maybe.Nothing.value;
      });
  };
  var sendFile = function (res) {
      return function (path) {
          var mimeType = Data_Maybe.fromMaybe("text/plain")(detectMime(path));
          return Node_FS_Async.readTextFile(Node_Encoding.UTF8.value)(path)(function (r) {
              if (r instanceof Data_Either.Right) {
                  return Data_Functor["void"](Effect.functorEffect)(sendContent(res)(mimeType)(r.value0));
              };
              if (r instanceof Data_Either.Left) {
                  return Effect_Exception["throw"]("While trying to read " + (path + (": " + Effect_Exception.message(r.value0))));
              };
              throw new Error("Failed pattern match at Server line 156, column 5 - line 160, column 71: " + [ r.constructor.name ]);
          });
      };
  };
  var createHttpServer = Node_HTTP.createServer(function (req) {
      return function (res) {
          var path = (NodeUrl.parseUrl(Node_HTTP.requestURL(req))).pathname;
          if (path === "/") {
              return sendHtml(res)(Text_Smolder_Renderer_String.render(HtmlViews.indexHtml));
          };
          if (path === "/js/client.js") {
              return sendFile(res)("dist/client.js");
          };
          if (path === "/style.css") {
              return sendCss(res)(HtmlViews.styles);
          };
          return send404(res);
      };
  });
  var main = function __do() {
      var v = Effect_Ref["new"](BaseServer.mkServer(initialState))();
      var v1 = Utils.portOrDefault(8080)();
      var v2 = createHttpServer();
      var v3 = BaseServer.startServer(Types.genericServerIncomingMessage)(Data_Argonaut_Decode_Generic_Rep.decodeRepSum(Data_Argonaut_Decode_Generic_Rep.decodeRepConstructor(new Data_Symbol.IsSymbol(function () {
          return "SIToggleReadyState";
      }))(Data_Argonaut_Decode_Generic_Rep.decodeRepArgsNoArguments))(Data_Argonaut_Decode_Generic_Rep.decodeRepConstructor(new Data_Symbol.IsSymbol(function () {
          return "SIInProgress";
      }))(Data_Argonaut_Decode_Generic_Rep.decodeRepArgsArgument(Types.decodeJsonDirection))))(Types.genericServerOutgoingMessage)(Data_Argonaut_Encode_Generic_Rep.encodeRepSum(Data_Argonaut_Encode_Generic_Rep.encodeRepConstructor(new Data_Symbol.IsSymbol(function () {
          return "SOWaiting";
      }))(Data_Argonaut_Encode_Generic_Rep.encodeRepArgsArgument(Types.encodeJsonWaitingUpdate)))(Data_Argonaut_Encode_Generic_Rep.encodeRepConstructor(new Data_Symbol.IsSymbol(function () {
          return "SOInProgress";
      }))(Data_Argonaut_Encode_Generic_Rep.encodeRepArgsArgument(Data_Argonaut_Encode_Class.encodeJsonArray(Types.encodeJsonGameUpdate)))))(serverCallbacks)(v)();
      NodeWebSocket.mount(v3)(v2)();
      return Node_HTTP.listen(v2)({
          hostname: "::",
          port: v1,
          backlog: Data_Maybe.Nothing.value
      })(Effect_Console.log("listening on " + (Data_Show.show(Data_Show.showInt)(v1) + "...")))();
  };
  exports["initialState"] = initialState;
  exports["main"] = main;
  exports["createHttpServer"] = createHttpServer;
  exports["serverCallbacks"] = serverCallbacks;
  exports["step"] = step;
  exports["matchInProgress"] = matchInProgress;
  exports["matchWaiting"] = matchWaiting;
  exports["onMessage"] = onMessage;
  exports["onNewPlayer"] = onNewPlayer;
  exports["onClose"] = onClose;
  exports["sendHtml"] = sendHtml;
  exports["sendCss"] = sendCss;
  exports["sendFile"] = sendFile;
  exports["sendContent"] = sendContent;
  exports["send404"] = send404;
  exports["detectMime"] = detectMime;
  exports["extension"] = extension;
})(PS["Server"] = PS["Server"] || {});
PS["Server"].main();